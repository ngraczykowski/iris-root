plugins {
  id "idea"
  id "maven-publish"
  id "com.silenteight.gradle.convention" version "1.15.0"
  id "com.silenteight.gradle.release" version "1.4.0"
  id "com.silenteight.gradle.wrapper" version "1.1.0"
  id "io.freefair.aspectj" version "5.0.1" apply false
  id "nebula.resolution-rules" version "7.7.7"
  id "org.sonarqube" version "2.8"
  // Spring boot plugin version should be same as in sep-dependencies
  id "org.springframework.boot" version "2.4.6" apply false
}

projectSetup {
  javaVersion = JavaVersion.VERSION_11
}

idea {
  module {
    [".gradle", "build"].each {
      excludeDirs += file("$projectDir/$it")
    }
  }
}

ext {
  gradleScriptDir = "${rootProject.projectDir}/gradle/scripts"
}

apply from: "${gradleScriptDir}/resolutionRules.gradle"

def testReportTask = tasks.register("testReport", TestReport) {
  it.description "Generates report from tests in all submodules"
  it.group "Report"

  it.destinationDir = file("$buildDir/reports/test")
}

def zipTestReportTask = tasks.register('zipTestReport', Zip) {
  it.description "Zips report from tests in all submodules"
  it.group "Report"

  it.from("$buildDir/reports/test") {
    it.into "${project.name}-test-report-${project.version}"
  }
  it.destinationDirectory.fileValue(file("$buildDir/reports"))
  it.archiveFileName.set("${project.name}-test-report-${project.version}.zip")

  it.dependsOn testReportTask
}

tasks.register("build", DefaultTask) { DefaultTask it ->
  it.description "Builds all subprojects and generates reports"
  it.group "Build"

  it.dependsOn zipTestReportTask
}

subprojects { Project project ->
  pluginManager.withPlugin("java") {
    project.apply from: "${gradleScriptDir}/dependencies.gradle"

    project.pluginManager.apply "io.freefair.aspectj.post-compile-weaving"

    project.dependencies {
      implementation libraries.jaxb_api
      annotationProcessor libraries.spring_boot_configuration_processor
    }

    project.aspectj {
      version = libraries.aspectjtools.version
    }

    project.tasks.named(JavaPlugin.COMPILE_JAVA_TASK_NAME).configure { JavaCompile java ->
      def processResources = project.tasks.named(JavaPlugin.PROCESS_RESOURCES_TASK_NAME)

      java.dependsOn processResources
    }

    def ajcArgs = [
        "-Xlintfile", "${rootProject.projectDir}/Xlint.properties".toString(),
    ]

    project.tasks.withType(JavaCompile).configureEach { JavaCompile java ->
      java.ajc.options.compilerArgs = ajcArgs
      java.options.fork = true
    }

    testReportTask.configure {
      it.dependsOn project.tasks.named("test")
      it.reportOn project.tasks.named("test")
    }
  }
}
