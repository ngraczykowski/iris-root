@Library('pipeline-shared-library@master') _

def utils = new com.silenteight.jenkins.ci.Utils()

gradleBuild(
    jdkVersion: 'jdk-11',
    sonarEnabled: true,
    dependencyCheckEnabled: true,
    includeBuildNumberInSnapshotVersion: true,
    additionalParams: [],
    additionalStages: {
      stage('Build and deploy container image') {
        script {
          def gradle = new com.silenteight.jenkins.ci.Gradle()
          gradle.gradle('jib')
        }
        // Stash data to AWS nodes - scripts, helm etc.
        stash includes: 'scripts/**, helm-chart/**', name: 'scripts-and-chart'
      }
      stage('Helm Chart registry') {
        env.INSTALLER_VERSION = utils.getProjectVersion()
        node("aws-worker") {
          sh 'rm -rf ./scripts ./helm-chart'
          unstash 'scripts-and-chart'
          withCredentials(
              [usernamePassword(
                  credentialsId: 'artifactory-deployment-user', usernameVariable: 'USERNAME',
                  passwordVariable: 'PASSWORD')]) {
            script {
              if (utils.getGitBranch() == 'master') {
                echo 'Helm Chart registry'
                sh './scripts/helm-chart-build.sh $USERNAME $PASSWORD'
              } else {
                echo 'This is not a release branch ignore Helm Chart deployment'
              }
            }
          }
        }
      }

      stage('AWS ECR') {
        //This is docker image tag version which will be used to copy from s8 repository
        env.INSTALLER_VERSION = utils.getProjectVersion()
        node("aws-worker") {
          sh 'rm -rf ./scripts ./helm-chart'
          unstash 'scripts-and-chart'
          script {
            if (utils.getGitBranch() == 'master') {
              echo 'AWS image push'
              sh './scripts/aws-deploy.sh'
            } else {
              echo 'This is not a release branch ignore AWS ECR push'
            }
          }
        }
      }
    }
)
