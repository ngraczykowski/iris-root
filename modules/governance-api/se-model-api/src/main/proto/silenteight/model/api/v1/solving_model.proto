syntax = "proto3";

package silenteight.model.api.v1;

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/empty.proto";

option java_package = "com.silenteight.model.api.v1";
option java_outer_classname = "SolvingModelProto";
option java_multiple_files = true;

service SolvingModelService {
  rpc GetDefaultSolvingModel(google.protobuf.Empty) returns (SolvingModel) {
    option (google.api.http) = {
      get: "/v1/solving-models:getDefault"
    };
  }
}

// Binds together configurations of different part of the system required for solving set of alerts
message SolvingModel {
  // The unique name of the model. This is always system-assigned.
  string name = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
  // Policy that binds together feature vectors with solution at match level. Set via Policy API.
  string policy_name = 2 [(google.api.field_behavior) = OUTPUT_ONLY];
  // Strategy which represents an algorithm for determining alert level solution. Required for Solving API.
  string strategy_name = 3;
  // List of agents that are required to determine feature vector for each match
  repeated Agent agents = 4 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// Attributes of an agent required for invocation
message Agent {
  // Topic's routing key used for dispatching message. Provided by an agent.
  string routing_key = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
}