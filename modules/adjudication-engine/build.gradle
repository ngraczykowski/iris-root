plugins {
  id "maven-publish"
  id "org.sonarqube" version "2.8"
  id "com.silenteight.gradle.convention" version "1.17.0"
  id "com.silenteight.gradle.release" version "1.0.9"
  id "com.silenteight.gradle.wrapper" version "1.0.25"
  id "com.silenteight.gradle.testreportspublisher" version "1.1.0"
  id "io.freefair.aspectj" version "5.0.1" apply false
  id "nebula.resolution-rules" version "7.6.0"
  // Spring boot plugin version should be same as Spring version in sep-dependencies
  id "org.springframework.boot" version "2.3.6.RELEASE" apply false
  id "com.google.cloud.tools.jib" version "2.5.0" apply false
  id "org.owasp.dependencycheck" version "6.0.3"
}

projectSetup {
  javaVersion = JavaVersion.VERSION_11
}

ext {
  gradleScriptDir = "${rootProject.projectDir}/gradle/scripts"
}

apply from: "${gradleScriptDir}/ide.gradle"
apply from: "${gradleScriptDir}/resolutionRules.gradle"

subprojects {Project subproject ->
  pluginManager.withPlugin("java") {
    subproject.apply from: "${gradleScriptDir}/dependencies.gradle"

    subproject.pluginManager.apply "maven-publish"
    subproject.pluginManager.apply "io.freefair.aspectj.post-compile-weaving"

    subproject.dependencies {
      implementation libraries.jaxb_api
      annotationProcessor libraries.spring_boot_configuration_processor
    }

    subproject.aspectj {
      version = libraries.aspectjtools.version
    }

    subproject.tasks.named(JavaPlugin.COMPILE_JAVA_TASK_NAME).configure {JavaCompile java ->
      def processResources = project.tasks.named(JavaPlugin.PROCESS_RESOURCES_TASK_NAME)

      java.dependsOn processResources
    }

    def ajcArgs = [
        "-Xlintfile", "${rootProject.projectDir}/Xlint.properties".toString(),
    ]

    subproject.tasks.withType(JavaCompile).configureEach {JavaCompile java ->
      java.ajc.options.compilerArgs = ajcArgs
      java.options.fork = true
      java.options.compilerArgs << "-parameters"
    }

    subproject.afterEvaluate {
      if (!subproject.pluginManager.hasPlugin("java-library"))
        generateClassPathInManifest(subproject)

      if (subproject.pluginManager.hasPlugin("java-library")) {
        subproject.jar {
          preserveFileTimestamps false
          reproducibleFileOrder true
        }
      }

      if (subproject.pluginManager.hasPlugin("com.google.cloud.tools.jib")) {
        subproject.jib {
          from {
            // NOTE(ahaczewski): Use debug version of the image for SNAPSHOT builds.
            def imageSuffix = "$version".endsWith("-SNAPSHOT") ? "-debug" : ""
            image = "gcr.io/distroless/java-debian10:11" + imageSuffix
          }
          to {
            image = "docker.repo.silenteight.com/cloudapi/${subproject.name}:${version}"
            if (!"$version".endsWith("-SNAPSHOT"))
              tags = ["latest"]
          }
          container {
            appRoot = "/silenteight/app"
            environment = [
                "SILENTEIGHT_HOME"          : "/silenteight",
                "CLOUDAPI_DB_HOST"          : "postgres",
                "CLOUDAPI_DB_PORT"          : "5432",
                "CLOUDAPI_DB_NAME"          : "cloudapi",
                "CLOUDAPI_DB_USER"          : "cloudapi",
                "CLOUDAPI_DB_PASSWORD"      : "cloudapi",
                "CLOUDAPI_RABBITMQ_HOST"    : "rabbitmq",
                "CLOUDAPI_RABBITMQ_PORT"    : "5672",
                "CLOUDAPI_RABBITMQ_USER"    : "cloudapi",
                "CLOUDAPI_RABBITMQ_PASSWORD": "cloudapi",
                "CLOUDAPI_RABBITMQ_VHOST"   : "/",
                "TRUSTSTORE_PATH"           : "/silenteight/cert/truststore.p12",
                "TRUSTSTORE_PASSWORD"       : "changeme",
                "TRUSTSTORE_TYPE"           : "PKCS12",
                "KEYSTORE_PATH"             : "/silenteight/cert/keystore.p12",
                "KEYSTORE_PASSWORD"         : "changeme",
                "KEYSTORE_TYPE"             : "PKCS12",
                // Validates the server certificate is trusted (i.e., is in the trust store).
                "TLS_VALIDATE_SERVER"       : "true",
                // Verifies the actual server host name is as states in the certificate.
                "TLS_VERIFY_HOSTNAME"       : "true",
                "SPRING_PROFILES_ACTIVE"    : "",
            ]
            jvmFlags = [
                "-XX:MaxRAMPercentage=75",
                "-Dfile.encoding=UTF-8",
                "-Dsun.jnu.encoding=UTF-8",
                "-Djava.net.preferIPv4Stack=true",
                "-Djava.io.tmpdir=/tmp",
                "-Dsilenteight.home=/silenteight",
                "-Dspring.profiles.include=container",
                "-Dserver.port=8080",
                "-Dgrpc.server.port=8081",
            ]
            ports = ["8080", "8081"]
            user = "nonroot"
            volumes = ["/silenteight/cert"]
            workingDirectory = "/silenteight"
          }
        }
      }
    }
  }
}

static def generateClassPathInManifest(Project project) {
  // Generates Class-Path in .jar manifest
  project.tasks.named(JavaPlugin.JAR_TASK_NAME).configure {Jar jar ->
    jar.doFirst {
      jar.manifest {
        def runtimeClasspath = project.configurations.runtimeClasspath

        if (!runtimeClasspath.isEmpty()) {
          def classPathJars = runtimeClasspath.collect {it.getName()}.join(" ")

          attributes "Class-Path": classPathJars
        }
      }
    }
  }
}
