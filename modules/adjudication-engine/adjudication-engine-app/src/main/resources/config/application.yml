#---------------------------------------------------------------------------------------------------
# SERVER
#---------------------------------------------------------------------------------------------------

# Embedded server configuration
server:
  forward-headers-strategy: native
  undertow:
    threads:
      io: ${cloudapi.web.threads.io}
      worker: ${cloudapi.web.threads.worker}

  error:
    include-exception: true
    include-stacktrace: never

#---------------------------------------------------------------------------------------------------
# MANAGEMENT
#---------------------------------------------------------------------------------------------------

# Management HTTP server
management:
  endpoint:
    health.show-details: always

  endpoints:
    web:
      base-path: /management
      exposure:
        include: [ "health", "info", "liquibase", "metrics", "prometheus", "loggers" ]
    # loggers endpoint is secured with mTLS
    loggers:
      sensitive: false

  metrics:
    tags:
      application: ${spring.application.name}

#-------------------------------------------------------------------------------------------------
# SPRING INTEGRATION
#-------------------------------------------------------------------------------------------------
integration:
  start-delay-seconds: 15
  poll-period-millis: 1000

spring:
  #-------------------------------------------------------------------------------------------------
  # GENERAL
  #-------------------------------------------------------------------------------------------------
  aop:
    auto: false

  task:
    execution:
      pool:
        core-size: 8
        keep-alive: 10s
        max-size: 16
        queue-capacity: 10000
      thread-name-prefix: pool-task-

    scheduling:
      pool:
        size: 2
      thread-name-prefix: pool-scheduling-

  main:
    banner-mode: 'off'

  #-------------------------------------------------------------------------------------------------
  # DATABASE
  #-------------------------------------------------------------------------------------------------
  datasource:
    # Postgres database
    type: com.zaxxer.hikari.HikariDataSource
    url: ${cloudapi.db.url}
    username: ${cloudapi.db.user}
    password: ${cloudapi.db.password}
    initialization-mode: never

    # Hikari pool configuration
    hikari:
      pool-name: Database-Pool
      minimum-idle: ${cloudapi.db.connections.min}
      maximum-pool-size: ${cloudapi.db.connections.max}
      auto-commit: false
      schema: ${cloudapi.db.schema}
      isolate-internal-queries: true
      # NOTE(ahaczewski): Forces HikariCP to commit the transaction after opening fresh connection.
      #  Without it, the connection transaction is left in OPEN state instead of IDLE, because
      #  just before HikariCP runs `SET SESSION search_path TO '${cloudapi.db.schema}'` which begins
      #  transaction. Thus, with that query as workaround, we force the transaction commit.
      connection-init-sql: SELECT 1
      data-source-properties:
        ApplicationName: Cloud API

  # Database migrations
  liquibase:
    change-log: classpath:db/changelog/db.changelog-master.xml
    default-schema: ${cloudapi.db.schema}
    contexts: default

  # Spring Data JPA
  jpa:
    database: POSTGRESQL
    show-sql: false
    open-in-view: false
    database-platform: com.silenteight.sep.base.common.support.hibernate.FixedPostgreSql95Dialect

    hibernate:
      ddl-auto: none
      use-new-id-generator-mappings: true

    properties:
      hibernate.cache.use_query_cache: false
      hibernate.connection.provider_disables_autocommit: true
      hibernate.generate_statistics: false
      hibernate.jdbc.lob.non_contextual_creation: true
      hibernate.jdbc.time_zone: UTC
      hibernate.temp.use_jdbc_metadata_defaults: false
      org.hibernate.envers.audit_table_suffix: _audit
      org.hibernate.envers.store_data_at_delete: true

  #-------------------------------------------------------------------------------------------------
  # MESSAGING
  #-------------------------------------------------------------------------------------------------
  rabbitmq:
    # addresses: ${cloudapi.rabbitmq.addresses}
    host: ${cloudapi.rabbitmq.host}
    port: ${cloudapi.rabbitmq.port}
    username: ${cloudapi.rabbitmq.user}
    password: ${cloudapi.rabbitmq.password}
    virtual-host: ${cloudapi.rabbitmq.vhost}
    listener:
      type: simple
      direct:
        consumers-per-queue: ${cloudapi.messaging.concurrency}
        prefetch: ${cloudapi.messaging.prefetch}
      simple:
        concurrency: 1
        max-concurrency: ${cloudapi.messaging.concurrency}
        prefetch: ${cloudapi.messaging.prefetch}

  jackson:
    default-property-inclusion: NON_NULL

info:
  env: ${cloudapi.env:local}

clear-sensitive-data:
  cron:
    expression: '0 0 */12 * * ?'


