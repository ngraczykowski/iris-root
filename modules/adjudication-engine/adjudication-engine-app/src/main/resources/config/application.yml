#---------------------------------------------------------------------------------------------------
# MESSAGING CONCURRENCY
#---------------------------------------------------------------------------------------------------
ae:
  messaging:
    concurrency: 4
    prefetch: 1

  # FIXME(ahaczewski): Rename to `comments.template-engine.cache-invalidation`.
  comments:
    template:
      cache:
        invalidation: "0 * * * * ?"

  categories:
    missing:
      batch-size:
        insert: 1024
        select: 4096

  comment-input:
    jdbc:
      missing-batch-size-select: 8192

  recommendation:
    jdbc:
      pending-alerts:
        fetch-size: 8192
    comment:
      template-name: alert

  analysis:
    agent-exchange:
      missing-match-feature-reader:
        chunk-size: 8192
        max-rows: 65536

    analysis:
      dataset-alerts-adder:
        chunk-size: 1024
        max-rows: 8192

    match-solution:
      unsolved-matches-reader:
        chunk-size: 1024
        max-rows: 8192

  grpc:
    client:
      category-service:
        timeout: 2m
      comment-input:
        timeout: 2m
      policy-steps:
        timeout: 5s
      alert-solving:
        timeout: 5s

#---------------------------------------------------------------------------------------------------
# SERVER
#---------------------------------------------------------------------------------------------------

# Embedded server configuration
server:
  forward-headers-strategy: native
  undertow:
    threads:
      io: ${ae.web.threads.io:4}
      worker: ${ae.web.threads.worker:16}

  error:
    include-exception: true
    include-stacktrace: never

#---------------------------------------------------------------------------------------------------
# MANAGEMENT
#---------------------------------------------------------------------------------------------------

# Management HTTP server
management:
  endpoint:
    health.show-details: always

  endpoints:
    web:
      base-path: /management
      exposure:
        include: [ "health", "info", "liquibase", "metrics", "prometheus", "loggers" ]
    loggers:
      sensitive: false

  metrics:
    tags:
      application: ${spring.application.name}

spring:
  #-------------------------------------------------------------------------------------------------
  # GENERAL
  #-------------------------------------------------------------------------------------------------
  application:
    name: ae

  aop:
    auto: false

  task:
    execution:
      pool:
        core-size: 8
        keep-alive: 10s
        max-size: 16
        queue-capacity: 10000
      thread-name-prefix: pool-task-

    scheduling:
      pool:
        size: 4
      thread-name-prefix: pool-scheduling-

  main:
    banner-mode: 'off'

  #-------------------------------------------------------------------------------------------------
  # CONSUL SERVICE DISCOVERY
  #-------------------------------------------------------------------------------------------------
  cloud:
    consul:
      config:
        enabled: false
      enabled: false

  #-------------------------------------------------------------------------------------------------
  # DATABASE
  #-------------------------------------------------------------------------------------------------
  datasource:
    # Postgres database
    type: com.zaxxer.hikari.HikariDataSource
    url: jdbc:postgresql://${ae.db.host}:${ae.db.port}/${ae.db.name}?currentSchema=${ae.db.schema:public}
    username: ${ae.db.username}
    password: ${ae.db.password}
    initialization-mode: never

    # Hikari pool configuration
    hikari:
      pool-name: Database-Pool
      minimum-idle: ${ae.db.connections.min:1}
      maximum-pool-size: ${ae.db.connections.max:10}
      auto-commit: false
      schema: ${ae.db.schema:public}
      isolate-internal-queries: true
      # NOTE(ahaczewski): Forces HikariCP to commit the transaction after opening fresh connection.
      #  Without it, the connection transaction is left in OPEN state instead of IDLE, because
      #  just before HikariCP runs `SET SESSION search_path TO '${ae.db.schema}'` which begins
      #  transaction. Thus, with that query as workaround, we force the transaction commit.
      # The statement sets session timeouts to 8 minutes and it's executed on each connection.
      connection-init-sql: |
        SET SESSION statement_timeout = 480000;
        SET SESSION lock_timeout = 480000;
        SET SESSION idle_in_transaction_session_timeout = 480000;
        SELECT 1;
      # In milliseconds, defaults to 10s, as the default for connect timeout is 10s.
      validation-timeout: ${ae.db.connections.validation-timeout:10000}
      # In milliseconds, defaults to 2min.
      idle-timeout: ${ae.db.connections.idle-timeout:120000}
      # In milliseconds, defaults to 8min, as the default for socket timeout is 10min.
      max-lifetime: ${ae.db.connections.max-lifetime:480000}
      # NOTE(ahaczewski): Postgres driver properties. For more information, see
      #  the org.postgresql.PGProperty enum.
      data-source-properties:
        assumeMinServerVersion: "10"
        ApplicationName: Adjudication Engine
        reWriteBatchedInserts: true
        # NOTE(ahaczewski): The timeouts for Postgres driver are in seconds.
        connectTimeout: ${ae.db.timeout.connect:10}
        loginTimeout: ${ae.db.timeout.login:10}
        cancelSignalTimeout: ${ae.db.timeout.cancel-signal:10}
        socketTimeout: ${ae.db.timeout.socket:600}

  # Database migrations
  liquibase:
    change-log: classpath:db/changelog/db.changelog-master.xml
    default-schema: ${ae.db.schema:public}
    contexts: default

  # Spring Data JPA
  jpa:
    database: POSTGRESQL
    show-sql: false
    open-in-view: false
    database-platform: com.silenteight.sep.base.common.support.hibernate.FixedPostgreSql95Dialect

    hibernate:
      ddl-auto: none
      use-new-id-generator-mappings: true

    properties:
      hibernate.cache.use_query_cache: false
      hibernate.connection.handling_mode: DELAYED_ACQUISITION_AND_HOLD
      hibernate.connection.provider_disables_autocommit: true
      hibernate.generate_statistics: false
      hibernate.id.optimizer.pooled.preferred: pooled-lo
      hibernate.jdbc.batch_size: 2048
      hibernate.jdbc.lob.non_contextual_creation: true
      hibernate.jdbc.use_get_generated_keys: true
      hibernate.jdbc.time_zone: UTC
      hibernate.temp.use_jdbc_metadata_defaults: false
      hibernate.order_inserts: true
      hibernate.order_updates: true
      #org.hibernate.flushMode: COMMIT
      org.hibernate.envers.audit_table_suffix: _audit
      org.hibernate.envers.store_data_at_delete: true

  #-------------------------------------------------------------------------------------------------
  # RABBITMQ
  #-------------------------------------------------------------------------------------------------
  rabbitmq:
    listener:
      type: simple
      direct:
        consumers-per-queue: ${ae.messaging.concurrency:4}
        prefetch: ${ae.messaging.prefetch:1}
        retry:
          enabled: true
          multiplier: 2
      simple:
        concurrency: 1
        max-concurrency: ${ae.messaging.concurrency:4}
        prefetch: ${ae.messaging.prefetch:1}
        retry:
          enabled: true
          multiplier: 2

  jackson:
    default-property-inclusion: NON_NULL

  webflux:
    base-path: /rest/${spring.application.name}

info:
  env: ${ae.env:local}
