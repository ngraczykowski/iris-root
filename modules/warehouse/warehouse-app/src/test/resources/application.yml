spring:
  application:
    name: warehouse
  batch:
    jdbc:
      initialize-schema: never
  rabbitmq:
    #   If multiple brokers required:
    #   host: <must be empty>
    #   addresses: host1:port1,host2:port2,...

    #   configuration for common-docker-infrastructure
    host: localhost
    port: 5672
    username: dev
    password: dev
    virtual-host: /
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:8080/auth/realms/Dev

warehouse:
  persistence:
    alert:
      labels:
      recommendation-date-field: "recommendationDate"
  messaging:
    broker:
      analysis-expired-indexing:
        queue-name: wh.retention.analysis-expired
        routing-key: command.analysis-expired
      alert-production-indexing:
        queue-name: wh.index-request.production
        routing-key: command.index-request.production
      qa-indexing:
        queue-name: wh.qa-index-request
        routing-key: event.qa-alert
      alert-simulation-indexing:
        queue-name: wh.index-request.simulation
        routing-key: command.index-request.simulation
      personal-information-expired-indexing:
        queue-name: wh.retention.personal-information-expired
        routing-key: retention.personal-information-expired
      alerts-expired-indexing:
        queue-name: wh.retention.alerts-expired
        routing-key: retention.alerts-expired
      to-remove:
        bindings: []
  indexer:
    analysis-expired-indexing-inbound:
      queue-name: ${warehouse.messaging.broker.alert-production-indexing.queue-name}
    production-indexing-inbound:
      queue-name: ${warehouse.messaging.broker.alert-production-indexing.queue-name}
    production-indexed-outbound:
      exchange-name: wh.event
      routing-key: event.index-response.production
    simulation-indexing-inbound:
      queue-name: ${warehouse.messaging.broker.alert-simulation-indexing.queue-name}
    simulation-indexed-outbound:
      exchange-name: wh.event
      routing-key: event.index-response.simulation
    personal-information-expired-indexing-inbound:
      queue-name: ${warehouse.messaging.broker.analysis-expired-indexing.queue-name.queue-name}
    alerts-expired-indexing-inbound:
      queue-name: ${warehouse.messaging.broker.alerts-expired-indexing.queue-name}
  report:
    default-bucket: reports
    copy-csv-pattern: "COPY ( %s ) TO STDOUT WITH (FORMAT CSV, HEADER)"
  db:
    host: localhost
    port: 5432
    name: iris
    username: iris
    password: iris
sep.filestorage:
  minio:
    url: http://localhost:9000
    access-key: admin
    private-key: admin123
    region: s3-test-region

warehouse.report.statistics:
  all-alerts-query:
    SELECT count(*)
    FROM warehouse_simulation_alert
    WHERE analysis_name = ?
  solved-alerts-query:
    SELECT count(*)
    FROM warehouse_simulation_alert
    WHERE analysis_name = ?
    AND (payload ->> 'recommendation_recommended_action')
    IN ('ACTION_FALSE_POSITIVE', 'ACTION_POTENTIAL_TRUE_POSITIVE')
  ai-false-positive-query:
    SELECT count(*)
    FROM warehouse_simulation_alert wsa
    JOIN warehouse_alert wa ON wsa.name = wa.name
    WHERE wsa.analysis_name = ?
    AND (wa.payload ->> 'DN_CASE.currentState') IN ('Level 1 Review', 'Level 2 Review')
    AND (wsa.payload ->> 'recommendation_recommended_action') = 'ACTION_FALSE_POSITIVE'
  analyst-false-positive-query:
    SELECT count(*)
    FROM warehouse_simulation_alert wsa
    JOIN warehouse_alert wa ON wsa.name = wa.name
    WHERE wsa.analysis_name = ?
    AND (wa.payload ->> 'DN_CASE.currentState') = 'Level 1 Review'
    AND (wsa.payload ->> 'recommendation_recommended_action') = 'ACTION_FALSE_POSITIVE'
  false-positive-alerts-query:
    SELECT count(*)
    FROM warehouse_simulation_alert
    WHERE analysis_name = ?
    AND (payload ->> 'recommendation_recommended_action') = 'ACTION_FALSE_POSITIVE'
  potential-true-positive-alerts-query:
    SELECT count(*)
    FROM warehouse_simulation_alert
    WHERE analysis_name = ?
    AND (payload ->> 'recommendation_recommended_action') = 'ACTION_POTENTIAL_TRUE_POSITIVE'
  manual-investigation-alerts-query:
    SELECT count(*)
    FROM warehouse_simulation_alert
    WHERE analysis_name = ?
    AND (payload ->> 'recommendation_recommended_action') NOT IN ('ACTION_POTENTIAL_TRUE_POSITIVE','ACTION_FALSE_POSITIVE','')
