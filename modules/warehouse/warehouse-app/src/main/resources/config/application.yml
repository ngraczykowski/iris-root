#---------------------------------------------------------------------------------------------------
# SERVER
#---------------------------------------------------------------------------------------------------

server:
  forward-headers-strategy: native
  undertow:
    threads:
      io: 4
      worker: 16

  servlet:
    context-path: /rest/${spring.application.name}

  error:
    include-exception: true
    include-stacktrace: never

#---------------------------------------------------------------------------------------------------
# MANAGEMENT
#---------------------------------------------------------------------------------------------------

management:
  endpoint:
    health.show-details: always

  endpoints:
    web:
      base-path: /management
      exposure:
        include: [ "health", "info", "metrics", "prometheus", "loggers" ]
    # loggers endpoint is secured with mTLS
    loggers:
      sensitive: false

  metrics:
    tags:
      application: ${spring.application.name}

warehouse:
  statistics:
    daily:
      scheduled-cron: "0 0 1 * * *"
      recalculation-period: 20
      bucket-size: 2
      recommendation-enabled: false
  web:
    cors:
      allowed-origins-patterns: "*"
      allowed-methods: "*"
      allowed-headers: "*"
      exposed-headers: "Authorization,Link,X-Total-Count"
      allow-credentials: true
      max-age: 1800
  messaging:
    concurrency: 1
    prefetch: 1
    broker:
      alert-production-indexing:
        queue-name: wh.index-request.production
        routing-key: command.index-request.production
      qa-indexing:
        queue-name: wh.qa-index-request
        routing-key: event.qa-alert
      alert-simulation-indexing:
        queue-name: wh.index-request.simulation
        routing-key: command.index-request.simulation
      personal-information-expired-indexing:
        queue-name: wh.retention.personal-information-expired
        routing-key: retention.personal-information-expired
      analysis-expired-indexing:
        queue-name: wh.retention.analysis-expired
        routing-key: command.analysis-expired
      alerts-expired-indexing:
        queue-name: wh.retention.alerts-expired
        routing-key: retention.alerts-expired
      to-remove:
        bindings:
          - queue-name: wh.index-request.backup
            exchange: bridge.command
            routing-key: command.index-request.production
          - queue-name: wh.index-request.backup
            exchange: gov.event
            routing-key: event.qa-alert
  alert:
    migration:
      enabled: true
      batch-size: 20
  country:
    migration:
      enabled: true
  partition:
    scheduledCron: "0 */10 * * * *"
    size: 1500000
  indexer:
    production-batch-size: 200
    simulation-batch-size: 200
    qa-batch-size: 200
    production-indexing-inbound:
      queue-name: ${warehouse.messaging.broker.alert-production-indexing.queue-name}
    production-indexed-outbound:
      exchange-name: wh.event
      routing-key: event.index-response.production
    simulation-indexing-inbound:
      queue-name: ${warehouse.messaging.broker.alert-simulation-indexing.queue-name}
    simulation-indexed-outbound:
      exchange-name: wh.event
      routing-key: event.index-response.simulation
    personal-information-expired-indexing-inbound:
      queue-name: ${warehouse.messaging.broker.personal-information-expired-indexing.queue-name}
    analysis-expired-indexing-inbound:
      queue-name: ${warehouse.messaging.broker.analysis-expired-indexing.queue-name}
    alerts-expired-indexing-inbound:
      queue-name: ${warehouse.messaging.broker.alerts-expired-indexing.queue-name}
    qa-indexing-inbound:
      queue-name: ${warehouse.messaging.broker.qa-indexing.queue-name}
  report:
    default-bucket: reports
    removal:
      cron: "0 0 1 * * ?"
      duration-time: P1D
    file-name:
      # Available patterns: [reportType], [from], [to], [timestamp], [extension]
      production-pattern: "[reportType]_Prod_[from]_To_[to].[extension]"
      # Available patterns: [reportType], [analysisId], [timestamp], [extension]
      simulation-pattern: "[reportType]_Sim_[analysisId].[extension]"
    copy-csv-pattern: "COPY ( %s ) TO STDOUT WITH (FORMAT CSV, HEADER)"
    zip:
      enabled: true
      rowsLimit: 100000
  retention:
    simulation:
      analysis-expired:
        fields-to-erase: []
    alert:
      batch-size: 1000
  task:
    async:
      execution:
        pool:
          core-size: 4
          max-size: 16
          queue-capacity: 50
          thread-name-prefix: async-auth-aware-
spring:
  #-------------------------------------------------------------------------------------------------
  # GENERAL
  #-------------------------------------------------------------------------------------------------
  aop:
    auto: false
  task:
    execution:
      pool:
        core-size: 8
        keep-alive: 10s
        max-size: 16
        queue-capacity: 10000
      thread-name-prefix: pool-task-

    scheduling:
      pool:
        size: 2
      thread-name-prefix: pool-scheduling-

  main:
    banner-mode: 'off'

  #-------------------------------------------------------------------------------------------------
  # MESSAGING
  #-------------------------------------------------------------------------------------------------
  rabbitmq:
    ssl:
      enabled: false
    listener:
      type: simple
      direct:
        consumers-per-queue: ${warehouse.messaging.concurrency}
        prefetch: ${warehouse.messaging.prefetch}
      simple:
        concurrency: 1
        max-concurrency: ${warehouse.messaging.concurrency}
        prefetch: ${warehouse.messaging.prefetch}


  #-------------------------------------------------------------------------------------------------
  # DATABASE
  #-------------------------------------------------------------------------------------------------
  datasource:
    # Postgres database
    type: com.zaxxer.hikari.HikariDataSource
    url: jdbc:postgresql://${warehouse.db.host}:${warehouse.db.port}/${warehouse.db.name}?currentSchema=${warehouse.db.schema:public}
    username: ${warehouse.db.username}
    password: ${warehouse.db.password}
    initialization-mode: never

    # Hikari pool configuration
    hikari:
      pool-name: Database-Pool
      minimum-idle: ${warehouse.db.connections.min:1}
      maximum-pool-size: ${warehouse.db.connections.max:10}
      auto-commit: false
      schema: ${warehouse.db.schema:public}
      isolate-internal-queries: true
      # NOTE(ahaczewski): Forces HikariCP to commit the transaction after opening fresh connection.
      #  Without it, the connection transaction is left in OPEN state instead of IDLE, because
      #  just before HikariCP runs `SET SESSION search_path TO '${ae.db.schema}'` which begins
      #  transaction. Thus, with that query as workaround, we force the transaction commit.
      connection-init-sql: SELECT 1
      data-source-properties:
        ApplicationName: Warehouse

  # Database migrations
  liquibase:
    change-log: classpath:db/changelog/db.changelog-master.xml
    default-schema: ${warehouse.db.schema:public}
    contexts: default

  # Spring Data JPA
  jpa:
    database: POSTGRESQL
    show-sql: false
    open-in-view: false
    database-platform: com.silenteight.sep.base.common.support.hibernate.FixedPostgreSql95Dialect

    hibernate:
      ddl-auto: none
      use-new-id-generator-mappings: true

    properties:
      hibernate.cache.use_query_cache: false
      hibernate.connection.provider_disables_autocommit: true
      hibernate.generate_statistics: false
      hibernate.jdbc.lob.non_contextual_creation: true
      hibernate.jdbc.time_zone: UTC
      hibernate.temp.use_jdbc_metadata_defaults: false
      hibernate.jdbc.batch_size: 1000
      hibernate.order_inserts: true
      hibernate.order_updates: true
      org.hibernate.envers.audit_table_suffix: _audit
      org.hibernate.envers.store_data_at_delete: true

  #---------------------------------------------------------------------------------------------------
  # CONSUL
  #----------------------------------------------------------------------------------------------------

  cloud:
    discovery:
      enabled: false
    consul:
      enabled: false
    config:
      enabled: false
    service-registry:
      auto-registration:
        enabled: false

#---------------------------------------------------------------------------------------------------
# SEP BASE CONFIGURATION
#---------------------------------------------------------------------------------------------------

serp:
  show-env: true

  messaging:
    error-queue:
      enabled: true


#-------------------------------------------------------------------------------------------------
# REST API AUTH
#-------------------------------------------------------------------------------------------------

sep:
  auth:
    permit-all-urls:
      - "/management/**"
    permissionMethodsMappings:
      DOWNLOAD_SIMULATION_REPORTS:
        - "DOWNLOAD_SIMULATION_REPORT"
        - "GET_SIMULATION_TENANT"
        - "CREATE_SIMULATION_REPORT"
      DOWNLOAD_SOLVING_REPORTS:
        - "DOWNLOAD_PRODUCTION_ON_DEMAND_REPORT"
        - "LIST_PRODUCTION_ON_DEMAND_REPORTS"
        - "CREATE_PRODUCTION_ON_DEMAND_REPORT"
      VIEW_USERS:
        - "GET_COUNTRY_GROUP"
        - "LIST_COUNTRY_GROUP"
        - "GET_COUNTRIES"
      MANAGE_USERS:
        - "CREATE_COUNTRY_GROUP"
        - "UPDATE_COUNTRY_GROUP"
        - "UPDATE_COUNTRIES"
        - "DELETE_COUNTRY_GROUP"
      VIEW_QA_ALERTS:
        - "VIEW_ALERTS_DATA"
      MANAGE_QA_ALERT:
        - "VIEW_ALERTS_DATA"
      VIEW_QA_VERIFICATION:
        - "VIEW_ALERTS_DATA"
      MANAGE_QA_VERIFICATION:
        - "VIEW_ALERTS_DATA"
      DASHBOARD:
        - "VIEW_ALERTS_DATA"
      VIEW_SIMULATION_RESULT:
        - "LIST_SIMULATION_REPORTS"
      STATISTICS:
        - "RECOMMENDATION_STATISTICS"

    rolePermissionsMappings:
      USER_ADMINISTRATOR:
        - "DOWNLOAD_AUDIT_REPORTS"
        - "DOWNLOAD_USERS_REPORTS"
        - "MANAGE_USERS"
        - "VIEW_USERS"
        - "STATISTICS"
      MODEL_TUNER:
        - "VIEW_SIMULATION_RESULT"
        - "DOWNLOAD_SIMULATION_REPORTS"
        - "DOWNLOAD_SOLVING_REPORTS"
        - "DASHBOARD"
        - "STATISTICS"
      APPROVER:
        - "VIEW_SIMULATION_RESULT"
        - "DOWNLOAD_SIMULATION_REPORTS"
        - "DOWNLOAD_SOLVING_REPORTS"
        - "DASHBOARD"
      AUDITOR:
        - "VIEW_SIMULATION_RESULT"
        - "VIEW_QA_ALERTS"
        - "DASHBOARD"
        - "STATISTICS"
      QA:
        - "VIEW_QA_ALERTS"
        - "MANAGE_QA_ALERT"
        - "VIEW_QA_VERIFICATION"
        - "DASHBOARD"
      QA_ISSUE_MANAGER:
        - "VIEW_QA_VERIFICATION"
        - "MANAGE_QA_VERIFICATION"
        - "DASHBOARD"

sentry:
  environment: unknown
  traces-sample-rate: 0
