#---------------------------------------------------------------------------------------------------
# SERVER
#---------------------------------------------------------------------------------------------------

server:
  forward-headers-strategy: native
  undertow:
    threads:
      io: 4
      worker: 16

  servlet:
    context-path: /rest/${spring.application.name}

  error:
    include-exception: true
    include-stacktrace: never

#---------------------------------------------------------------------------------------------------
# MANAGEMENT
#---------------------------------------------------------------------------------------------------

management:
  endpoint:
    health.show-details: always

  endpoints:
    web:
      base-path: /management
      exposure:
        include: [ "health", "info", "metrics", "prometheus", "loggers" ]
    # loggers endpoint is secured with mTLS
    loggers:
      sensitive: false

  metrics:
    tags:
      application: ${spring.application.name}

warehouse:
  messaging:
    concurrency: 4
    prefetch: 25
  kibana:
    timezone: Europe/Warsaw
  report:
    default-bucket: reports
    synchronization:
      production-tenant: ${warehouse.indexing.environment-prefix}_production_periodic
      cron: "0 */1 * * * ?"
    simulation:
      master-tenant: ${warehouse.indexing.environment-prefix}_simulation_master
      polling-interval-ms: 500
      polling-max-attempt-count: 10
  tenant:
    max-object-count: 100

spring:
  #-------------------------------------------------------------------------------------------------
  # GENERAL
  #-------------------------------------------------------------------------------------------------
  aop:
    auto: false

  task:
    execution:
      pool:
        core-size: 8
        keep-alive: 10s
        max-size: 16
        queue-capacity: 10000
      thread-name-prefix: pool-task-

    scheduling:
      pool:
        size: 2
      thread-name-prefix: pool-scheduling-

  main:
    banner-mode: 'off'

  #-------------------------------------------------------------------------------------------------
  # MESSAGING
  #-------------------------------------------------------------------------------------------------
  rabbitmq:
    ssl:
      enabled: false
    listener:
      type: simple
      direct:
        consumers-per-queue: ${warehouse.messaging.concurrency}
        prefetch: ${warehouse.messaging.prefetch}
      simple:
        concurrency: 1
        max-concurrency: ${warehouse.messaging.concurrency}
        prefetch: ${warehouse.messaging.prefetch}


  #-------------------------------------------------------------------------------------------------
  # DATABASE
  #-------------------------------------------------------------------------------------------------
  datasource:
    # Postgres database
    type: com.zaxxer.hikari.HikariDataSource
    url: jdbc:postgresql://${warehouse.db.host}:${warehouse.db.port}/${warehouse.db.name}?currentSchema=${warehouse.db.schema:public}
    username: ${warehouse.db.username}
    password: ${warehouse.db.password}
    initialization-mode: never

    # Hikari pool configuration
    hikari:
      pool-name: Database-Pool
      minimum-idle: ${warehouse.db.connections.min:1}
      maximum-pool-size: ${warehouse.db.connections.max:10}
      auto-commit: false
      schema: ${warehouse.db.schema:public}
      isolate-internal-queries: true
      # NOTE(ahaczewski): Forces HikariCP to commit the transaction after opening fresh connection.
      #  Without it, the connection transaction is left in OPEN state instead of IDLE, because
      #  just before HikariCP runs `SET SESSION search_path TO '${ae.db.schema}'` which begins
      #  transaction. Thus, with that query as workaround, we force the transaction commit.
      connection-init-sql: SELECT 1
      data-source-properties:
        ApplicationName: Warehouse

  # Database migrations
  liquibase:
    change-log: classpath:db/changelog/db.changelog-master.xml
    default-schema: ${warehouse.db.schema:public}
    contexts: default

  # Spring Data JPA
  jpa:
    database: POSTGRESQL
    show-sql: false
    open-in-view: false
    database-platform: com.silenteight.sep.base.common.support.hibernate.FixedPostgreSql95Dialect

    hibernate:
      ddl-auto: none
      use-new-id-generator-mappings: true

    properties:
      hibernate.cache.use_query_cache: false
      hibernate.connection.provider_disables_autocommit: true
      hibernate.generate_statistics: false
      hibernate.jdbc.lob.non_contextual_creation: true
      hibernate.jdbc.time_zone: UTC
      hibernate.temp.use_jdbc_metadata_defaults: false
      org.hibernate.envers.audit_table_suffix: _audit
      org.hibernate.envers.store_data_at_delete: true

#---------------------------------------------------------------------------------------------------
# SEP BASE CONFIGURATION
#---------------------------------------------------------------------------------------------------

serp:
  show-env: true

  messaging:
    error-queue:
      enabled: true


#-------------------------------------------------------------------------------------------------
# REST API AUTH
#-------------------------------------------------------------------------------------------------

sep:
  auth:
    permissionMethodsMappings:
      PRODUCTION_ON_DEMAND_REPORTS:
        - "LIST_PRODUCTION_ON_DEMAND_REPORTS"

      SIMULATION_REPORTS:
        - "LIST_SIMULATION_REPORTS"
        - "GET_SIMULATION_TENANT"

    rolePermissionsMappings:
      BUSINESS_OPERATOR:
        - "PRODUCTION_ON_DEMAND_REPORTS"
        - "SIMULATION_REPORTS"