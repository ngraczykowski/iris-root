spring:
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: https://auth.silent8.cloud/realms/sens-webapp

warehouse:
  common:
    recommendation:
      values:
        ACTION_POTENTIAL_TRUE_POSITIVE: [ "ACTION_POTENTIAL_TRUE_POSITIVE" ]
        ACTION_FALSE_POSITIVE: [ "ACTION_FALSE_POSITIVE", "ACTION_INVESTIGATE_PARTIALLY_FALSE_POSITIVE" ]
        ACTION_MANUAL_INVESTIGATION: [ "ACTION_MANUAL_INVESTIGATION", "MANUAL_INVESTIGATION","ACTION_INVESTIGATE" ]
      field-name: "s8_recommendation"
    analyst-decision:
      values:
        TRUE_POSITIVE: ["analyst_decision_true_positive"]
        FALSE_POSITIVE: ["analyst_decision_false_positive"]
      field-name: "analyst_decision"
  statistics:
    daily:
      recommendation-enabled: true
  country:
    migration:
      enabled: false
  alert:
    migration:
      enabled: false
  alert-level-security:
    enabled: true
  persistence:
    alert:
      labels:
        - "s8_lobCountryCode"
      recommendation-date-field: "recommendationDate"

  minio:
    url: https://minio.silenteight.com
  retention:
    alert:
      batch-size: 1000
    simulation:
      analysis-expired:
        fields-to-erase:
          - 'alert_comment'
          - 'alert_lastCaseComment'
  sampling:
    filters:
      - name: alert_s8_recommendation
        values: ACTION_FALSE_POSITIVE
  task:
    async:
      execution:
        pool:
          core-size: 4
          max-size: 16
          queue-capacity: 50
          thread-name-prefix: async-auth-aware-

warehouse.report.zip:
  enabled: false

warehouse.report.statistics:
  all-alerts-query:
    SELECT count(*)
    FROM warehouse_simulation_alert
    WHERE analysis_name = ?
  solved-alerts-query:
    SELECT count(*)
    FROM warehouse_simulation_alert
    WHERE analysis_name = ?
    AND (payload ->> 'recommendation_recommended_action')
    IN ('ACTION_FALSE_POSITIVE', 'ACTION_POTENTIAL_TRUE_POSITIVE')
  ai-false-positive-query:
    SELECT count(*)
    FROM warehouse_simulation_alert wsa
    JOIN warehouse_alert wa ON wsa.name = wa.name
    WHERE wsa.analysis_name = ?
    AND (wa.payload ->> 'analyst_decision') IN ('analyst_decision_false_positive', 'analyst_decision_true_positive')
    AND (wsa.payload ->> 'recommendation_recommended_action') = 'ACTION_FALSE_POSITIVE'
  analyst-false-positive-query:
    SELECT count(*)
    FROM warehouse_simulation_alert wsa
    JOIN warehouse_alert wa ON wsa.name = wa.name
    WHERE wsa.analysis_name = ?
    AND (wa.payload ->> 'analyst_decision') = 'analyst_decision_false_positive'
    AND (wsa.payload ->> 'recommendation_recommended_action') = 'ACTION_FALSE_POSITIVE'
  false-positive-alerts-query:
    SELECT count(*)
    FROM warehouse_simulation_alert
    WHERE analysis_name = ?
    AND (payload ->> 'recommendation_recommended_action') = 'ACTION_FALSE_POSITIVE'
  potential-true-positive-alerts-query:
    SELECT count(*)
    FROM warehouse_simulation_alert
    WHERE analysis_name = ?
    AND (payload ->> 'recommendation_recommended_action') = 'ACTION_POTENTIAL_TRUE_POSITIVE'
  manual-investigation-alerts-query:
    SELECT count(*)
    FROM warehouse_simulation_alert
    WHERE analysis_name = ?
    AND (payload ->> 'recommendation_recommended_action') NOT IN ('ACTION_POTENTIAL_TRUE_POSITIVE','ACTION_FALSE_POSITIVE','')

warehouse.reports.v2:
  reports:
    - name: AI_REASONING
      type: production
      description: AI Reasoning
      selectSqlQuery: >
        SELECT (payload ->> 'fvSignature')            AS "Reasoning Branch ID",
               (payload ->> 'policy')                 AS "Policy ID",
               (payload ->> 'policy_title')           AS "Policy Name",
               (payload ->> 'step')                   AS "Step ID",
               (payload ->> 'step_title')             AS "Step Name",
               (payload ->> 's8_recommendation')      AS "S8 Alert Resolution",
               (payload ->> 'recommendationDate')     AS "S8 Alert Resolution Timestamp",
               (payload ->> 'recommendation')         AS "Client Alert Resolution",
               (payload ->> 'comment')                AS "S8 Alert Comment",
               (payload ->> 's8_lobCountryCode')      AS "Country LoB",
               (payload ->> 'categories/hitType')     AS "Risk Type",
               (payload ->> 'extendedAttribute5')     AS "List Type",
               (COALESCE(
                           payload ->> 'clientId',
                           payload ->> 'DN_CASE.ID')) AS "Client Alert ID",
               (payload ->> 'status')                 AS "Alert Status",
               discriminator                          AS "S8 Alert ID",
               (payload ->> 'bulkIdSolving')          AS "Solving Batch ID"
        FROM warehouse_alert
        WHERE recommendation_date BETWEEN TIMESTAMP '${from}' AND TIMESTAMP '${to}'
          AND (payload ->> 's8_lobCountryCode') IN (${countries})
    - name: AI_REASONING
      type: simulation
      description: AI Reasoning
      selectSqlQuery: >
        SELECT (wsm.payload ->> 'match_reason:feature_vector_signature')   AS "Reasoning Branch ID",
               (wsm.payload ->> 'match_reason:policy')                     AS "Policy ID",
               (wsm.payload ->> 'match_reason:policy_title')               AS "Policy Name",
               (wsm.payload ->> 'match_reason:step')                       AS "Step ID",
               (wsm.payload ->> 'match_reason:step_title')                 AS "Step Name",
               (wsa.payload ->> 'recommendation_recommended_action')       AS "S8 Alert Resolution",
               (wsa.payload ->> 'recommendation_create_time')              AS "S8 Alert Resolution Timestamp",
               (wsa.payload ->> 'recommendation_comment')                  AS "S8 Alert Comment",
               (wa.payload ->> 's8_lobCountryCode')                        AS "Country LoB",
               (wsm.payload ->> 'categories/hitType:value')                AS "Risk Type",
               (wa.payload ->> 'extendedAttribute5')                       AS "List Type",
               (coalesce(
                  wa.payload ->> 'clientId',
                  wa.payload ->> 'DN_CASE.ID'))                            AS "Client Alert ID",
               (wa.payload ->> 'status')                                   AS "Alert Status",
               wa.discriminator                                            AS "S8 Alert ID"
        FROM warehouse_simulation_alert wsa
          JOIN warehouse_alert wa ON wsa.name = wa.name
          JOIN warehouse_simulation_match wsm ON wsm.alert_name = wsa.name
        WHERE wsa.analysis_name = 'analysis/${analysisId}'
          AND wsm.analysis_name = 'analysis/${analysisId}'
          AND (wa.payload ->> 's8_lobCountryCode') IN (${countries})
    - name: ACCURACY
      type: production
      description: Accuracy
      selectSqlQuery: >
        SELECT (payload ->> 'fvSignature')                            AS "Reasoning Branch ID",
               (payload ->> 'policy')                                 AS "Policy ID",
               (payload ->> 'policy_title')                           AS "Policy Name",
               (payload ->> 'step')                                   AS "Step ID",
               (payload ->> 'step_title')                             AS "Step Name",
               (payload ->> 's8_recommendation')                      AS "S8 Alert Resolution",
               (payload ->> 'recommendationDate')                     AS "S8 Alert Resolution Timestamp",
               (payload ->> 'recommendation')                         AS "Client Alert Resolution",
               (payload ->> 'comment')                                AS "S8 Alert Comment",
               (payload ->> 's8_lobCountryCode')                      AS "Country LoB",
               (payload ->> 'categories/hitType')                     AS "Risk Type",
               (payload ->> 'extendedAttribute5')                     AS "List Type",
               (payload ->> 'analyst_decision')                       AS "Analyst Decision",
               (payload ->> 'DN_CASE.modifiedDateTime')               AS "Analyst Decision Timestamp",
               (payload ->> 'lastCaseComment')                        AS "Analyst Comment",
               (COALESCE(
                           payload ->> 'clientId',
                           payload ->> 'DN_CASE.ID'))                 AS "Client Alert ID",
               (payload ->> 'status')                                 AS "Alert Status",
               discriminator                                          AS "S8 Alert ID",
               (payload ->> 'bulkId')                                 AS "Learning Batch ID"
        FROM warehouse_alert
        WHERE (recommendation_date BETWEEN TIMESTAMP '${from}' AND TIMESTAMP '${to}')
          AND (payload ->> 's8_lobCountryCode') IN (${countries})
          AND (payload ->> 'analyst_decision') IN
              ('analyst_decision_false_positive', 'analyst_decision_true_positive')
    - name: ACCURACY
      type: simulation
      description: Accuracy
      selectSqlQuery: >
        SELECT (wsm.payload ->> 'match_reason:feature_vector_signature')    AS "Reasoning Branch ID",
             (wsm.payload ->> 'match_reason:policy')                        AS "Policy ID",
             (wsm.payload ->> 'match_reason:policy_title')                  AS "Policy Name",
             (wsm.payload ->> 'match_reason:step')                          AS "Step ID",
             (wsm.payload ->> 'match_reason:step_title')                    AS "Step Name",
             (wsa.payload ->> 'recommendation_recommended_action')          AS "S8 Alert Resolution",
             (wsa.payload ->> 'recommendation_create_time')                 AS "S8 Alert Resolution Timestamp",
             (wsa.payload ->> 'recommendation_comment')                     AS "S8 Alert Comment",
             (wa.payload ->> 's8_lobCountryCode')                           AS "Country LoB",
             (wsm.payload ->> 'categories/hitType:value')                   AS "Risk Type",
             (wa.payload ->> 'extendedAttribute5')                          AS "List Type",
             (wa.payload ->> 'analyst_decision')                            AS "Analyst Decision",
             (wa.payload ->> 'DN_CASE.modifiedDateTime')                    AS "Analyst Decision Timestamp",
             (wa.payload ->> 'lastCaseComment')                             AS "Analyst Comment",
             (coalesce(
                wa.payload ->> 'clientId',
                wa.payload ->> 'DN_CASE.ID'))                               AS "Client Alert ID",
             (wa.payload ->> 'status')                                      AS "Alert Status",
             wa.discriminator                                               AS "S8 Alert ID"
        FROM warehouse_simulation_alert wsa
          JOIN warehouse_alert wa ON wsa.name = wa.name
          JOIN warehouse_simulation_match wsm ON wsm.alert_name = wsa.name
        WHERE wsa.analysis_name = 'analysis/${analysisId}'
        AND wsm.analysis_name = 'analysis/${analysisId}'
        AND (wa.payload ->> 's8_lobCountryCode') IN (${countries})
        AND (wa.payload ->> 'analyst_decision') IN ('analyst_decision_false_positive', 'analyst_decision_true_positive')
    - name: DAD
      type: production
      description: Data Availability Diagnostic (DAD)
      selectSqlQuery: > # NOTE(wszabelski): When adding/removing/changing feature/category to DAD report in select, remember to add/remove/change that also in WHERE condition
        SELECT wa.payload ->> 'policyId'                                 AS "Policy ID",
               wa.payload ->> 'policy_title'                             AS "Policy Name",
               wa.payload ->> 'stepId'                                   AS "Step ID",
               wa.payload ->> 'step_title'                               AS "Step Name",
               wa.payload ->> 'fvSignature'                              AS "Reasoning Branch ID",
               wa.payload ->> 's8_recommendation'                        AS "S8 Alert Resolution",
               wa.payload ->> 'recommendationDate'                       AS "S8 Alert Resolution Timestamp",
               wa.payload ->> 'recommendation'                           AS "Client Alert Resolution",
               wa.payload ->> 'comment'                                  AS "S8 Alert Comment",
               wa.payload ->> 's8_lobCountryCode'                        AS "Country LoB",
               wa.payload ->> 'categories/customerType'                  AS "Customer Type",
               wa.payload ->> 'categories/hitType'                       AS "Risk Type",
               wa.payload ->> 'features/name:solution'                   AS "Name",
               wa.payload ->> 'features/dateOfBirth:solution'            AS "Date of Birth / Incorporation",
               wa.payload ->> 'features/isPep:solution'                  AS "PEP",
               wa.payload ->> 'features/gender:solution'                 AS "Gender",
               wa.payload ->> 'features/geoPlaceOfBirth:solution'        AS "Geo Place of Birth",
               wa.payload ->> 'features/geoResidencies:solution'         AS "Geo Residencies",
               wa.payload ->> 'features/nationalIdDocument:solution'     AS "National ID",
               wa.payload ->> 'features/otherDocument:solution'          AS "Other Document",
               wa.payload ->> 'features/passportNumberDocument:solution' AS "Passport Number Document",
               wa.payload ->> 'features/incorporationCountry:solution'   AS "Incorporation Country",
               wa.payload ->> 'features/nationalityCountry:solution'     AS "Nationality Country",
               wa.payload ->> 'features/otherCountry:solution'           AS "Other Country",
               wa.payload ->> 'features/registrationCountry:solution'    AS "Registration Country",
               wa.payload ->> 'features/residencyCountry:solution'       AS "Residency Country",
               wa.payload ->> 'features/commonAp:solution'               AS "Common Alerted Party",
               wa.payload ->> 'features/commonMp:solution'               AS "Common Watchlist Party",
               wa.payload ->> 'features/commonNames:solution'            AS "Common Name",
               wa.payload ->> 'features/invalidAlert:solution'           AS "Invalid Alert",
               wa.payload ->> 'features/isApTpMarked:solution'           AS "True Case - Alerted Party",
               wa.payload ->> 'features/isTpMarked:solution'             AS "True Case - Watchlist",
               wa.payload ->> 'features/isCaseTpMarked:solution'         AS "True Case - Historical",
               wa.payload ->> 'features/logicalDiscountingDob:solution'  AS "Logical Discounting",
               wa.payload ->> 'DN_CASE.ID'                               AS "Client Alert ID",
               wa.payload ->> 'status'                                   AS "Alert Status",
               wa.discriminator                                          AS "S8 Alert ID"
        FROM warehouse_alert wa
        WHERE (wa.payload -> 'categories/customerType' @> '"NO_DATA"' OR
               wa.payload -> 'categories/customerType' @> '"DATA_SOURCE_ERROR"' OR
               wa.payload -> 'categories/hitType' @> '"NO_DATA"' OR
               wa.payload -> 'categories/hitType' @> '"DATA_SOURCE_ERROR"' OR
               wa.payload -> 'features/name:solution' @> '"NO_DATA"' OR
               wa.payload -> 'features/name:solution' @> '"DATA_SOURCE_ERROR"' OR
               wa.payload -> 'features/dateOfBirth:solution' @> '"NO_DATA"' OR
               wa.payload -> 'features/dateOfBirth:solution' @> '"DATA_SOURCE_ERROR"' OR
               wa.payload -> 'features/isPep:solution' @> '"NO_DATA"' OR
               wa.payload -> 'features/isPep:solution' @> '"DATA_SOURCE_ERROR"' OR
               wa.payload -> 'features/gender:solution' @> '"NO_DATA"' OR
               wa.payload -> 'features/gender:solution' @> '"DATA_SOURCE_ERROR"' OR
               wa.payload -> 'features/geoPlaceOfBirth:solution' @> '"NO_DATA"' OR
               wa.payload -> 'features/geoPlaceOfBirth:solution' @> '"DATA_SOURCE_ERROR"' OR
               wa.payload -> 'features/geoResidencies:solution' @> '"NO_DATA"' OR
               wa.payload -> 'features/geoResidencies:solution' @> '"DATA_SOURCE_ERROR"' OR
               wa.payload -> 'features/nationalIdDocument:solution' @> '"NO_DATA"' OR
               wa.payload -> 'features/nationalIdDocument:solution' @> '"DATA_SOURCE_ERROR"' OR
               wa.payload -> 'features/otherDocument:solution' @> '"NO_DATA"' OR
               wa.payload -> 'features/otherDocument:solution' @> '"DATA_SOURCE_ERROR"' OR
               wa.payload -> 'features/passportNumberDocument:solution' @> '"NO_DATA"' OR
               wa.payload -> 'features/passportNumberDocument:solution' @> '"DATA_SOURCE_ERROR"' OR
               wa.payload -> 'features/incorporationCountry:solution' @> '"NO_DATA"' OR
               wa.payload -> 'features/incorporationCountry:solution' @> '"DATA_SOURCE_ERROR"' OR
               wa.payload -> 'features/nationalityCountry:solution' @> '"NO_DATA"' OR
               wa.payload -> 'features/nationalityCountry:solution' @> '"DATA_SOURCE_ERROR"' OR
               wa.payload -> 'features/otherCountry:solution' @> '"NO_DATA"' OR
               wa.payload -> 'features/otherCountry:solution' @> '"DATA_SOURCE_ERROR"' OR
               wa.payload -> 'features/registrationCountry:solution' @> '"NO_DATA"' OR
               wa.payload -> 'features/registrationCountry:solution' @> '"DATA_SOURCE_ERROR"' OR
               wa.payload -> 'features/residencyCountry:solution' @> '"NO_DATA"' OR
               wa.payload -> 'features/residencyCountry:solution' @> '"DATA_SOURCE_ERROR"' OR
               wa.payload -> 'features/commonAp:solution' @> '"NO_DATA"' OR
               wa.payload -> 'features/commonAp:solution' @> '"DATA_SOURCE_ERROR"' OR
               wa.payload -> 'features/commonMp:solution' @> '"NO_DATA"' OR
               wa.payload -> 'features/commonMp:solution' @> '"DATA_SOURCE_ERROR"' OR
               wa.payload -> 'features/commonNames:solution' @> '"NO_DATA"' OR
               wa.payload -> 'features/commonNames:solution' @> '"DATA_SOURCE_ERROR"' OR
               wa.payload -> 'features/invalidAlert:solution' @> '"NO_DATA"' OR
               wa.payload -> 'features/invalidAlert:solution' @> '"DATA_SOURCE_ERROR"' OR
               wa.payload -> 'features/isApTpMarked:solution' @> '"NO_DATA"' OR
               wa.payload -> 'features/isApTpMarked:solution' @> '"DATA_SOURCE_ERROR"' OR
               wa.payload -> 'features/isTpMarked:solution' @> '"NO_DATA"' OR
               wa.payload -> 'features/isTpMarked:solution' @> '"DATA_SOURCE_ERROR"' OR
               wa.payload -> 'features/isCaseTpMarked:solution' @> '"NO_DATA"' OR
               wa.payload -> 'features/isCaseTpMarked:solution' @> '"DATA_SOURCE_ERROR"' OR
               wa.payload -> 'features/logicalDiscountingDob:solution' @> '"NO_DATA"' OR
               wa.payload -> 'features/logicalDiscountingDob:solution' @> '"DATA_SOURCE_ERROR"')
          AND wa.recommendation_date BETWEEN TIMESTAMP '${from}' AND TIMESTAMP '${to}'
    - name: DAD
      type: simulation
      description: Data Availability Diagnostic (DAD)
      selectSqlQuery: > # NOTE(wszabelski): When adding/removing/changing feature/category to DAD report in select, remember to add/remove/change that also in WHERE condition
        SELECT wsm.payload ->> 'match_reason:policy'                      AS "Policy ID",
               wsm.payload ->> 'match_reason:policy_title'                AS "Policy Name",
               wsm.payload ->> 'match_reason:step'                        AS "Step ID",
               wsm.payload ->> 'match_reason:step_title'                  AS "Step Name",
               wsm.payload ->> 'match_reason:feature_vector_signature'    AS "Reasoning Branch ID",
               wsa.payload ->> 'recommendation_recommended_action'        AS "S8 Alert Resolution",
               wsa.payload ->> 'recommendation_create_time'               AS "S8 Alert Resolution Timestamp",
               wsa.payload ->> 'recommendation_comment'                   AS "S8 Alert Comment",
               wa.payload ->> 's8_lobCountryCode'                         AS "Country LoB",
               wsm.payload ->> 'categories/customerType:value'            AS "Customer Type",
               wsm.payload ->> 'categories/hitType:value'                 AS "Risk Type",
               wsm.payload ->> 'features/name:solution'                   AS "Name",
               wsm.payload ->> 'features/dateOfBirth:solution'            AS "Date of Birth / Incorporation",
               wsm.payload ->> 'features/isPep:solution'                  AS "PEP",
               wsm.payload ->> 'features/gender:solution'                 AS "Gender",
               wsm.payload ->> 'features/geoPlaceOfBirth:solution'        AS "Geo Place of Birth",
               wsm.payload ->> 'features/geoResidencies:solution'         AS "Geo Residencies",
               wsm.payload ->> 'features/nationalIdDocument:solution'     AS "National ID",
               wsm.payload ->> 'features/otherDocument:solution'          AS "Other Document",
               wsm.payload ->> 'features/passportNumberDocument:solution' AS "Passport Number Document",
               wsm.payload ->> 'features/incorporationCountry:solution'   AS "Incorporation Country",
               wsm.payload ->> 'features/nationalityCountry:solution'     AS "Nationality Country",
               wsm.payload ->> 'features/otherCountry:solution'           AS "Other Country",
               wsm.payload ->> 'features/registrationCountry:solution'    AS "Registration Country",
               wsm.payload ->> 'features/residencyCountry:solution'       AS "Residency Country",
               wsm.payload ->> 'features/commonAp:solution'               AS "Common Alerted Party",
               wsm.payload ->> 'features/commonMp:solution'               AS "Common Watchlist Party",
               wsm.payload ->> 'features/commonNames:solution'            AS "Common Name",
               wsm.payload ->> 'features/invalidAlert:solution'           AS "Invalid Alert",
               wsm.payload ->> 'features/isApTpMarked:solution'           AS "True Case - Alerted Party",
               wsm.payload ->> 'features/isTpMarked:solution'             AS "True Case - Watchlist",
               wsm.payload ->> 'features/isCaseTpMarked:solution'         AS "True Case - Historical",
               wsm.payload ->> 'features/logicalDiscountingDob:solution'  AS "Logical Discounting",
               coalesce(
                  wa.payload ->> 'clientId',
                  wa.payload ->> 'DN_CASE.ID')                            AS "Client Alert ID",
               wa.payload ->> 'status'                                    AS "Alert Status",
               wa.discriminator                                           AS "S8 Alert ID"
        FROM warehouse_simulation_alert wsa
                 JOIN warehouse_alert wa ON wsa.name = wa.name
                 JOIN warehouse_simulation_match wsm
                      ON wsa.name = wsm.alert_name AND wsa.analysis_name = wsm.analysis_name
        WHERE (wsm.payload -> 'categories/customerType:value' @> '"NO_DATA"' OR
               wsm.payload -> 'categories/customerType:value' @> '"DATA_SOURCE_ERROR"' OR
               wsm.payload -> 'categories/hitType:value' @> '"NO_DATA"' OR
               wsm.payload -> 'categories/hitType:value' @> '"DATA_SOURCE_ERROR"' OR
               wsm.payload -> 'features/name:solution' @> '"NO_DATA"' OR
               wsm.payload -> 'features/name:solution' @> '"DATA_SOURCE_ERROR"' OR
               wsm.payload -> 'features/dateOfBirth:solution' @> '"NO_DATA"' OR
               wsm.payload -> 'features/dateOfBirth:solution' @> '"DATA_SOURCE_ERROR"' OR
               wsm.payload -> 'features/isPep:solution' @> '"NO_DATA"' OR
               wsm.payload -> 'features/isPep:solution' @> '"DATA_SOURCE_ERROR"' OR
               wsm.payload -> 'features/gender:solution' @> '"NO_DATA"' OR
               wsm.payload -> 'features/gender:solution' @> '"DATA_SOURCE_ERROR"' OR
               wsm.payload -> 'features/geoPlaceOfBirth:solution' @> '"NO_DATA"' OR
               wsm.payload -> 'features/geoPlaceOfBirth:solution' @> '"DATA_SOURCE_ERROR"' OR
               wsm.payload -> 'features/geoResidencies:solution' @> '"NO_DATA"' OR
               wsm.payload -> 'features/geoResidencies:solution' @> '"DATA_SOURCE_ERROR"' OR
               wsm.payload -> 'features/nationalIdDocument:solution' @> '"NO_DATA"' OR
               wsm.payload -> 'features/nationalIdDocument:solution' @> '"DATA_SOURCE_ERROR"' OR
               wsm.payload -> 'features/otherDocument:solution' @> '"NO_DATA"' OR
               wsm.payload -> 'features/otherDocument:solution' @> '"DATA_SOURCE_ERROR"' OR
               wsm.payload -> 'features/passportNumberDocument:solution' @> '"NO_DATA"' OR
               wsm.payload -> 'features/passportNumberDocument:solution' @> '"DATA_SOURCE_ERROR"' OR
               wsm.payload -> 'features/incorporationCountry:solution' @> '"NO_DATA"' OR
               wsm.payload -> 'features/incorporationCountry:solution' @> '"DATA_SOURCE_ERROR"' OR
               wsm.payload -> 'features/nationalityCountry:solution' @> '"NO_DATA"' OR
               wsm.payload -> 'features/nationalityCountry:solution' @> '"DATA_SOURCE_ERROR"' OR
               wsm.payload -> 'features/otherCountry:solution' @> '"NO_DATA"' OR
               wsm.payload -> 'features/otherCountry:solution' @> '"DATA_SOURCE_ERROR"' OR
               wsm.payload -> 'features/registrationCountry:solution' @> '"NO_DATA"' OR
               wsm.payload -> 'features/registrationCountry:solution' @> '"DATA_SOURCE_ERROR"' OR
               wsm.payload -> 'features/residencyCountry:solution' @> '"NO_DATA"' OR
               wsm.payload -> 'features/residencyCountry:solution' @> '"DATA_SOURCE_ERROR"' OR
               wsm.payload -> 'features/commonAp:solution' @> '"NO_DATA"' OR
               wsm.payload -> 'features/commonAp:solution' @> '"DATA_SOURCE_ERROR"' OR
               wsm.payload -> 'features/commonMp:solution' @> '"NO_DATA"' OR
               wsm.payload -> 'features/commonMp:solution' @> '"DATA_SOURCE_ERROR"' OR
               wsm.payload -> 'features/commonNames:solution' @> '"NO_DATA"' OR
               wsm.payload -> 'features/commonNames:solution' @> '"DATA_SOURCE_ERROR"' OR
               wsm.payload -> 'features/invalidAlert:solution' @> '"NO_DATA"' OR
               wsm.payload -> 'features/invalidAlert:solution' @> '"DATA_SOURCE_ERROR"' OR
               wsm.payload -> 'features/isApTpMarked:solution' @> '"NO_DATA"' OR
               wsm.payload -> 'features/isApTpMarked:solution' @> '"DATA_SOURCE_ERROR"' OR
               wsm.payload -> 'features/isTpMarked:solution' @> '"NO_DATA"' OR
               wsm.payload -> 'features/isTpMarked:solution' @> '"DATA_SOURCE_ERROR"' OR
               wsm.payload -> 'features/isCaseTpMarked:solution' @> '"NO_DATA"' OR
               wsm.payload -> 'features/isCaseTpMarked:solution' @> '"DATA_SOURCE_ERROR"' OR
               wsm.payload -> 'features/logicalDiscountingDob:solution' @> '"NO_DATA"' OR
               wsm.payload -> 'features/logicalDiscountingDob:solution' @> '"DATA_SOURCE_ERROR"')
          AND wsa.analysis_name = 'analysis/${analysisId}'
    - name: RB_SCORER
      type: production
      description: Reasoning Branch Scorer
      selectSqlQuery: >
        SELECT (payload ->> 'fvSignature') AS "Reasoning Branch ID",
               (payload ->> 'policyId') AS "Policy ID",
               (payload ->> 'policy_title') AS "Policy Name",
               (payload ->> 'stepId') AS "Step ID",
               (payload ->> 'step_title') AS "Step Name",
               (payload ->> 's8_recommendation') AS "S8 Alert Resolution",
               (payload ->> 'categories/customerType') AS "Customer Type",
               (payload ->> 'categories/hitType') AS "Risk Type",
               (payload ->> 'features/commonAp:solution') AS "Common Alerted Party",
               (payload ->> 'features/commonMp:solution') AS "Common Watchlist Party",
               (payload ->> 'features/commonNames:solution') AS "Common Name",
               (payload ->> 'features/dateOfBirth:solution') AS "Date of Birth / Incorporation",
               (payload ->> 'features/gender:solution') AS "Gender",
               (payload ->> 'features/geoPlaceOfBirth:solution') AS "Geo Place of Birth",
               (payload ->> 'features/geoResidencies:solution') AS "Geo Residencies",
               (payload ->> 'features/invalidAlert:solution') AS "Invalid Alert",
               (payload ->> 'features/isApTpMarked:solution') AS "True Case - Alerted Party ",
               (payload ->> 'features/isTpMarked:solution') AS "True Case - Watchlist",
               (payload ->> 'features/isCaseTpMarked:solution') AS "True Case - Historical",
               (payload ->> 'features/isPep:solution') AS "PEP",
               (payload ->> 'features/logicalDiscountingDob:solution') AS "Logical Discounting",
               (payload ->> 'features/name:solution') AS "Name",
               (payload ->> 'features/incorporationCountry:solution') AS "Incorporation Country",
               (payload ->> 'features/nationalityCountry:solution') AS "Nationality Country",
               (payload ->> 'features/otherCountry:solution') AS "Other Country",
               (payload ->> 'features/nationalIdDocument:solution') AS "National ID",
               (payload ->> 'features/otherDocument:solution') AS "Other Document",
               (payload ->> 'features/passportNumberDocument:solution') AS "Passport Number Document",
               (payload ->> 'features/registrationCountry:solution') AS "Registration Country",
               (payload ->> 'features/residencyCountry:solution') AS "Residency Country",
               count((payload ->> 'fvSignature')) AS "Matches Count",
               count(CASE WHEN (payload ->> 'qa.level-0.state') = 'FAILED' THEN 1 END ) AS "QA decision True Positive",
               count(CASE WHEN (payload ->> 'qa.level-0.state') = 'PASSED' THEN 1 END ) AS "QA decision False Positive",
               count(CASE WHEN (payload ->> 'analyst_decision') = 'analyst_decision_true_positive' THEN 1 END ) AS "Analyst decision True Positive",
               count(CASE WHEN (payload ->> 'analyst_decision') = 'analyst_decision_false_positive' THEN 1 END ) AS "Analyst decision False Positive"
        FROM warehouse_alert WHERE recommendation_date BETWEEN TIMESTAMP '${from}' AND TIMESTAMP '${to}'
        GROUP BY (payload ->> 'fvSignature'),
               (payload ->> 'policyId'),
               (payload ->> 'policy_title'),
               (payload ->> 'stepId'),
               (payload ->> 'step_title'),
               (payload ->> 's8_recommendation'),
               (payload ->> 'categories/customerType'),
               (payload ->> 'categories/hitType'),
               (payload ->> 'features/commonAp:solution'),
               (payload ->> 'features/commonMp:solution'),
               (payload ->> 'features/commonNames:solution'),
               (payload ->> 'features/dateOfBirth:solution'),
               (payload ->> 'features/gender:solution'),
               (payload ->> 'features/geoPlaceOfBirth:solution'),
               (payload ->> 'features/geoResidencies:solution'),
               (payload ->> 'features/invalidAlert:solution'),
               (payload ->> 'features/isApTpMarked:solution'),
               (payload ->> 'features/isTpMarked:solution'),
               (payload ->> 'features/isCaseTpMarked:solution'),
               (payload ->> 'features/isPep:solution'),
               (payload ->> 'features/logicalDiscountingDob:solution'),
               (payload ->> 'features/name:solution'),
               (payload ->> 'features/incorporationCountry:solution'),
               (payload ->> 'features/nationalityCountry:solution'),
               (payload ->> 'features/otherCountry:solution'),
               (payload ->> 'features/nationalIdDocument:solution'),
               (payload ->> 'features/otherDocument:solution'),
               (payload ->> 'features/passportNumberDocument:solution'),
               (payload ->> 'features/registrationCountry:solution'),
               (payload ->> 'features/residencyCountry:solution')
    - name: RB_SCORER
      type: simulation
      description: Reasoning Branch Scorer
      selectSqlQuery: >
        SELECT (wsm.payload ->> 'match_reason:feature_vector_signature') AS "Reasoning Branch ID",
               (wsm.payload ->> 'match_reason:policy') AS "Policy ID",
               (wsm.payload ->> 'match_reason:policy_title') AS "Policy Name",
               (wsm.payload ->> 'match_reason:step') AS "Step ID",
               (wsm.payload ->> 'match_reason:step_title') AS "Step Name",
               (wsa.payload ->> 'recommendation_recommended_action') AS "S8 Alert Resolution",
               (wsm.payload ->> 'categories/customerType:value') AS "Customer Type",
               (wsm.payload ->> 'categories/hitType:value') AS "Risk Type",
               (wsm.payload ->> 'features/commonAp:solution') AS "Common Alerted Party",
               (wsm.payload ->> 'features/commonMp:solution') AS "Common Watchlist Party",
               (wsm.payload ->> 'features/commonNames:solution') AS "Common Name",
               (wsm.payload ->> 'features/dateOfBirth:solution') AS "Date of Birth / Incorporation",
               (wsm.payload ->> 'features/gender:solution') AS "Gender",
               (wsm.payload ->> 'features/geoPlaceOfBirth:solution') AS "Geo Place of Birth",
               (wsm.payload ->> 'features/geoResidencies:solution') AS "Geo Residencies",
               (wsm.payload ->> 'features/invalidAlert:solution') AS "Invalid Alert",
               (wsm.payload ->> 'features/isApTpMarked:solution') AS "True Case - Alerted Party ",
               (wsm.payload ->> 'features/isTpMarked:solution') AS "True Case - Watchlist",
               (wsm.payload ->> 'features/isCaseTpMarked:solution') AS "True Case - Historical",
               (wsm.payload ->> 'features/isPep:solution') AS "PEP",
               (wsm.payload ->> 'features/logicalDiscountingDob:solution') AS "Logical Discounting",
               (wsm.payload ->> 'features/name:solution') AS "Name",
               (wsm.payload ->> 'features/incorporationCountry:solution') AS "Incorporation Country",
               (wsm.payload ->> 'features/nationalityCountry:solution') AS "Nationality Country",
               (wsm.payload ->> 'features/otherCountry:solution') AS "Other Country",
               (wsm.payload ->> 'features/nationalIdDocument:solution') AS "National ID",
               (wsm.payload ->> 'features/otherDocument:solution') AS "Other Document",
               (wsm.payload ->> 'features/passportNumberDocument:solution') AS "Passport Number Document",
               (wsm.payload ->> 'features/registrationCountry:solution') AS "Registration Country",
               (wsm.payload ->> 'features/residencyCountry:solution') AS "Residency Country",
               count((wsm.payload ->> 'match_reason:feature_vector_signature')) AS "Matches Count",
               count(CASE WHEN (wa.payload ->> 'qa.level-0.state') = 'FAILED' THEN 1 END ) AS "QA decision True Positive",
               count(CASE WHEN (wa.payload ->> 'qa.level-0.state') = 'PASSED' THEN 1 END ) AS "QA decision False Positive",
               count(CASE WHEN (wa.payload ->> 'analyst_decision') = 'analyst_decision_true_positive' THEN 1 END ) AS "Analyst decision True Positive",
               count(CASE WHEN (wa.payload ->> 'analyst_decision') = 'analyst_decision_false_positive' THEN 1 END ) AS "Analyst decision False Positive"
        FROM warehouse_simulation_alert wsa
          JOIN warehouse_alert wa ON wsa.name = wa.name
          JOIN warehouse_simulation_match wsm ON wsm.alert_name = wsa.name
        WHERE wsa.analysis_name = 'analysis/${analysisId}'
          AND wsm.analysis_name = 'analysis/${analysisId}'
        GROUP BY (wsm.payload ->> 'match_reason:feature_vector_signature'),
                 (wsm.payload ->> 'match_reason:policy'),
                 (wsm.payload ->> 'match_reason:policy_title'),
                 (wsm.payload ->> 'match_reason:step'),
                 (wsm.payload ->> 'match_reason:step_title'),
                 (wsa.payload ->> 'recommendation_recommended_action'),
                 (wsm.payload ->> 'categories/customerType:value'),
                 (wsm.payload ->> 'categories/hitType:value'),
                 (wsm.payload ->> 'features/commonAp:solution'),
                 (wsm.payload ->> 'features/commonMp:solution'),
                 (wsm.payload ->> 'features/commonNames:solution'),
                 (wsm.payload ->> 'features/dateOfBirth:solution'),
                 (wsm.payload ->> 'features/gender:solution'),
                 (wsm.payload ->> 'features/geoPlaceOfBirth:solution'),
                 (wsm.payload ->> 'features/geoResidencies:solution'),
                 (wsm.payload ->> 'features/invalidAlert:solution'),
                 (wsm.payload ->> 'features/isApTpMarked:solution'),
                 (wsm.payload ->> 'features/isTpMarked:solution'),
                 (wsm.payload ->> 'features/isCaseTpMarked:solution'),
                 (wsm.payload ->> 'features/isPep:solution'),
                 (wsm.payload ->> 'features/logicalDiscountingDob:solution'),
                 (wsm.payload ->> 'features/name:solution'),
                 (wsm.payload ->> 'features/incorporationCountry:solution'),
                 (wsm.payload ->> 'features/nationalityCountry:solution'),
                 (wsm.payload ->> 'features/otherCountry:solution'),
                 (wsm.payload ->> 'features/nationalIdDocument:solution'),
                 (wsm.payload ->> 'features/otherDocument:solution'),
                 (wsm.payload ->> 'features/passportNumberDocument:solution'),
                 (wsm.payload ->> 'features/registrationCountry:solution'),
                 (wsm.payload ->> 'features/residencyCountry:solution')
    - name: METRICS
      type: production
      description: Metrics
      selectSqlQuery: >
        WITH main AS (
            SELECT payload ->> 's8_lobCountryCode'          country,
                   payload ->> 'categories/hitType'         risk_type,
                   payload ->> 's8_recommendation'          recommendation,
                   payload ->> 'qa.level-0.state'           qa_decision,
                   payload ->> 'analyst_decision'           analyst_decision,
                   payload ->> 'extendedAttribute5' list_type,
                   COUNT(*)                                 alert_count
            FROM warehouse_alert
            WHERE payload ->> 'status' = 'LEARNING_COMPLETED'
              AND recommendation_date BETWEEN TIMESTAMP '${from}' AND TIMESTAMP '${to}'
            GROUP BY payload ->> 's8_lobCountryCode',
                     payload ->> 'categories/hitType',
                     payload ->> 's8_recommendation',
                     payload ->> 'qa.level-0.state',
                     payload ->> 'analyst_decision',
                     payload ->> 'extendedAttribute5'
        ),
             grouped AS (
                 SELECT main.country                                              g_country,
                        main.list_type                                            g_list_type,
                        main.risk_type                                            g_risk_type,
                        SUM(main.alert_count)                                     g_total,
                        COALESCE(SUM(main.alert_count)
                                 FILTER ( WHERE recommendation = 'ACTION_POTENTIAL_TRUE_POSITIVE'),
                                 0)                                               g_total_true_positive,
                        COALESCE(SUM(main.alert_count)
                                 FILTER ( WHERE recommendation = 'ACTION_FALSE_POSITIVE'),
                                 0)                                               g_total_false_positive,
                        COALESCE(SUM(main.alert_count)
                                 FILTER ( WHERE recommendation = 'ACTION_POTENTIAL_TRUE_POSITIVE'
                                     AND analyst_decision = 'analyst_decision_true_positive'),
                                 0)                                               g_total_ptp_and_analyst_ptp,
                        COALESCE(SUM(main.alert_count)
                                 FILTER ( WHERE recommendation = 'ACTION_POTENTIAL_TRUE_POSITIVE'
                                     AND analyst_decision IN ('analyst_decision_false_positive',
                                                              'analyst_decision_true_positive') ),
                                 0)                                               g_total_ptp_and_analyst,
                        COALESCE(SUM(main.alert_count)
                                 FILTER ( WHERE recommendation = 'ACTION_FALSE_POSITIVE'
                                     AND qa_decision = 'PASSED'), 0)              g_total_fp_and_qa_passed,
                        COALESCE(SUM(main.alert_count)
                                 FILTER ( WHERE recommendation = 'ACTION_FALSE_POSITIVE'
                                     AND qa_decision IN ('FAILED', 'PASSED')), 0) g_total_fp_and_qa
                 FROM main
                 GROUP BY 1, 2, 3
             )
        SELECT g_country                                                                               AS "Country LoB",
               g_risk_type                                                                             AS "Risk Type",
               g_list_type                                                                             AS "List Type",
               (g_total_true_positive + g_total_false_positive)                                        AS "# of S8 Solved as FP or PTP",
               g_total                                                                                 AS "# of S8 Total Alerts Processed",
               ROUND(((g_total_true_positive::decimal + g_total_false_positive::decimal) /
                      GREATEST(g_total, 1)) * 100,
                     3)                                                                                AS "Efficiency",
               g_total_fp_and_qa_passed                                                                AS "# of S8 Solved as FP and Analyst Solved as FP",
               (g_total_fp_and_qa - g_total_fp_and_qa_passed)                                          AS "# of S8 Solved as FP and Analyst Solved as TP",
               CASE
                   WHEN g_total_fp_and_qa IS NULL THEN 'n/a'
                   ELSE CAST(ROUND((g_total_fp_and_qa_passed::decimal /
                                    GREATEST(g_total_fp_and_qa::decimal, 1)) * 100,
                                   3) AS varchar) END                                                  AS "FP Effectiveness",
               (g_total_ptp_and_analyst - g_total_ptp_and_analyst_ptp)                                 AS "# of S8 Solved as PTP and Analyst Solved as FP",
               g_total_ptp_and_analyst_ptp                                                             AS "# of S8 Solved as PTP and Analyst Solved as TP",
               CASE
                   WHEN g_total_ptp_and_analyst IS NULL THEN 'n/a'
                   ELSE CAST(ROUND((g_total_ptp_and_analyst_ptp::decimal /
                                    GREATEST(g_total_ptp_and_analyst::decimal, 1)) * 100,
                                   3) AS varchar) END                                                  AS "PTP Effectiveness"
        FROM grouped
        ORDER BY g_country
    - name: METRICS
      type: simulation
      description: Metrics
      selectSqlQuery: >
        WITH main AS (
            SELECT wa.payload ->> 's8_lobCountryCode'                  country,
                   wa.payload ->> 'categories/hitType'                 risk_type,
                   wa.payload ->> 'extendedAttribute5'         list_type,
                   wsa.payload ->> 'recommendation_recommended_action' recommendation,
                   wa.payload ->> 'analyst_decision'                   analyst_decision,
                   wa.payload ->> 'qa.level-0.state'                   qa_decision,
                   COUNT(*)                                            alert_count
            FROM warehouse_simulation_alert wsa
                     JOIN warehouse_alert wa ON wsa.name = wa.name
            WHERE wsa.analysis_name = 'analysis/${analysisId}'
            GROUP BY wa.payload ->> 's8_lobCountryCode',
                     wa.payload ->> 'categories/hitType',
                     wa.payload ->> 'extendedAttribute5',
                     wsa.payload ->> 'recommendation_recommended_action',
                     wa.payload ->> 'analyst_decision',
                     wa.payload ->> 'qa.level-0.state'
        ),
             grouped AS (
                 SELECT main.country                                              g_country,
                        main.list_type                                            g_list_type,
                        main.risk_type                                            g_risk_type,
                        SUM(main.alert_count)                                     g_total,
                        COALESCE(SUM(main.alert_count)
                                 FILTER ( WHERE recommendation = 'ACTION_POTENTIAL_TRUE_POSITIVE'),
                                 0)                                               g_total_true_positive,
                        COALESCE(SUM(main.alert_count)
                                 FILTER ( WHERE recommendation = 'ACTION_FALSE_POSITIVE'),
                                 0)                                               g_total_false_positive,
                        COALESCE(SUM(main.alert_count)
                                 FILTER ( WHERE recommendation = 'ACTION_POTENTIAL_TRUE_POSITIVE'
                                     AND analyst_decision = 'analyst_decision_true_positive'),
                                 0)                                               g_total_ptp_and_analyst_ptp,
                        COALESCE(SUM(main.alert_count)
                                 FILTER ( WHERE recommendation = 'ACTION_POTENTIAL_TRUE_POSITIVE'
                                     AND analyst_decision IN ('analyst_decision_false_positive',
                                                              'analyst_decision_true_positive') ),
                                 0)                                               g_total_ptp_and_analyst,
                        COALESCE(SUM(main.alert_count)
                                 FILTER ( WHERE recommendation = 'ACTION_FALSE_POSITIVE'
                                     AND qa_decision = 'PASSED'), 0)              g_total_fp_and_qa_passed,
                        COALESCE(SUM(main.alert_count)
                                 FILTER ( WHERE recommendation = 'ACTION_FALSE_POSITIVE'
                                     AND qa_decision IN ('FAILED', 'PASSED')), 0) g_total_fp_and_qa
                 FROM main
                 GROUP BY 1, 2, 3
             )
        SELECT g_country                                                                               AS "Country LoB",
               g_risk_type                                                                             AS "Risk Type",
               g_list_type                                                                             AS "List Type",
               (g_total_true_positive + g_total_false_positive)                                        AS "# of S8 Solved as FP or PTP",
               g_total                                                                                 AS "# of S8 Total Alerts Processed",
               ROUND(((g_total_true_positive::decimal + g_total_false_positive::decimal) /
                      GREATEST(g_total, 1)) * 100,
                     3)                                                                                AS "Efficiency",
               g_total_fp_and_qa_passed                                                                AS "# of S8 Solved as FP and Analyst Solved as FP",
               (g_total_fp_and_qa - g_total_fp_and_qa_passed)                                          AS "# of S8 Solved as FP and Analyst Solved as TP",
               CASE
                   WHEN g_total_fp_and_qa IS NULL THEN 'n/a'
                   ELSE CAST(ROUND((g_total_fp_and_qa_passed::decimal /
                                    GREATEST(g_total_fp_and_qa::decimal, 1)) * 100,
                                   3) AS varchar) END                                                  AS "FP Effectiveness",
               (g_total_ptp_and_analyst - g_total_ptp_and_analyst_ptp)                                 AS "# of S8 Solved as PTP and Analyst Solved as FP",
               g_total_ptp_and_analyst_ptp                                                             AS "# of S8 Solved as PTP and Analyst Solved as TP",
               CASE
                   WHEN g_total_ptp_and_analyst IS NULL THEN 'n/a'
                   ELSE CAST(ROUND((g_total_ptp_and_analyst_ptp::decimal /
                                    GREATEST(g_total_ptp_and_analyst::decimal, 1)) * 100,
                                   3) AS varchar) END                                                  AS "PTP Effectiveness"
        FROM grouped
        ORDER BY g_country
    - name: BILLING
      type: production
      description: Billing
      selectSqlQuery:
        SELECT  to_char(recommendation_date, 'YYYY-MM') AS date,
        SUM(CASE WHEN payload ->> 's8_recommendation' = 'ACTION_FALSE_POSITIVE' THEN 1 END) AS count_solved_FP,
        SUM(CASE WHEN payload ->> 's8_recommendation' = 'ACTION_POTENTIAL_TRUE_POSITIVE' THEN 1 END) AS count_solved_PTP,
        SUM(CASE WHEN payload ->> 's8_recommendation' = 'ACTION_INVESTIGATE' THEN 1 END) AS count_solved_MI,
        SUM(CASE WHEN payload ->> 's8_recommendation' IN ('ACTION_FALSE_POSITIVE', 'ACTION_POTENTIAL_TRUE_POSITIVE') THEN 1 END) AS count_alerts_solved,
        SUM(CASE WHEN payload ->> 's8_recommendation' IN ('ACTION_FALSE_POSITIVE', 'ACTION_POTENTIAL_TRUE_POSITIVE', 'ACTION_INVESTIGATE') THEN 1 END) AS count_alerts_received
        FROM warehouse_alert
        WHERE recommendation_date BETWEEN TIMESTAMP '${from}' AND TIMESTAMP '${to}' AND payload ->> 's8_recommendation'
        IN ('ACTION_FALSE_POSITIVE', 'ACTION_POTENTIAL_TRUE_POSITIVE', 'ACTION_INVESTIGATE')
        GROUP BY date
    - name: QA_OUTCOME
      type: production
      description: QA Outcome
      selectSqlQuery: >
        SELECT coalesce(
                wa.payload ->> 'clientId',
                wa.payload ->> 'DN_CASE.ID')                AS "Client Alert ID",
               wa.payload ->> 'fvSignature'                 AS "Reasoning Branch ID",
               wa.payload ->> 'policyId'                    AS "Policy ID",
               wa.payload ->> 'policy_title'                AS "Policy Name",
               wa.payload ->> 's8_recommendation'           AS "S8 Alert Resolution",
               wa.recommendation_date                       AS "S8 Alert Resolution Timestamp",
               wa.payload ->> 'qa.level-0.NEW.timestamp'    AS "Alert Selected for QA Timestamp",
               wa.payload ->> 'qa.level-0.state'            AS "QA Review Resolution",
               coalesce(
                       wa.payload ->> 'qa.level-0.PASSED.timestamp',
                       wa.payload ->> 'qa.level-0.FAILED.timestamp')
                                                            AS "Alert QA Review Timestamp",
               wa.payload ->> 'qa.level-1.state'            AS "QA Validation Resolution",
               coalesce(
                       wa.payload ->> 'qa.level-1.PASSED.timestamp',
                       wa.payload ->> 'qa.level-1.FAILED.timestamp')
                                                            AS "Alert QA Validation Timestamp",
               wa.payload ->> 'categories/hitType'          AS "Risk Type",
               wa.payload ->> 'extendedAttribute5'          AS "List Type",
               wa.payload ->> 's8_lobCountryCode'           AS "Country LoB"
        FROM warehouse_alert wa
        WHERE
               recommendation_date BETWEEN TIMESTAMP '${from}' AND TIMESTAMP '${to}' AND
               wa.payload ->> 'qa.level-0.NEW.timestamp' IS NOT NULL
    - name: QA_SAMPLE
      type: production
      description: QA Sample
      selectSqlQuery: >
        SELECT coalesce(
                  wa.payload ->> 'clientId',
                  wa.payload ->> 'DN_CASE.ID')              AS "Client Alert ID",
               wa.recommendation_date                       AS "S8 Alert Resolution Timestamp",
               wa.payload ->> 'qa.level-0.NEW.timestamp'    AS "Alert Selected for QA Timestamp",
               wa.payload ->> 'categories/hitType'          AS "Risk Type",
               wa.payload ->> 'extendedAttribute5'          AS "List Type",
               wa.payload ->> 's8_lobCountryCode'           AS "Country LoB"
        FROM warehouse_alert wa
        WHERE
               recommendation_date BETWEEN TIMESTAMP '${from}' AND TIMESTAMP '${to}' AND
               wa.payload ->> 'qa.level-0.NEW.timestamp' IS NOT NULL
