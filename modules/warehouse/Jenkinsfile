@Library('pipeline-shared-library@master') _

gradleBuild(
    jdkVersion: 'jdk-11',
    sonarEnabled: true,
    dependencyCheckEnabled: true,
    includeBuildNumberInSnapshotVersion: true,
    additionalParams: [booleanParam(name: 'deployOnTest',
    description: '''Deploy on test environment in Nomad.''', defaultValue: false)],
    additionalStages: {
      stage('Build and deploy container image') {
        script {
          def utils = new com.silenteight.jenkins.ci.Utils()
          dir( './scripts' ) {
            stash includes: '**', name: 'scripts'
          }
          dir( './helm-chart' ) {
            stash includes: '**', name: 'helm'
          }
          if (utils.getGitBranch() == 'master') {
            def gradle = new com.silenteight.jenkins.ci.Gradle()
            gradle.gradle('jib')
          } else {
            echo 'This is not a release branch ignore docker image deployment'
          }
        }
      }

      stage('Build and deploy ES Init Docker Image') {
        script {
          env.WAREHOUSE_ES_INIT_VERSION = "1.0.0"
          sh "cd scripts/es-init-docker && docker build . --tag docker.repo.silenteight.com/warehouse/warehouse-es-init:${env.WAREHOUSE_ES_INIT_VERSION} --tag docker.repo.silenteight.com/warehouse/warehouse-es-init:latest"
          sh "docker image push docker.repo.silenteight.com/warehouse/warehouse-es-init:${env.WAREHOUSE_ES_INIT_VERSION}"
          sh "docker image push docker.repo.silenteight.com/warehouse/warehouse-es-init:latest"
        }
      }

      stage('Deploy On Nomad Dev') {
        script {
          def utils = new com.silenteight.jenkins.ci.Utils()
          // FIXME(ahaczewski): Use `when` if possible.
          if (utils.getGitBranch() == 'master') {
            sh './nomad/deploy.sh -var-file=dev.vars'
          } else {
            echo 'This is not a release branch ignore Nomad deployment'
          }
        }
      }

      stage('Deploy On Nomad Test') {
        script {
          def utils = new com.silenteight.jenkins.ci.Utils()
          // FIXME(ahaczewski): Use `when` if possible.
          if (utils.getGitBranch() == 'master' && params.deployOnTest) {
            sh './nomad/deploy.sh -var-file=test.vars'
          } else {
            echo 'This is not a release branch ignore Nomad deployment'
          }
        }
      }

      stage('Helm Chart registry') {
        def utils = new com.silenteight.jenkins.ci.Utils()
        env.INSTALLER_VERSION = utils.getProjectVersion()
        echo 'Helm Chart building....'
        node("aws-worker") {
          // Stash is done in first stage
          dir( './scripts' ) {
            unstash 'scripts'
          }
          dir( './helm-chart' ) {
            unstash 'helm'
          }
          script {
            if (utils.getGitBranch() == 'master' || utils.getGitBranch().startsWith('uat')) {
              echo 'Helm Chart version'
              sh './scripts/helm-chart-build.sh'
            } else {
              echo 'This is not a release branch ignore Helm Chart deployment'
            }
          }
        }
      }

      stage('AWS ECR') {
        def utils = new com.silenteight.jenkins.ci.Utils()
        //This is docker image tag version which will be used to copy from s8 repository
        env.INSTALLER_VERSION = utils.getProjectVersion()
        node("aws-worker") {
          // Stash is done in first stage
          dir( './scripts' ) {
            unstash 'scripts'
          }
          dir( './helm-chart' ) {
            unstash 'helm'
          }
          script {
            if (utils.getGitBranch() == 'master' || utils.getGitBranch().startsWith('uat')) {
              echo 'AWS image push'
              sh './scripts/aws-deploy.sh'
            } else {
              echo 'This is not a release branch ignore AWS ECR push'
            }
          }
        }
      }
    }
)
