openapi: 3.0.3
info:
  title: QA Alerts Process
  description: Quality Assurance process over alerts
  version: 1.0.0

servers:
  - url: '{environment}/rest/warehouse/api/v1'
    variables:
      environment:
        enum:
          - http://localhost:24291
          - https://localhost:24111
        default: http://localhost:24291

paths:
  /analysis/production/alerts:
    get:
      tags:
        - warehouse
      parameters:
        - in: query
          name: name
          required: true
          description: Alert resource name
          schema:
            type: array
            items:
              $ref: '#/components/schemas/AlertName'
      responses:
        '200':
          description: defauld response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Alerts'


  /analysis/production/alerts/{id}:
    get:
      tags:
        - warehouse
      parameters:
        - in: path
          name: id
          required: true
          description: Alert Id - UUID from the `AlertName` field
          schema:
            $ref: '#/components/schemas/AlertId'
      responses:
        '200':
          description: defauld response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlertDetails'


  /analysis/production/matches/{matchId}:
    get:
      tags:
        - warehouse
      parameters:
        - in: path
          name: matchId
          required: true
          description: Match Id - UUID form the `MatchName` field
          schema:
            $ref: '#/components/schemas/MatchId'
      responses:
        '200':
          description: defauld response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchDetails'


  /analysis/production/matches/{matchId}/features/{featureId}/inputs:
    get:
      tags:
        - warehouse
      parameters:
        - in: path
          name: matchId
          required: true
          description: Match Id - UUID form the `MatchName` field
          schema:
            $ref: '#/components/schemas/MatchId'
        - in: path
          name: featureId
          required: true
          description: Feature Id - UUID from the `FeatureName` field
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: |
            Each feature require inputs related to his needs, so the response will be different for each feature
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureInput'

  /analysis/production/matches/{matchId}/features/{featureId}/solution:
    get:
      tags:
        - warehouse
      parameters:
        - in: path
          name: matchId
          required: true
          description: Match Id - UUID form the `MatchName` field
          schema:
            $ref: '#/components/schemas/MatchId'
        - in: path
          name: featureId
          required: true
          description: Feature Id - UUID from the `FeatureName` field
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: sda
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureSolution'

  /analysis/production/matches/{matchId}/categories/{categoryId}/values:
    get:
      tags:
        - warehouse
      parameters:
        - in: path
          name: matchId
          required: true
          description: Match Id - UUID form the `MatchName` field
          schema:
            $ref: '#/components/schemas/MatchId'
        - in: path
          name: categoryId
          required: true
          description: Category Id - UUID from the `CategoryName` field
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Each category requere inputs related to his needs, so the responce
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'

components:
  schemas:
    AlertName:
      type: string
      description: Name of the alert. This field contains `resourceName` and `alertId` (UUID) generated by S8 system.
      example: 'alerts/c01e5d49-a72d-4e6a-b634-265165916c9a'

    AlertId:
      type: string
      description: The UUID value available in the `AlertName` field.
      example: 'c01e5d49-a72d-4e6a-b634-265165916c9a'

    MatchName:
      type: string
      description: Name of the match. This field contains `resourceName` and `alertId` (UUID) generated by S8 system.
      example: 'matches/23dbd750-fbd4-4461-bd1a-85ce721760e4'

    MatchId:
      type: string
      description: The UUID value available in the `MatchName` field.
      example: '23dbd750-fbd4-4461-bd1a-85ce721760e4'

    Alerts:
      type: array
      items:
        $ref: '#/components/schemas/Alert'
      example:
        [
          {
            'alertName': 'alerts/c01e5d49-a72d-4e6a-b634-265165916c9a',
            'alertId': 'HK_BTCH_PEPL!57535030-D413B044-C999F2CD-075A3457',
            'riskType': 'PEP',
            'country': 'UK'
          },
          {
            'alertName': 'alerts/998bbb9d-db03-49a5-ba4c-e8f069154964',
            'alertId': 'HK_BTCH_DENY!D413B044-075A3457-C999F2CD-57535030',
            'riskType': 'Sanctions',
            'country': 'UK'
          }
        ]


    Alert:
      required:
        - alertName
        - alertId
        - riskType
        - country
      type: object
      properties:
        alertName:
          $ref: '#/components/schemas/AlertName'
        alertId:
          type: string
          description: |
            Source System Alert Id - this is the ID of the alert which is understood by the bank.
            QA Alerts -> Review -> Alert Details -> Alert ID

        riskType:
          $ref: '#/components/schemas/RiskType'
        country:
          type: string
      example:
        {
          'alertName': 'alerts/c01e5d49-a72d-4e6a-b634-265165916c9a',
          'alertId': 'HK_BTCH_DENY!57535030-D413B044-C999F2CD-075A3457',
          'riskType': 'PEP',
          'country': 'UK'
        }


    RiskType:
      type: string
      enum:
        - PEP
        - Sanctions


    AlertDetails:
      required:
        - alertName
        - alertId
        - riskType
        - country
        - aiDecision
      type: object
      properties:
        alertName:
          $ref: '#/components/schemas/AlertName'
        alertId:
          type: string
        riskType:
          $ref: '#/components/schemas/RiskType'
        country:
          description: Customer country
          type: string
        policyName:
          type: string
        aiDecision:
          type: string
        aiComment:
          type: string
        matches:
          type: array
          items:
            properties:
              matchName:
                type: string
      example:
        {
          'alertName': 'alerts/c01e5d49-a72d-4e6a-b634-265165916c9a',
          'alertId': 'HK_BTCH_DENY!57535030-D413B044-C999F2CD-075A3457',
          'riskType': 'PEP',
          'country': 'UK',
          'policyName': 'policies/675cda67-93ab-439e-8050-45a90e3b0fb8',
          'aiDecision': 'FALSE_POSITIVE',
          'aiComment': 'comment',
          'matches': [
            'matches/1f42bba8-da6b-4b47-934e-ebde74327a9b',
          ]
        }


    MatchDetails:
      required:
        - matchName
        - watchlistId
        - featureVectorId
        - features
      type: object
      properties:
        matchName:
          $ref: '#/components/schemas/MatchName'
        watchlistId:
          type: string
        featureVectorId:
          type: string
        aiSolution:
          type: string
        categories:
          type: array
          items:
            $ref: '#/components/schemas/CategoryName'
        features:
          type: array
          items:
            $ref: '#/components/schemas/FeatureName'
      example:
        {
          'alertName': 'alerts/c01e5d49-a72d-4e6a-b634-265165916c9a',
          'alertId': 'HK_BTCH_DENY!57535030-D413B044-C999F2CD-075A3457',
          'featureVectorId': '4e94985e-4f94-4158-9050-a81941b2f45f',
          'aiSolution': 'FALSE_POSITIVE',
          'categories': [
              'categories/apType',
              'categories/isDeny'
          ],
          'features': [
              'features/name',
              'features/date',
              'features/nationality',
          ]
        }

    CategoryName:
      type: string
      example:
        'categories/isDeny'

    FeatureName:
      type: string
      example:
        'features/name'

    FeatureInput:
      type: object
      properties:
        feature:
          type: string
        match:
          $ref: '#/components/schemas/MatchName'
        input:
          type: object
          description: Details in a Datasource API proto files - https://gitlab.silenteight.com/sens/data-source-api/-/tree/master/data-source-api/src/main/proto/silenteight/datasource/api
      example:
        {
          'feature': 'features/name',
          'match': 'matches/23dbd750-fbd4-4461-bd1a-85ce721760e4',
          'input': 'json data'
        }

    Category:
      type: object
      description: More details in - https://gitlab.silenteight.com/sens/data-source-api/-/blob/master/data-source-categories-api/src/main/proto/silenteight/datasource/categories/api/v1/category.proto
      properties:
        category:
          type: string
        values:
          type: array
          items:
            type: string
      example:
        {
          'category': 'segment',
          'values': ['corporate']
        }

    FeatureSolution:
      type: object
      properties:
        feature:
          type: string
        match:
          $ref: '#/components/schemas/MatchName'
        solution:
          type: string
      example:
        {
          'feature': 'features/name',
          'match': 'matches/23dbd750-fbd4-4461-bd1a-85ce721760e4',
          'solution': 'MATCH'
        }
