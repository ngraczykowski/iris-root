server:
  port: { { env "NOMAD_PORT_http" } }

management:
  health:
    elasticsearch:
      enabled: false

spring:
  rabbitmq:
    addresses: { { range $index, $rabbit := service "amqp.rabbitmq" - } }
      { { if $index } },{ { end - } }
      { { $rabbit.Address } }:{{ $rabbit.Port -}}
  {{- end }}
# NOTE(ahaczewski): Intentionally left empty.
    host:
    virtual-host: /{{ env "NOMAD_NAMESPACE" }}
  cloud:
    consul:
      enabled: true
      host: localhost
      port: 8500
      scheme: http
      discovery:
        enabled: true
        register: false
        register-health-check: false
        catalog-services-watch:
          enabled: true
      service-registry:
        auto-registration:
          enabled: false

warehouse:
  migration:
    enabled: false
  alert-level-security:
    enabled: false
  persistence:
    alert:
      recommendation-date-field: "recommendationDate"

  db:
    name: { { env "NOMAD_NAMESPACE" } }-warehouse
  {{- $nomad_namespace := env "NOMAD_NAMESPACE" -}}
  {{- with service (print $nomad_namespace "-warehouse-db") }}
    host: { { (index . 0).Address } }
    port: { { (index . 0).Port } }
  { { end - } }

  minio:
    url: https://minio.silenteight.com
  retention:
    alert:
      batch-size: 1000

  sampling:
    filters:
      - name: alert_s8_recommendation
        values: ACTION_FALSE_POSITIVE
  task:
    async:
      execution:
        pool:
          core-size: 4
          max-size: 16
          queue-capacity: 50
          thread-name-prefix: async-auth-aware-

keycloak:
  client-id: { { env "NOMAD_NAMESPACE" } }-frontend
  adapter:
    auth-server-url: https://auth.silenteight.com
    realm: sens-webapp
    public-client: false
    confidential-port: 0
    principal-attribute: preferred_username
    ssl-required: external

grpc:
  logging:
    enabled: true
  server:
    port: { { env "NOMAD_PORT_grpc" } }

warehouse.report.statistics:
  all-alerts-query:
    SELECT count(*)
    FROM warehouse_simulation_alert
    WHERE analysis_name = ?
  solved-alerts-query:
    SELECT count(*)
    FROM warehouse_simulation_alert
    WHERE analysis_name = ?
    AND (payload ->> 'recommendationRecommendedAction')
    IN ('ACTION_FALSE_POSITIVE', 'ACTION_POTENTIAL_TRUE_POSITIVE')
  ai-false-positive-query:
    SELECT count(*)
    FROM warehouse_simulation_alert wsa
    JOIN warehouse_alert wa ON wsa.name = wa.name
    WHERE wsa.analysis_name = ?
    AND (wa.payload ->> 'analystDecision') IN ('ANALYST_FALSE_POSITIVE', 'ANALYST_TRUE_POSITIVE')
    AND (wsa.payload ->> 'recommendationRecommendedAction') = 'ACTION_FALSE_POSITIVE'
  analyst-false-positive-query:
    SELECT count(*)
    FROM warehouse_simulation_alert wsa
    JOIN warehouse_alert wa ON wsa.name = wa.name
    WHERE wsa.analysis_name = ?
    AND (wa.payload ->> 'analystDecision') = 'ANALYST_FALSE_POSITIVE'
    AND (wsa.payload ->> 'recommendationRecommendedAction') = 'ACTION_FALSE_POSITIVE'

warehouse.report.zip:
  enabled: true
  rowsLimit: 10

warehouse.reports.v2:
  reports:
    - name: RB_SCORER_MATCH_LEVEL
      type: simulation
      description: RB Scorer
      selectSqlQuery: >

    - name: RB_SCORER_MATCH_LEVEL
      type: production
      description: RB Scorer (Match Level)
      selectSqlQuery: >

    - name: AI_REASONING
      type: production
      description: AI Reasoning (Alert Level)
      selectSqlQuery: >
        SELECT wa.name                                          AS "S8 Alert ID",
               wa.payload ->> 'clientId'                        AS "Client Alert ID",
               STRING_AGG(wm.payload ->> 'clientMatchId', ', ') AS "Client Match IDs",
               STRING_AGG(wm.payload ->> 'watchListId', ', ')   AS "Watchlist Match IDs",
               wa.payload ->> 'policyId'                        AS "Policy ID",
               wa.payload ->> 'policyTitle'                     AS "Policy Name",
               wm.payload ->> 'stepId'                          AS "Step ID",
               wm.payload ->> 'stepTitle'                       AS "Step Name",
               STRING_AGG(wm.payload ->> 'fvSignature', ', ')   AS "Reasoning Branch IDs",
               wa.payload ->> 's8Recommendation'                AS "S8 Alert Resolution",
               wa.payload ->> 'recommendationDate'              AS "S8 Resolution Timestamp",
               wa.payload ->> 'comment'                         AS "S8 Alert Reason"
        FROM warehouse_alert wa
                 JOIN warehouse_match wm ON wa.id = wm.alert_id
        WHERE wa.created_at BETWEEN TIMESTAMP '${from}' AND TIMESTAMP '${to}'
        GROUP BY wa.name,
                 wa.payload ->> 'clientId',
                 wa.payload ->> 'policyId',
                 wa.payload ->> 'policyTitle',
                 wm.payload ->> 'stepId',
                 wm.payload ->> 'stepTitle',
                 wa.payload ->> 's8Recommendation',
                 wa.payload ->> 'recommendationDate',
                 wa.payload ->> 'comment'

    - name: AI_REASONING_MATCH_LEVEL
      type: production
      description: AI Reasoning (Match Level)
      selectSqlQuery: >
        SELECT wa.name                             AS "S8 Alert ID",
               wa.payload ->> 'clientId'           AS "Client Alert ID",
               wm.payload ->> 'clientMatchId'      AS "Client Match ID",
               wa.payload ->> 'policyId'           AS "Policy ID",
               wa.payload ->> 'policyTitle'        AS "Policy Name",
               wm.payload ->> 'stepId'             AS "Step ID",
               wm.payload ->> 'stepTitle'          AS "Step Name",
               wm.payload ->> 'fvSignature'        AS "Reasoning Branch ID",
               wm.payload ->> 's8Recommendation'   AS "S8 Match Resolution",
               wa.payload ->> 'recommendationDate' AS "S8 Resolution Timestamp",
               wm.payload ->> 's8Reason'           AS "S8 Match Reason",
               wa.payload ->> 's8Recommendation'   AS "S8 Alert Resolution"
        FROM warehouse_alert wa
                 JOIN warehouse_match wm ON wa.id = wm.alert_id
        WHERE wa.recommendation_date BETWEEN TIMESTAMP '${from}' AND TIMESTAMP '${to}'

    - name: AI_REASONING_MATCH_LEVEL
      type: simulation
      description: AI Reasoning
      selectSqlQuery: >
        SELECT wa.name                                                 AS "S8 Alert ID",
               wa.payload ->> 'clientId'                               AS "Client Alert ID",
               wm.payload ->> 'clientMatchId'                          AS "Client Match ID",
               wsa.payload ->> 'match_reason:policy'                   AS "Policy ID",
               wsa.payload ->> 'match_reason:policy_title'             AS "Policy Name",
               wsa.payload ->> 'match_reason:step'                     AS "Step ID",
               wsa.payload ->> 'match_reason:step_title'               AS "Step Name",
               wsa.payload ->> 'match_reason:feature_vector_signature' AS "Reasoning Branch ID",
               wsa.payload ->> 'recommendation_recommended_action'     AS "S8 Match Resolution",
               wsa.payload ->> 'recommendation_create_time'            AS "S8 Resolution Timestamp",
               wsa.payload ->> 'recommendation_comment'                AS "S8 Match Reason"
        FROM warehouse_simulation_alert wsa
                 JOIN warehouse_alert wa ON wsa.name = wa.name
                 JOIN warehouse_match wm ON wa.id = wm.alert_id
        WHERE wsa.analysis_name = 'analysis/${analysisId}'

    - name: ACCURACY_ALERT_LEVEL
      type: production
      description: Accuracy (Alert Level)
      selectSqlQuery: >

    - name: ACCURACY_MATCH_LEVEL
      type: production
      description: Accuracy (Match Level)
      selectSqlQuery: >

    - name: ACCURACY_MATCH_LEVEL
      type: simulation
      description: Accuracy
      selectSqlQuery: >

    - name: METRICS_ALERT_LEVEL
      type: production
      description: Metrics (Alert Level)
      selectSqlQuery: >

    - name: METRICS_ALERT_LEVEL
      type: simulation
      description: Metrics
      selectSqlQuery: >
