server:
  port: {{ env "NOMAD_PORT_http" }}

spring:
  rabbitmq:
    addresses: {{ range $index, $rabbit := service "amqp.rabbitmq" -}}
      {{ if $index }},{{ end -}}
      {{ $rabbit.Address }}:{{ $rabbit.Port -}}
{{- end }}
# NOTE(ahaczewski): Intentionally left empty.
    host:
    virtual-host: /{{ env "NOMAD_NAMESPACE" }}
  cloud:
    consul:
      enabled: true
      host: localhost
      port: 8500
      scheme: http
      discovery:
        enabled: true
        register: false
        register-health-check: false
        catalog-services-watch:
          enabled: true
      service-registry:
        auto-registration:
          enabled: false

warehouse:
  migration:
    enabled: false
  alert-level-security:
    enabled: false
  persistence:
    alert:
      recommendation-date-field: "recommendationDate"

  db:
    name: {{ env "NOMAD_NAMESPACE" }}-warehouse
  {{- $nomad_namespace := env "NOMAD_NAMESPACE" -}}
  {{- with service (print $nomad_namespace "-warehouse-db") }}
    host: {{ (index . 0).Address }}
    port: {{ (index . 0).Port }}
  {{ end -}}

  minio:
    url: https://minio.silenteight.com
  retention:
    alert:
      batch-size: 1000

  sampling:
    filters:

  task:
    async:
      execution:
        pool:
          core-size: 4
          max-size: 16
          queue-capacity: 50
          thread-name-prefix: async-auth-aware-

keycloak:
  client-id: frontend
  adapter:
    auth-server-url: https://auth.silenteight.com
    realm: {{ env "NOMAD_NAMESPACE" }}
    public-client: false
    confidential-port: 0
    principal-attribute: preferred_username
    ssl-required: external

grpc:
  logging:
    enabled: true
  server:
    port: {{ env "NOMAD_PORT_grpc" }}

warehouse.report.statistics:
  all-alerts-query:
    SELECT count(*)
    FROM warehouse_simulation_alert
    WHERE analysis_name = ?
  solved-alerts-query:
    SELECT count(*)
    FROM warehouse_simulation_alert
    WHERE analysis_name = ?
    AND (payload ->> 'recommendation_recommended_action')
    IN ('ACTION_FALSE_POSITIVE', 'ACTION_POTENTIAL_TRUE_POSITIVE')
  ai-false-positive-query:
    SELECT count(*)
    FROM warehouse_simulation_alert wsa
    JOIN warehouse_alert wa ON wsa.name = wa.name
    WHERE wsa.analysis_name = ?
    AND (wa.payload ->> 'analystDecision') IN ('ANALYST_FALSE_POSITIVE', 'ANALYST_TRUE_POSITIVE')
    AND (wsa.payload ->> 'recommendation_recommended_action') = 'ACTION_FALSE_POSITIVE'
  analyst-false-positive-query:
    SELECT count(*)
    FROM warehouse_simulation_alert wsa
    JOIN warehouse_alert wa ON wsa.name = wa.name
    WHERE wsa.analysis_name = ?
    AND (wa.payload ->> 'analystDecision') = 'ANALYST_FALSE_POSITIVE'
    AND (wsa.payload ->> 'recommendation_recommended_action') = 'ACTION_FALSE_POSITIVE'

warehouse.report.zip:
  enabled: false
  rowsLimit: 10

warehouse.reports.v2:
  reports:
    - name: RB_SCORER
      type: production
      description: RB Scorer (Match Level)
      selectSqlQuery: >
        SELECT wa.payload ->> 'policyId'                                 AS "Policy ID",
               wa.payload ->> 'policyTitle'                              AS "Policy Name",
               wm.payload ->> 'stepId'                                   AS "Step ID",
               wm.payload ->> 'stepTitle'                                AS "Step Name",
               wm.payload ->> 'fvSignature'                              AS "Reasoning Branch ID",
               wm.payload ->> 's8Recommendation'                         AS "S8 Match Resolution",
               COUNT(wm.payload ->> 'fvSignature')                       AS "Total Matches Count",
               COUNT(*) FILTER ( WHERE tmc.hit_count = 1 )               AS "Single Matches Count",
               wm.payload ->> 'categories/customerType'                  AS "Customer Type",
               wm.payload ->> 'categories/hitType'                       AS "Risk Type",
               wm.payload ->> 'features/name:solution'                   AS "Name",
               wm.payload ->> 'features/date:solution'                   AS "Date of Birth / Incorporation",
               wm.payload ->> 'features/nationalIdDocument:solution'     AS "National ID",
               wm.payload ->> 'features/passportNumberDocument:solution' AS "Passport Number Document",
               wm.payload ->> 'features/otherDocument:solution'          AS "Other Document",
               wm.payload ->> 'features/bic:solution'                    AS "BIC",
               wm.payload ->> 'features/gender:solution'                 AS "Gender",
               wm.payload ->> 'features/nationalityCountry:solution'     AS "Nationality Country",
               wm.payload ->> 'features/country:solution'                AS "Country"
        FROM warehouse_alert wa
                 JOIN warehouse_match wm ON wa.id = wm.alert_id
                 JOIN (
            SELECT alert_id        AS alert_id_grp,
                   COUNT(alert_id) AS hit_count
            FROM warehouse_match
            GROUP BY alert_id_grp
        ) AS tmc ON alert_id_grp = wa.id
        WHERE wa.recommendation_date BETWEEN TIMESTAMP '${from}' AND TIMESTAMP '${to}'
        GROUP BY wa.payload ->> 'policyId',
                 wa.payload ->> 'policyTitle',
                 wm.payload ->> 'stepId',
                 wm.payload ->> 'stepTitle',
                 wm.payload ->> 's8Recommendation',
                 wm.payload ->> 'fvSignature',
                 wm.payload ->> 'categories/customerType',
                 wm.payload ->> 'categories/hitType',
                 wm.payload ->> 'features/name:solution',
                 wm.payload ->> 'features/date:solution',
                 wm.payload ->> 'features/nationalIdDocument:solution',
                 wm.payload ->> 'features/passportNumberDocument:solution',
                 wm.payload ->> 'features/otherDocument:solution',
                 wm.payload ->> 'features/bic:solution',
                 wm.payload ->> 'features/gender:solution',
                 wm.payload ->> 'features/nationalityCountry:solution',
                 wm.payload ->> 'features/country:solution'

    - name: RB_SCORER
      type: simulation
      description: RB Scorer
      selectSqlQuery: >
        SELECT wsa.payload ->> 'match_reason:policy'                          AS "Policy ID",
               wsa.payload ->> 'match_reason:policy_title'                    AS "Policy Name",
               wsa.payload ->> 'match_reason:step'                            AS "Step ID",
               wsa.payload ->> 'match_reason:step_title'                      AS "Step Name",
               wsa.payload ->> 'match_reason:feature_vector_signature'        AS "Reasoning Branch ID",
               wsa.payload ->> 'recommendation_recommended_action'            AS "S8 Match Resolution",
               COUNT(wsa.payload ->> 'match_reason:feature_vector_signature') AS "Total Matches Count",
               wsa.payload ->> 'categories/customerType:value'                AS "Customer Type",
               wsa.payload ->> 'categories/hitType:value'                     AS "Risk Type",
               wsa.payload ->> 'features/name:solution'                       AS "Name",
               wsa.payload ->> 'features/date:solution'                       AS "Date of Birth / Incorporation",
               wsa.payload ->> 'features/nationalIdDocument:solution'         AS "National ID",
               wsa.payload ->> 'features/passportNumberDocument:solution'     AS "Passport Number Document",
               wsa.payload ->> 'features/otherDocument:solution'              AS "Other Document",
               wsa.payload ->> 'features/bic:solution'                        AS "BIC",
               wsa.payload ->> 'features/gender:solution'                     AS "Gender",
               wsa.payload ->> 'features/nationalityCountry:solution'         AS "Nationality Country",
               wsa.payload ->> 'features/country:solution'                    AS "Country"
        FROM warehouse_simulation_alert wsa
        WHERE wsa.analysis_name = 'analysis/${analysisId}'
        GROUP BY wsa.payload ->> 'match_reason:policy',
                 wsa.payload ->> 'match_reason:policy_title',
                 wsa.payload ->> 'match_reason:step',
                 wsa.payload ->> 'match_reason:step_title',
                 wsa.payload ->> 'match_reason:feature_vector_signature',
                 wsa.payload ->> 'recommendation_recommended_action',
                 wsa.payload ->> 'categories/customerType:value',
                 wsa.payload ->> 'categories/hitType:value',
                 wsa.payload ->> 'features/name:solution',
                 wsa.payload ->> 'features/date:solution',
                 wsa.payload ->> 'features/nationalIdDocument:solution',
                 wsa.payload ->> 'features/passportNumberDocument:solution',
                 wsa.payload ->> 'features/otherDocument:solution',
                 wsa.payload ->> 'features/bic:solution',
                 wsa.payload ->> 'features/gender:solution',
                 wsa.payload ->> 'features/nationalityCountry:solution',
                 wsa.payload ->> 'features/country:solution'

    - name: AI_REASONING
      type: production
      description: AI Reasoning (Alert Level)
      selectSqlQuery: >
        SELECT wa.name                                                 AS "S8 Alert ID",
               STRING_AGG(wm.payload ->> 'clientMatchId', ', ')        AS "Client Match IDs",
               wa.payload ->> 'policyId'                               AS "Policy ID",
               wa.payload ->> 'policyTitle'                            AS "Policy Name",
               STRING_AGG(wm.payload ->> 'stepId', ', ')               AS "Step IDs",
               STRING_AGG(wm.payload ->> 'stepTitle', ', ')            AS "Step Names",
               STRING_AGG(wm.payload ->> 'fvSignature', ', ')          AS "Reasoning Branch IDs",
               STRING_AGG(wm.payload ->> 'categories/hitType' , ', ')  AS "Watchlist Type",
               wa.payload ->> 's8Recommendation'                       AS "S8 Alert Resolution",
               wa.payload ->> 'recommendationDate'                     AS "S8 Resolution Timestamp",
               wa.payload ->> 'comment'                                AS "S8 Alert Reason"
        FROM warehouse_alert wa
          JOIN warehouse_match wm ON wa.id = wm.alert_id
        WHERE wa.recommendation_date BETWEEN TIMESTAMP '${from}' AND TIMESTAMP '${to}'
        GROUP BY wa.name,
                 wa.payload ->> 'policyId',
                 wa.payload ->> 'policyTitle',
                 wa.payload ->> 'categories/hitType',
                 wa.payload ->> 's8Recommendation',
                 wa.payload ->> 'recommendationDate',
                 wa.payload ->> 'comment'

    - name: AI_REASONING
      type: simulation
      description: AI Reasoning
      selectSqlQuery: >
        SELECT wa.name                                                 AS "S8 Alert ID",
               wm.payload ->> 'clientMatchId'                          AS "Client Match IDs",
               wsa.payload ->> 'match_reason:policy'                   AS "Policy ID",
               wsa.payload ->> 'match_reason:policy_title'             AS "Policy Name",
               wsa.payload ->> 'match_reason:step'                     AS "Step IDs",
               wsa.payload ->> 'match_reason:step_title'               AS "Step Names",
               wsa.payload ->> 'match_reason:feature_vector_signature' AS "Reasoning Branch IDs",
               wsa.payload ->> 'categories/hitType:value'              AS "Watchlist Type",
               wsa.payload ->> 'recommendation_recommended_action'     AS "S8 Alert Resolution",
               wsa.payload ->> 'recommendation_create_time'            AS "S8 Resolution Timestamp",
               wsa.payload ->> 'recommendation_comment'                AS "S8 Alert Reason"
        FROM warehouse_simulation_alert wsa
                 JOIN warehouse_alert wa ON wsa.name = wa.name
                 JOIN warehouse_match wm ON wa.id = wm.alert_id
        WHERE wsa.analysis_name = 'analysis/${analysisId}'

    - name: AI_REASONING_MATCH_LEVEL
      type: production
      description: AI Reasoning (Match Level)
      selectSqlQuery: >

        SELECT wa.name                             AS "S8 Alert ID",
               wm.payload ->> 'clientMatchId'      AS "Client Match ID",
               wa.payload ->> 'policyId'           AS "Policy ID",
               wa.payload ->> 'policyTitle'        AS "Policy Name",
               wm.payload ->> 'stepId'             AS "Step ID",
               wm.payload ->> 'stepTitle'          AS "Step Name",
               wm.payload ->> 'fvSignature'        AS "Reasoning Branch ID",
               wm.payload ->> 'categories/hitType' AS "Watchlist Type",
               wm.payload ->> 's8Recommendation'   AS "S8 Hit Resolution",
               wa.payload ->> 'recommendationDate' AS "S8 Resolution Timestamp",
               wm.payload ->> 's8Reason'           AS "S8 Hit Reason",
               wa.payload ->> 's8Recommendation'   AS "S8 Alert Resolution"
        FROM warehouse_alert wa
          JOIN warehouse_match wm ON wa.id = wm.alert_id
        WHERE wa.recommendation_date BETWEEN TIMESTAMP '${from}' AND TIMESTAMP '${to}'

    - name: AI_REASONING_MATCH_LEVEL
      type: simulation
      description: AI Reasoning (Match Level)
      selectSqlQuery: >
        SELECT wa.name                                                   AS "S8 Alert ID",
               wm.payload ->> 'clientMatchId'                            AS "Client Match ID",
               wsa.payload ->> 'match_reason:policy'                     AS "Policy ID",
               wsa.payload ->> 'match_reason:policy_title'               AS "Policy Name",
               wsa.payload ->> 'match_reason:step'                       AS "Step ID",
               wsa.payload ->> 'match_reason:step_title'                 AS "Step Name",
               wsa.payload ->> 'match_reason:feature_vector_signature'   AS "Reasoning Branch ID",
               wsa.payload ->> 'categories/hitType:value'                AS "Watchlist Type",
               wsa.payload ->> 'recommendation_recommended_action'       AS "S8 Hit Resolution",
               wsa.payload ->> 'recommendation_create_time'              AS "S8 Resolution Timestamp",
               wsa.payload ->> 'recommendation_comment'                  AS "S8 Match Reason",
               wsa.payload ->> 'recommendation_recommended_action'       AS "S8 Alert Resolution"
        FROM warehouse_simulation_alert wsa
                 JOIN warehouse_alert wa ON wsa.name = wa.name
                 JOIN warehouse_match wm ON wa.id = wm.alert_id
        WHERE wsa.analysis_name = 'analysis/${analysisId}'

    - name: ACCURACY
      type: production
      description: Accuracy (Alert Level)
      selectSqlQuery: >

        SELECT wa.name                                                AS "S8 Alert ID",
               STRING_AGG(wm.payload ->> 'clientMatchId', ', ')       AS "Client Match IDs",
               wa.payload ->> 'policy'                                AS "Policy ID",
               wa.payload ->> 'policyTitle'                           AS "Policy Name",
               STRING_AGG(wm.payload ->> 'step', ', ')                AS "Step IDs",
               STRING_AGG(wm.payload ->> 'stepTitle', ', ')           AS "Step Names",
               STRING_AGG(wm.payload ->> 'fvSignature', ', ')         AS "Reasoning Branch IDs",
               STRING_AGG(wm.payload ->> 'categories/hitType', ', ')  AS "Watchlist Type",
               wa.payload ->> 's8Recommendation'                      AS "S8 Alert Resolution",
               wa.payload ->> 'recommendationDate'                    AS "S8 Resolution Timestamp",
               wa.payload ->> 'comment'                               AS "S8 Alert Reason",
               wa.payload ->> 'analystDecision'                       AS "Analyst Decision",
               wa.payload ->> 'analystDecisionModifiedDateTime'       AS "Analyst Decision Timestamp",
               wa.payload ->> 'analystReason'                         AS "Analyst Reason"
        FROM warehouse_alert wa
          JOIN warehouse_match wm ON wa.id = wm.alert_id
        WHERE wa.recommendation_date BETWEEN TIMESTAMP '${from}' AND TIMESTAMP '${to}'
          AND wa.payload ->> 'analystDecision' != ''
        GROUP BY wa.name,
                 wa.payload ->> 'policy',
                 wa.payload ->> 'policyTitle',
                 wa.payload ->> 's8Recommendation',
                 wa.payload ->> 'recommendationDate',
                 wa.payload ->> 'comment',
                 wa.payload ->> 'analystDecision',
                 wa.payload ->> 'analystDecisionModifiedDateTime',
                 wa.payload ->> 'analystReason'

    - name: ACCURACY
      type: simulation
      description: Accuracy
      selectSqlQuery: >
        SELECT wa.name                                                 AS "S8 Alert ID",
               wm.payload ->> 'clientMatchId'                          AS "Client Match IDs",
               wsa.payload ->> 'match_reason:policy'                   AS "Policy ID",
               wsa.payload ->> 'match_reason:policy_title'             AS "Policy Name",
               wsa.payload ->> 'match_reason:step'                     AS "Step IDs",
               wsa.payload ->> 'match_reason:step_title'               AS "Step Names",
               wsa.payload ->> 'match_reason:feature_vector_signature' AS "Reasoning Branch IDs",
               wsa.payload ->> 'categories/hitType:value'              AS "Watchlist Type",
               wsa.payload ->> 'recommendation_recommended_action'     AS "S8 Alert Resolution",
               wsa.payload ->> 'recommendation_create_time'            AS "S8 Resolution Timestamp",
               wsa.payload ->> 'recommendation_comment'                AS "S8 Alert Reason",
               wa.payload ->> 'analystDecision'                        AS "Analyst Decision",
               wa.payload ->> 'analystDecisionModifiedDateTime'        AS "Analyst Decision Timestamp",
               wa.payload ->> 'analystReason'                          AS "Analyst Reason"
        FROM warehouse_simulation_alert wsa
                 JOIN warehouse_alert wa ON wsa.name = wa.name
                 JOIN warehouse_match wm ON wa.id = wm.alert_id
        WHERE wsa.analysis_name = 'analysis/${analysisId}'
          AND wa.payload ->> 'analyst_decision' IN ('ANALYST_FALSE_POSITIVE', 'ANALYST_TRUE_POSITIVE')
