plugins {
  id 'java'
  id 'java-library'
  id 'idea'
  id 'groovy'
  id 'maven-publish'
  id 'org.springframework.boot' version '2.3.8.RELEASE'
  id 'nebula.resolution-rules' version '9.0.0'
  id 'com.silenteight.gradle.convention' version '1.20.3'
  id 'com.silenteight.gradle.release' version '1.2.0'
  id 'com.silenteight.gradle.wrapper' version '1.0.25'
  id 'org.sonarqube' version '2.8'
  id 'com.google.cloud.tools.jib' version '2.4.0'
  id 'io.freefair.aspectj' version '5.0.1'
}

projectSetup {
  javaVersion = JavaVersion.VERSION_11
}

ext {
  gradleScriptDir = "${rootProject.projectDir}/gradle/scripts"
}

apply from: "${gradleScriptDir}/dependencies.gradle"
apply from: "${gradleScriptDir}/resolutionRules.gradle"

configurations {
  implementation.extendsFrom starterCommon
  implementation.extendsFrom starterGrpc
  implementation.extendsFrom starterSpringApp
  implementation.extendsFrom starterMessaging

  implementation.extendsFrom starterDatabase
  runtimeOnly.extendsFrom starterDatabaseRuntime

  testImplementation.extendsFrom starterSpringTest
  testImplementation.extendsFrom starterSpockTest
}

dependencies {
  implementation libraries.silenteight_spring_cloud_consul_discovery
  implementation libraries.spring_cloud_starter_consul_config

  implementation libraries.commons_lang3

  implementation libraries.spring_batch_core
  implementation libraries.spring_batch_infrastructure

  implementation libraries.spring_boot_starter_quartz

  implementation libraries.oracle

  implementation libraries.protobuf_java_util
  implementation libraries.grpc_stub
  implementation libraries.reactor_grpc_stub

  implementation libraries.reactor_core
  implementation libraries.reactor_rabbitmq

  implementation libraries.jaxb_api
  annotationProcessor libraries.spring_boot_configuration_processor

  api libraries.silenteight_sep_base_common
  api libraries.silenteight_serp_protocol_base

  testImplementation libraries.awaitility
  testImplementation libraries.spring_batch_test
  testImplementation libraries.spock_spring

  aspect libraries.silenteight_sep_base_aspects
}

jar {
  manifest {
    attributes "Main-Class": "com.silenteight.serp.universalbridge.CustomerBridgeApplication"
  }
}

jib {
  from {
    // NOTE(ahaczewski): Use debug version of the image for SNAPSHOT builds.
    def imageSuffix = "$version".endsWith("-SNAPSHOT") ? "-debug" : ""
    image = "gcr.io/distroless/java-debian10:11" + imageSuffix
  }
  to {
    image = "docker.repo.silenteight.com/serp/${project.name}:${version}"
    if (!"$version".endsWith("-SNAPSHOT"))
      tags = ["latest"]
  }
  container {
    appRoot = "/silenteight/app"
    environment = [
        "SERP_CONSUL_HOST"      : "consul",
        "SERP_CONSUL_PORT"      : "8500",
        "SERP_DB_HOST"          : "postgres",
        "SERP_DB_PORT"          : "5432",
        "SERP_DB_NAME"          : "serp",
        "SERP_DB_USER"          : "serp",
        "SERP_DB_PASSWORD"      : "serp",
        "SERP_RABBITMQ_HOST"    : "rabbitmq",
        "SERP_RABBITMQ_PORT"    : "5672",
        "SERP_RABBITMQ_USER"    : "serp",
        "SERP_RABBITMQ_PASSWORD": "serp",
        "SERP_RABBITMQ_VHOST"   : "/",
        "TRUSTSTORE_PATH"       : "/silenteight/cert/truststore.p12",
        "TRUSTSTORE_PASSWORD"   : "LZKH70td5n",
    ]
    jvmFlags = [
        "-XX:MaxRAMPercentage=75",
        "-Dfile.encoding=UTF-8",
        "-Dsun.jnu.encoding=UTF-8",
        "-Djava.net.preferIPv4Stack=true",
        "-Djava.io.tmpdir=/tmp",
        "-Dserp.home=/silenteight",
        "-Dserver.port=8080",
        "-Dgrpc.server.port=8081"
    ]
    ports = ["8080", "8081"]
    user = "nonroot"
    volumes = ["/silenteight/cert", "/silenteight/plugin"]
    workingDirectory = "/silenteight"
  }
}

aspectj {
  version = libraries.aspectjtools.version
}

configure(this) {
  generateClassPathInManifest(project)
}

static def generateClassPathInManifest(Project project) {
  // Generates Class-Path in .jar manifest
  project.tasks.named(JavaPlugin.JAR_TASK_NAME).configure {Jar jar ->
    jar.doFirst {
      jar.manifest {
        def runtimeClasspath = project.configurations.runtimeClasspath

        if (!runtimeClasspath.isEmpty()) {
          def classPathJars = runtimeClasspath.collect {it.getName()}.join(" ")

          attributes "Class-Path": classPathJars
        }
      }
    }
  }
}
