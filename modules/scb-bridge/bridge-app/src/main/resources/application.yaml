server:
  port: 24220
grpc:
  client:
    registration:
      address: static://localhost:24806
      negotiation-type: PLAINTEXT
    universal-data-source:
      address: static://localhost:24805
      negotiation-type: PLAINTEXT
  server:
    port: 24221

management:
  endpoints:
    web:
      exposure:
        include: health,info,prometheus

spring:
  cloud:
    consul:
      config:
        enabled: false
      enabled: false
      host: localhost
      port: 8500
      discovery:
        enabled: true
        register: false
        register-health-check: false
      service-registry:
        auto-registration:
          enabled: false
  # RABBITMQ
  rabbitmq:
    port: 24130
    username: serp
    password: serp
    listener:
      simple:
        max-concurrency: 10
        prefetch: 500
        acknowledge-mode: auto
  batch:
    job:
      enabled: false
    jdbc:
      initialize-schema: never

  datasource:
    password: scb
    username: scb
    url: jdbc:postgresql://localhost:24291/scb_bridge

  jpa:
    database: POSTGRESQL
    show-sql: false
    open-in-view: false

    hibernate:
      ddl-auto: none
      use-new-id-generator-mappings: true

    properties:
      hibernate:
        jdbc:
          fetch_size: 10
          batch_size: 10
        order_inserts: true
        order_updates: true

  application:
    name: scb-bridge

  quartz:
    properties:
      org:
        quartz:
          scheduler:
            instanceName: ScbBridgeScheduler

    jdbc:
      initialize-schema: never
    job-store-type: memory

  external:
    datasource:
      password: ${serp.gns.db.password}
      username: ${serp.gns.db.user}
      url: ${serp.gns.db.url}
      hikari:
        auto-commit: ${serp.gns.db.auto-commit}
        isolate-internal-queries: ${serp.gns.db.isolate-internal-queries}
        maximum-pool-size: ${serp.gns.db.connections.max:${serp.db.connections.max}}
        connection-init-sql: ${serp.gns.db.connection-init-query}
        minimum-idle: ${serp.gns.db.connections.min:${serp.db.connections.min}}
        pool-name: GNS-Pool

      hikari-on-demand:
        minimum-idle: ${serp.gns.db.connections.on-demand.min:${serp.db.connections.min}}
        isolate-internal-queries: ${serp.gns.db.isolate-internal-queries}
        connection-init-sql: ${serp.gns.db.connection-init-query}
        auto-commit: ${serp.gns.db.auto-commit}
        maximum-pool-size: ${serp.gns.db.connections.on-demand.max:${serp.db.connections.max}}
        pool-name: GNS-On-Demand-Pool

silenteight:
  scb-bridge:
    learning:
      alert:
        enabled: false
      ecm:
        enabled: false
    grpc:
      recommendation:
        recommendation-deadline: 1m
      registration:
        registration-deadline: 1m
      universal-data-source:
        uds-deadline: 1m
    categories:
      - name: categories/apType
        allowed-values:
          - I
          - C
        display-name: Alerted Party Type
        category-type: ENUMERATED
      - name: categories/isDeny
        allowed-values:
          - 'YES'
          - 'NO'
        display-name: IsDeny
        category-type: ENUMERATED
serp:
  # GNS DB Configuration
  gns:
    db:
      password: 'CyevM34juNlBO'
      connection-init-query: SELECT 1 FROM DUAL
      auto-commit: false
      url: jdbc:oracle:thin:@${serp.gns.db.host}:${serp.gns.db.port}/${serp.gns.db.service.name}
      service:
        name: ORCLCDB
      user: LC_GNS_WEB_SIT_01
      port: 1521
      host: oracle.silenteight.com
      isolate-internal-queries: true
      connections:
        min: 1
        max: 30
        on-demand:
          max: 20
          min: 1

  # General Settings
  scb:
    bridge:
      config:
        time-zone: Asia/Hong_Kong
        chunk-size: 250
        query-timeout: 300
      alert:
        cleaner:
          offset: 1D
          cron-expression: 0 0 0 * * ?
        reader:
          solvedAlertsProcessingEnabled: false
      gns:
        solution:
          states:
            ANALYST_NO_SOLUTION: [ 0 ]
      cbs:
        config:
          ack-function-name: CBS_INTERFACE_PKG.F_CBS_S8_LOG_ACK
          recom-function-name: CBS_INTERFACE_PKG.F_CBS_S8_LOG_RECOM
        recommendation:
          recommendation-values:
            - ACTION_INVESTIGATE: Manual Investigation
            - ACTION_INVESTIGATE_HINTED_FALSE_POSITIVE: Manual Investigation
            - ACTION_INVESTIGATE_PARTIALLY_FALSE_POSITIVE: Manual Investigation
            - ACTION_INVESTIGATE_HINTED_TRUE_POSITIVE: Manual Investigation
            - ACTION_FALSE_POSITIVE: False Positive
            - ACTION_POTENTIAL_TRUE_POSITIVE: Potential True Positive

# AMQP
amqp:
  ingest:
    incoming:
      batch-processing:
        exchange-name: batch-processing-exchange
        queue-name: batch-processing-queue
  feeding:
    outgoing:
      match-feature-input-set-fed:
        exchange-name: match-feature-input-set-fed-exchange

  output-recommendation:
    number-of-retries-dead-messages: 2
    incoming:
      notify-batch-completed:
        exchange-name: core-bridge.notify-batch-completed-exchange
        queue-name: scb-bridge.notify-batch-completed-queue
        dead-letter-queue-name: scb-bridge.notify-batch-completed.dlq
        dead-letter-queue-time-to-live-in-milliseconds: 30000
        dead-letter-exchange-name: scb-bridge.notify-batch-completed.dlx
      batch-error:
        exchange-name: core-bridge.notify-batch-error-exchange
        queue-name: scb-bridge.notify-batch-error-queue
        dead-letter-queue-name: scb-bridge.notify-batch-error.dlq
        dead-letter-queue-time-to-live-in-milliseconds: 30000
        dead-letter-exchange-name: scb-bridge.notify-batch-error.dlx
    outgoing:
      recommendation-delivered:
        exchange-name: core-bridge.recommendation-delivered-exchange
