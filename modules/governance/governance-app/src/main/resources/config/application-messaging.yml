####################################################################################################
# Defaults (overridden by environment variables or arguments)
####################################################################################################

serp.rabbitmq.encryption.enabled: false
serp.rabbitmq.encryption.key.seed: change_me_please
serp.rabbitmq.encryption.key.salt: change_me_please
serp.rabbitmq.encryption.key.size: 256
serp.rabbitmq.encryption.mac.size: 112
serp.rabbitmq.encryption.nonce.size: 96
serp.rabbitmq.encryption.nonce.header: encryption-nonce

####################################################################################################
# CONFIGURATION
####################################################################################################

spring:
  rabbitmq:
    # virtual-host:
    # addresses: ${serp.rabbitmq.addresses}
    host: ${serp.rabbitmq.host}
    port: ${serp.rabbitmq.port}
    username: ${serp.rabbitmq.user}
    password: ${serp.rabbitmq.password}
    virtual-host: ${serp.rabbitmq.vhost}
    ssl:
      enabled: false
    listener:
      type: simple
      direct:
        consumers-per-queue: ${serp.messaging.concurrency}
        prefetch: ${serp.messaging.prefetch}
      simple:
        concurrency: 1
        max-concurrency: ${serp.messaging.concurrency}
        prefetch: ${serp.messaging.prefetch}

# Spring Integration
integration:
  start-delay-seconds: 15
  poll-period-millis: 1000

serp:
  rabbitmq:
    host: localhost
    port: 24130
    user: governance
    password: governance
    vhost: /

  messaging:
    concurrency: 4
    prefetch: 25
    encryption:
      enabled: ${serp.rabbitmq.encryption.enabled}
      key-seed: ${serp.rabbitmq.encryption.key.seed}
      salt: ${serp.rabbitmq.encryption.key.salt}
      key-size-in-bits: ${serp.rabbitmq.encryption.key.size}
      mac-size-in-bits: ${serp.rabbitmq.encryption.mac.size}
      nonce-size-in-bits: ${serp.rabbitmq.encryption.nonce.size}
      nonce-header: ${serp.rabbitmq.encryption.nonce.header}

  governance:
    messaging:
      exchange:
        analytics: feature-vector
        model: gov.model
        notification: notification
        solution-discrepancy: learning
      broker:
        analytics:
          queue-name: governance.analytics
          routing-key: feature-vector.solved
        ingest:
          queue-name: gov.feature-vector.ingest
          routing-key: command.index-request.production
        model-export:
          routing-key: event.model-promoted.production
        model-in-use:
          routing-key: event.model-in-use.production
        qa-retention-personal-information-expired:
          queue-name: gov.retention.personal-information-expired
          routing-key: retention.personal-information-expired
        qa-retention-alerts-expired:
          queue-name: gov.retention.alerts-expired
          routing-key: retention.personal-information-expired
        notification:
          queue-name: notifier.incoming-event
          routing-key: notification.*
        notification-send-mail:
          queue-name: notifier.send-mail
          routing-key: notifier.send-mail
        solution-discrepancy:
          queue-name: governance.solution-discrepancy
          routing-key: learning.discrepancy-detected
        to-remove:
          bindings: []

    feature-vector:
      integration:
        request:
          exchange-name: ${serp.governance.messaging.exchange.analytics}
          routing-key: ${serp.governance.messaging.broker.analytics.routing-key}
        receive:
          queue-name: ${serp.governance.messaging.broker.analytics.queue-name}

    ingest:
      integration:
        receive:
          queue-name: ${serp.governance.messaging.broker.ingest.queue-name}

    model:
      export:
        integration:
          request:
            exchange: ${serp.governance.messaging.exchange.model}
            routingKey: ${serp.governance.messaging.broker.model-export.routing-key}
      send-in-use:
        integration:
          request:
            exchange: ${serp.governance.messaging.exchange.model}
            routingKey: ${serp.governance.messaging.broker.model-export.routing-key}

    qa:
      integration:
        request:
          exchange: gov.event
          routingKey: event.qa-alert
      retention:
        personal-information-expired:
          integration:
            receive:
              queue-name: ${serp.governance.messaging.broker.qa-retention-personal-information-expired.queue-name}
        alerts-expired:
          integration:
            receive:
              queue-name: ${serp.governance.messaging.broker.qa-retention-alerts-expired.queue-name}