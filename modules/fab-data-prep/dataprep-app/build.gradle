plugins {
  id "java"
  id "groovy"
  id "org.springframework.boot" version "2.6.6"
  id "com.google.cloud.tools.jib"
}

description = "dataprep-app"

apply from: "${rootProject.projectDir}/gradle/scripts/dependencies.gradle"

dependencies {
  implementation project(':dataprep-learning')

  implementation libraries.silenteight_fab_cmapi_connector_api
  implementation libraries.universal_datasource_api_library
  implementation libraries.data_source_agentinput_api
  implementation libraries.data_source_categories_api
  implementation libraries.data_source_api
  implementation libraries.registration_api_proto
  implementation libraries.registration_lib
  implementation libraries.grpc_client_spring_boot_starter
  implementation libraries.vavr
  implementation libraries.json_path
  implementation libraries.jackson_csv

  // Sentry
  implementation libraries.sentry
  runtimeOnly libraries.sentry_spring_boot_starter
  runtimeOnly libraries.sentry_logback

  runtimeOnly libraries.hibernate_validator
  runtimeOnly libraries.spring_boot_starter_undertow
  runtimeOnly libraries.spring_boot_starter_actuator
  runtimeOnly libraries.grpc_brave_instrumentation
  runtimeOnly libraries.spring_cloud_starter_sleuth
  runtimeOnly libraries.spring_cloud_consul_discovery
  runtimeOnly libraries.spring_cloud_starter_consul_config

  testImplementation project(':dataprep-test-fixtures')
  testImplementation libraries.jsonassert
  testRuntimeOnly libraries.junit_jupiter_engine
}

jar {
  manifest {
    attributes "Main-Class": "com.silenteight.fab.dataprep.FabDataPreparationApplication"
  }
}

publishing {
  publications {
    bootJava(MavenPublication) {
      artifact bootJar
    }
  }
}

jib {
  from {
    // NOTE(ahaczewski): Use debug version of the image for SNAPSHOT builds.
    def imageTag = "$version".endsWith("-SNAPSHOT") ? "debug-nonroot" : "nonroot"
    image = "gcr.io/distroless/java11-debian11:" + imageTag
  }
  to {
    image = "docker.repo.silenteight.com/dataprep/${project.name}:${version}"
    if ("$version".contains("-BUILD") || "$version".endsWith("-SNAPSHOT")) {
      tags = ["snapshot"]
    } else {
      tags = ["latest"]
    }
  }
  container {
    jvmFlags = [
        "-XX:MaxRAMPercentage=75",
        "-Dfile.encoding=UTF-8",
        "-Dsun.jnu.encoding=UTF-8",
        "-Djava.net.preferIPv4Stack=true",
        "-Djava.io.tmpdir=/tmp"
    ]
    user = "nonroot"
    workingDirectory = "/silenteight"
  }
}
