dataprep:
  #-------------------------------------------------------------------------------------------------
  # DATABASE
  #-------------------------------------------------------------------------------------------------
  db:
    host: localhost
    port: 5432
    schema: public
    name: dataprep
    username: dataprep
    password: dataprep

serp.show-env: true

server:
  port: 8082
  servlet:
    context-path: /rest/${spring.application.name}

#TODO: Without that SilentEightImplicitNamingStrategy throws error
spring:
  application:
    name: dataprep

  ### RABBITMQ
  rabbitmq:
    username: dev
    password: dev
    listener:
      type: simple
      simple:
        retry:
          enabled: true
          initial-interval: ${dataprep.rabbitmq.retry.initial-interval:3000}
          max-attempts: 3
          max-interval: 10000
          multiplier: ${dataprep.rabbitmq.retry.multiplier:1.5}

  ### Spring Cloud
  cloud:
    consul:
      enabled: false
      config:
        enabled: false

  ### DATABASE
  datasource:
    # Postgres database
    type: com.zaxxer.hikari.HikariDataSource
    url: jdbc:postgresql://${dataprep.db.host}:${dataprep.db.port}/${dataprep.db.name}?currentSchema=${dataprep.db.schema:public}
    username: ${dataprep.db.username}
    password: ${dataprep.db.password}

    # Hikari pool configuration
    hikari:
      pool-name: Database-Pool
      minimum-idle: ${dataprep.db.connections.min:1}
      maximum-pool-size: ${dataprep.db.connections.max:25}
      auto-commit: false
      schema: ${dataprep.db.schema:public}
      isolate-internal-queries: true
      # NOTE(ahaczewski): Forces HikariCP to commit the transaction after opening fresh connection.
      #  Without it, the connection transaction is left in OPEN state instead of IDLE, because
      #  just before HikariCP runs `SET SESSION sftcc.h_path TO '${ae.db.schema}'` which begins
      #  transaction. Thus, with that query as workaround, we force the transaction commit.
      connection-init-sql: SELECT 1
      data-source-properties:
        ApplicationName: Firco Trust CMAPI Connector
        reWriteBatchedInserts: true

  # Database migrations
  liquibase:
    change-log: classpath:/db/changelog/db.changelog-master.xml
    default-schema: ${dataprep.db.schema:public}
    contexts: default

  # Spring Data JPA
  jpa:
    database: POSTGRESQL
    show-sql: false
    open-in-view: false
    database-platform: com.silenteight.sep.base.common.support.hibernate.FixedPostgreSql95Dialect

    hibernate:
      ddl-auto: none
      use-new-id-generator-mappings: true

    properties:
      hibernate.cache.use_query_cache: false
      hibernate.connection.handling_mode: DELAYED_ACQUISITION_AND_HOLD
      hibernate.connection.provider_disables_autocommit: true
      hibernate.generate_statistics: false
      hibernate.id.optimizer.pooled.preferred: pooled-lo
      hibernate.jdbc.batch_size: 2048
      hibernate.jdbc.lob.non_contextual_creation: true
      hibernate.jdbc.use_get_generated_keys: true
      hibernate.jdbc.time_zone: UTC
      hibernate.temp.use_jdbc_metadata_defaults: false
      hibernate.order_inserts: true
      hibernate.order_updates: true

amqp:
  dataprep:
    incoming:
      alert-message:
        queue-name: alert-message-queue
        binding-key: alert.message
    outgoing:
      match-feature-input-set-fed:
        exchange-name: bridge.match-feature-input-set-fed-exchange

grpc:
  client:
    registration:
      address: static://localhost:24804
      deadline: 1m
    universal-data-source:
      address: static://localhost:24805
      deadline: 1m
    cm-api-connector:
      address: static://localhost:8081
      deadline: 1m
    category:
      address: static://localhost:24807
      deadline: 1m
    category-value:
      address: static://localhost:24808
      deadline: 1m
    GLOBAL:
      negotiation-type: PLAINTEXT

# Management HTTP server
management:
  health:
    mail:
      enabled: false
  info:
    git:
      mode: simple
  endpoint:
    health:
      show-details: always
      probes:
        enabled: true

  endpoints:
    web:
      base-path: /management
      exposure:
        include: [ "health", "info", "metrics", "prometheus", "loggers" ]
    jmx:
      exposure:
        exclude: "*"
  metrics:
    tags:
      application: ${spring.application.name}

#Sentry
sentry:
  dsn:
  environment: unknown
  traces-sample-rate: 0.0

feeding:
  features:
    gender-feature.enabled: true
    country-feature.enabled: true
    name-feature.enabled: true
    date-feature.enabled: true
    nationality-feature.enabled: true
    passport-feature.enabled: true
    bic-feature.enabled: true
    document-number-feature.enabled: true
    national-id-feature.enabled: true
  categories:
    hitType:
      enabled: true
      displayName: Risk Type
      categoryType: ENUMERATED
      allowedValues: ["SAN", "OTHER", "NO_DATA"]
      multiValue: false
    customerType:
      enabled: true
      displayName: Customer Type
      categoryType: ENUMERATED
      allowedValues: ["I", "C", "NO_DATA", "DATA_SOURCE_ERROR"]
      multiValue: false

  alert.state:
    analystDecisions:
      SOLVED_FALSE_POSITIVE: "analyst_decision_false_positive"
      SOLVED_TRUE_POSITIVE: "analyst_decision_true_positive"

  learning.dataRetentionDuration: 3m