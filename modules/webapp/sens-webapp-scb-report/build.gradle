import com.github.jengelman.gradle.plugins.shadow.transformers.PropertiesFileTransformer

plugins {
  id "com.silenteight.iris.build.java-library"
  //TODO probably remove see https://silenteight.slack.com/archives/CQJC6T3ST/p1650969734375289
  id 'com.github.johnrengelman.shadow' version '7.1.2'
  id 'maven-publish'
}

description = "SENS WebApp SCB Report"

configurations {
  pluginJar
}

// Use pluginJar configuration to define dependencies which should be included inside plugin JAR
dependencies {
  implementation libs.silenteight.sep.usermanagement.api
  implementation libs.bouncycastle.bcprov
  implementation libs.commons.lang3

  implementation libs.spring.boot.starter.actuator

  implementation libs.spring.boot.starter.web

  implementation libs.spring.security.web
  implementation libs.spring.security.config
  implementation libs.spring.security.cas

  implementation libs.hibernate.envers

  implementation project(":sens-webapp-backend")
  implementation project(":sens-webapp-common")
  implementation project(":sens-webapp-db-changelog")
  implementation project(":sens-webapp-logging")
  implementation project(":sens-webapp-report")
  implementation project(":sens-webapp-user")

  implementation libs.silenteight.audit.bs

  implementation libs.springdoc.ui
  implementation libs.springdoc.data.rest
  implementation libs.springdoc.security

  implementation libs.spring.cloud.starter.consul.config
  implementation libs.freemarker

  implementation libs.protobuf.java.util

  implementation doNotUseLibs.vavr
  implementation libs.cronutils

  testImplementation project(":sens-webapp-db-changelog")
  testImplementation libs.rest.assured
  testImplementation libs.rest.assured.spring.mock.mvc
}

shadowJar {
  archiveClassifier = 'plugin'

  mergeServiceFiles()

  append "META-INF/spring.handlers"
  append "META-INF/spring.schemas"

  configurations = [project.configurations.pluginJar]

  transform(PropertiesFileTransformer) {
    paths = ["META-INF/spring.factories"]
    mergeStrategy = "append"
  }
}

tasks.register("makePlugin", Copy).configure {
  from shadowJar
  into "$rootProject.projectDir/plugin/webapp"
}

tasks.register("deletePlugin", Delete).configure {
  delete fileTree("${rootProject.projectDir}/plugin/webapp") {
    include "$project.name-*.jar"
  }
}

tasks.named(JavaBasePlugin.BUILD_TASK_NAME).configure {
  dependsOn tasks.named("makePlugin")
}

tasks.named(BasePlugin.CLEAN_TASK_NAME).configure {
  dependsOn tasks.named("deletePlugin")
}

publishing {
  publications {
    shadow(MavenPublication) {publication ->
      from project.shadow.component(publication)
    }
  }
}
