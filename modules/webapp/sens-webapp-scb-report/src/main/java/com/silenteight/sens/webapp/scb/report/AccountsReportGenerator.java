package com.silenteight.sens.webapp.scb.report;

import lombok.NonNull;
import lombok.Value;
import lombok.extern.slf4j.Slf4j;

import com.silenteight.sens.webapp.common.support.csv.CsvBuilder;
import com.silenteight.sens.webapp.common.support.csv.LinesSupplier;
import com.silenteight.sens.webapp.report.AbstractConfigurableReport;
import com.silenteight.sens.webapp.report.Report;
import com.silenteight.sens.webapp.report.ReportGenerator;
import com.silenteight.sens.webapp.report.ReportProperties;
import com.silenteight.sep.base.common.time.DateFormatter;
import com.silenteight.sep.base.common.time.TimeSource;
import com.silenteight.sep.usermanagement.api.user.UserQuery;
import com.silenteight.sep.usermanagement.api.user.dto.UserDto;

import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Stream;

import static com.silenteight.sens.webapp.scb.report.ReportColumns.*;
import static java.util.stream.Collectors.toList;
import static java.util.stream.Stream.concat;
import static java.util.stream.Stream.of;

@Slf4j
class AccountsReportGenerator extends AbstractConfigurableReport implements ReportGenerator {

  private static final String REPORT_NAME = "accounts-report";
  private static final String FILE_NAME = REPORT_NAME + ".csv";

  @NonNull
  private final UserQuery userQuery;

  @NonNull
  private final TimeSource timeSource;

  @NonNull
  private final DateFormatter timeFormatter;

  @NonNull
  private final String rolesScope;

  protected AccountsReportGenerator(
      @NonNull UserQuery userQuery,
      @NonNull TimeSource timeSource,
      @NonNull DateFormatter timeFormatter,
      @NonNull String rolesScope,
      @NonNull ReportProperties reportProperties) {
    super(reportProperties);
    this.userQuery = userQuery;
    this.timeSource = timeSource;
    this.timeFormatter = timeFormatter;
    this.rolesScope = rolesScope;
  }

  @Override
  public String getName() {
    return REPORT_NAME;
  }

  @Override
  public Report generateReport(Map<String, String> parameters) {
    log.debug("Generating Accounts Report with parameters={}", parameters);

    return new AccountsReport(FILE_NAME, getReportData());
  }

  private LinesSupplier getReportData() {
    List<ReportUserDto> users = getUsersDto();
    String date = timeFormatter.format(timeSource.now());
    String reportHeader = ReportHeaderTemplate.getHeader(date, users.size());
    return () -> concat(of(reportHeader), buildReportData(users));
  }

  private List<ReportUserDto> getUsersDto() {
    return userQuery
        .listAll(Set.of(rolesScope))
        .stream()
        .flatMap(this::getUserDto)
        .collect(toList());
  }

  private Stream<ReportUserDto> getUserDto(UserDto user) {
    return user
        .getRoles()
        .getSortedRoles(rolesScope)
        .stream()
        .map(role -> new ReportUserDto(user, role, timeFormatter));
  }

  private static Stream<String> buildReportData(List<ReportUserDto> usersToReport) {
    return of(new CsvBuilder<>(usersToReport.stream())
        .cell(APPLICATION_NAME, a -> APPLICATION_NAME_VALUE)
        .cell(ACCOUNT_OWNER, ReportUserDto::getUserName)
        .cell(ACCOUNT_NAME, ReportUserDto::getUserName)
        .cell(ACCOUNT_TYPE, ReportUserDto::getAccountType)
        .cell(ACCOUNT_STATUS, ReportUserDto::getAccountStatus)
        .cell(IS_PRIVILEGED, ReportUserDto::isPrivileged)
        .cell(ACCOUNT_DESCRIPTION, ReportUserDto::getAccountDescription)
        .cell(CREATED_DATE, ReportUserDto::getCreatedAt)
        .cell(LAST_LOGIN, ReportUserDto::getLastLoginAt)
        .cell(EXPIRY_DATE, a -> "")
        .cell(ENTITLEMENT_NAME, ReportUserDto::getRole)
        .build());
  }

  private static class ReportHeaderTemplate {

    private static final String HEADER =
        "Application Name,Surveillance Optimization,,,,,,,,,%n"
            + "Report Generated By,System,,,,,,,,,%n"
            + "Run Date,%s,,,,,,,,,%n"
            + "Number of data records,%d,,,,,,,,,%n";

    static String getHeader(String date, int count) {
      return String.format(HEADER, date, count);
    }
  }

  @Value
  private static class AccountsReport implements Report {

    String reportFileName;
    LinesSupplier reportContent;
  }
}
