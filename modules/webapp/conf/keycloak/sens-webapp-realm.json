{
  "accessCodeLifespan": 60,
  "accessCodeLifespanLogin": 1800,
  "accessCodeLifespanUserAction": 300,
  "accessTokenLifespan": 300,
  "accessTokenLifespanForImplicitFlow": 900,
  "actionTokenGeneratedByAdminLifespan": 43200,
  "actionTokenGeneratedByUserLifespan": 300,
  "adminEventsDetailsEnabled": false,
  "adminEventsEnabled": true,
  "attributes": {
    "_browser_header.contentSecurityPolicy": "frame-src 'self'; frame-ancestors 'self'; object-src 'none';",
    "_browser_header.contentSecurityPolicyReportOnly": "",
    "_browser_header.strictTransportSecurity": "max-age=31536000; includeSubDomains",
    "_browser_header.xContentTypeOptions": "nosniff",
    "_browser_header.xFrameOptions": "SAMEORIGIN",
    "_browser_header.xRobotsTag": "none",
    "_browser_header.xXSSProtection": "1; mode=block",
    "actionTokenGeneratedByAdminLifespan": "43200",
    "actionTokenGeneratedByUserLifespan": "300",
    "bruteForceProtected": "false",
    "displayName": "SENS",
    "displayNameHtml": "<h1>Silent Eight Name Screening</h1>",
    "failureFactor": "30",
    "maxDeltaTimeSeconds": "43200",
    "maxFailureWaitSeconds": "900",
    "minimumQuickLoginWaitSeconds": "60",
    "offlineSessionMaxLifespan": "5184000",
    "offlineSessionMaxLifespanEnabled": "false",
    "permanentLockout": "false",
    "quickLoginCheckMilliSeconds": "1000",
    "waitIncrementSeconds": "60",
    "webAuthnPolicyAttestationConveyancePreference": "not specified",
    "webAuthnPolicyAuthenticatorAttachment": "not specified",
    "webAuthnPolicyAvoidSameAuthenticatorRegister": "false",
    "webAuthnPolicyCreateTimeout": "0",
    "webAuthnPolicyRequireResidentKey": "not specified",
    "webAuthnPolicyRpEntityName": "keycloak",
    "webAuthnPolicyRpId": "",
    "webAuthnPolicySignatureAlgorithms": "ES256",
    "webAuthnPolicyUserVerificationRequirement": "not specified"
  },
  "authenticationFlows": [
    {
      "alias": "Account verification options",
      "authenticationExecutions": [
        {
          "authenticator": "idp-email-verification",
          "autheticatorFlow": false,
          "priority": 10,
          "requirement": "ALTERNATIVE",
          "userSetupAllowed": false
        },
        {
          "autheticatorFlow": true,
          "flowAlias": "Verify Existing Account by Re-authentication",
          "priority": 20,
          "requirement": "ALTERNATIVE",
          "userSetupAllowed": false
        }
      ],
      "builtIn": true,
      "description": "Method with which to verity the existing account",
      "providerId": "basic-flow",
      "topLevel": false
    },
    {
      "alias": "Authentication Options",
      "authenticationExecutions": [
        {
          "authenticator": "auth-spnego",
          "autheticatorFlow": false,
          "priority": 30,
          "requirement": "DISABLED",
          "userSetupAllowed": false
        },
        {
          "authenticator": "basic-auth",
          "autheticatorFlow": false,
          "priority": 10,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        },
        {
          "authenticator": "basic-auth-otp",
          "autheticatorFlow": false,
          "priority": 20,
          "requirement": "DISABLED",
          "userSetupAllowed": false
        }
      ],
      "builtIn": true,
      "description": "Authentication options.",
      "providerId": "basic-flow",
      "topLevel": false
    },
    {
      "alias": "Browser - Conditional OTP",
      "authenticationExecutions": [
        {
          "authenticator": "auth-otp-form",
          "autheticatorFlow": false,
          "priority": 20,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        },
        {
          "authenticator": "conditional-user-configured",
          "autheticatorFlow": false,
          "priority": 10,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        }
      ],
      "builtIn": true,
      "description": "Flow to determine if the OTP is required for the authentication",
      "providerId": "basic-flow",
      "topLevel": false
    },
    {
      "alias": "Direct Grant - Conditional OTP",
      "authenticationExecutions": [
        {
          "authenticator": "conditional-user-configured",
          "autheticatorFlow": false,
          "priority": 10,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        },
        {
          "authenticator": "direct-grant-validate-otp",
          "autheticatorFlow": false,
          "priority": 20,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        }
      ],
      "builtIn": true,
      "description": "Flow to determine if the OTP is required for the authentication",
      "providerId": "basic-flow",
      "topLevel": false
    },
    {
      "alias": "First broker login - Conditional OTP",
      "authenticationExecutions": [
        {
          "authenticator": "auth-otp-form",
          "autheticatorFlow": false,
          "priority": 20,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        },
        {
          "authenticator": "conditional-user-configured",
          "autheticatorFlow": false,
          "priority": 10,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        }
      ],
      "builtIn": true,
      "description": "Flow to determine if the OTP is required for the authentication",
      "providerId": "basic-flow",
      "topLevel": false
    },
    {
      "alias": "Handle Existing Account",
      "authenticationExecutions": [
        {
          "authenticator": "idp-confirm-link",
          "autheticatorFlow": false,
          "priority": 10,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        },
        {
          "autheticatorFlow": true,
          "flowAlias": "Account verification options",
          "priority": 20,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        }
      ],
      "builtIn": true,
      "description": "Handle what to do if there is existing account with same email/username like authenticated identity provider",
      "providerId": "basic-flow",
      "topLevel": false
    },
    {
      "alias": "Reset - Conditional OTP",
      "authenticationExecutions": [
        {
          "authenticator": "conditional-user-configured",
          "autheticatorFlow": false,
          "priority": 10,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        },
        {
          "authenticator": "reset-otp",
          "autheticatorFlow": false,
          "priority": 20,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        }
      ],
      "builtIn": true,
      "description": "Flow to determine if the OTP should be reset or not. Set to REQUIRED to force.",
      "providerId": "basic-flow",
      "topLevel": false
    },
    {
      "alias": "SCB login flow",
      "authenticationExecutions": [
        {
          "authenticator": "auth-script-based",
          "authenticatorConfig": "automatically-login-existing-user",
          "autheticatorFlow": false,
          "priority": 2,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        },
        {
          "authenticator": "idp-auto-link",
          "autheticatorFlow": false,
          "priority": 3,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        }
      ],
      "builtIn": false,
      "description": "",
      "providerId": "basic-flow",
      "topLevel": true
    },
    {
      "alias": "User creation or linking",
      "authenticationExecutions": [
        {
          "authenticator": "idp-create-user-if-unique",
          "authenticatorConfig": "create unique user config",
          "autheticatorFlow": false,
          "priority": 10,
          "requirement": "ALTERNATIVE",
          "userSetupAllowed": false
        },
        {
          "autheticatorFlow": true,
          "flowAlias": "Handle Existing Account",
          "priority": 20,
          "requirement": "ALTERNATIVE",
          "userSetupAllowed": false
        }
      ],
      "builtIn": true,
      "description": "Flow for the existing/non-existing user alternatives",
      "providerId": "basic-flow",
      "topLevel": false
    },
    {
      "alias": "Verify Existing Account by Re-authentication",
      "authenticationExecutions": [
        {
          "authenticator": "idp-username-password-form",
          "autheticatorFlow": false,
          "priority": 10,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        },
        {
          "autheticatorFlow": true,
          "flowAlias": "First broker login - Conditional OTP",
          "priority": 20,
          "requirement": "CONDITIONAL",
          "userSetupAllowed": false
        }
      ],
      "builtIn": true,
      "description": "Reauthentication of existing account",
      "providerId": "basic-flow",
      "topLevel": false
    },
    {
      "alias": "browser",
      "authenticationExecutions": [
        {
          "authenticator": "auth-cookie",
          "autheticatorFlow": false,
          "priority": 10,
          "requirement": "ALTERNATIVE",
          "userSetupAllowed": false
        },
        {
          "authenticator": "auth-spnego",
          "autheticatorFlow": false,
          "priority": 20,
          "requirement": "DISABLED",
          "userSetupAllowed": false
        },
        {
          "authenticator": "identity-provider-redirector",
          "autheticatorFlow": false,
          "priority": 25,
          "requirement": "ALTERNATIVE",
          "userSetupAllowed": false
        },
        {
          "autheticatorFlow": true,
          "flowAlias": "forms",
          "priority": 30,
          "requirement": "ALTERNATIVE",
          "userSetupAllowed": false
        }
      ],
      "builtIn": true,
      "description": "browser based authentication",
      "providerId": "basic-flow",
      "topLevel": true
    },
    {
      "alias": "clients",
      "authenticationExecutions": [
        {
          "authenticator": "client-jwt",
          "autheticatorFlow": false,
          "priority": 20,
          "requirement": "ALTERNATIVE",
          "userSetupAllowed": false
        },
        {
          "authenticator": "client-secret",
          "autheticatorFlow": false,
          "priority": 10,
          "requirement": "ALTERNATIVE",
          "userSetupAllowed": false
        },
        {
          "authenticator": "client-secret-jwt",
          "autheticatorFlow": false,
          "priority": 30,
          "requirement": "ALTERNATIVE",
          "userSetupAllowed": false
        },
        {
          "authenticator": "client-x509",
          "autheticatorFlow": false,
          "priority": 40,
          "requirement": "ALTERNATIVE",
          "userSetupAllowed": false
        }
      ],
      "builtIn": true,
      "description": "Base authentication for clients",
      "providerId": "client-flow",
      "topLevel": true
    },
    {
      "alias": "direct grant",
      "authenticationExecutions": [
        {
          "authenticator": "direct-grant-validate-password",
          "autheticatorFlow": false,
          "priority": 20,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        },
        {
          "authenticator": "direct-grant-validate-username",
          "autheticatorFlow": false,
          "priority": 10,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        },
        {
          "autheticatorFlow": true,
          "flowAlias": "Direct Grant - Conditional OTP",
          "priority": 30,
          "requirement": "CONDITIONAL",
          "userSetupAllowed": false
        }
      ],
      "builtIn": true,
      "description": "OpenID Connect Resource Owner Grant",
      "providerId": "basic-flow",
      "topLevel": true
    },
    {
      "alias": "docker auth",
      "authenticationExecutions": [
        {
          "authenticator": "docker-http-basic-authenticator",
          "autheticatorFlow": false,
          "priority": 10,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        }
      ],
      "builtIn": true,
      "description": "Used by Docker clients to authenticate against the IDP",
      "providerId": "basic-flow",
      "topLevel": true
    },
    {
      "alias": "first broker login",
      "authenticationExecutions": [
        {
          "authenticator": "idp-review-profile",
          "authenticatorConfig": "review profile config",
          "autheticatorFlow": false,
          "priority": 10,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        },
        {
          "autheticatorFlow": true,
          "flowAlias": "User creation or linking",
          "priority": 20,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        }
      ],
      "builtIn": true,
      "description": "Actions taken after first broker login with identity provider account, which is not yet linked to any Keycloak account",
      "providerId": "basic-flow",
      "topLevel": true
    },
    {
      "alias": "forms",
      "authenticationExecutions": [
        {
          "authenticator": "auth-username-password-form",
          "autheticatorFlow": false,
          "priority": 10,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        },
        {
          "autheticatorFlow": true,
          "flowAlias": "Browser - Conditional OTP",
          "priority": 20,
          "requirement": "CONDITIONAL",
          "userSetupAllowed": false
        }
      ],
      "builtIn": true,
      "description": "Username, password, otp and other auth forms.",
      "providerId": "basic-flow",
      "topLevel": false
    },
    {
      "alias": "http challenge",
      "authenticationExecutions": [
        {
          "authenticator": "no-cookie-redirect",
          "autheticatorFlow": false,
          "priority": 10,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        },
        {
          "autheticatorFlow": true,
          "flowAlias": "Authentication Options",
          "priority": 20,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        }
      ],
      "builtIn": true,
      "description": "An authentication flow based on challenge-response HTTP Authentication Schemes",
      "providerId": "basic-flow",
      "topLevel": true
    },
    {
      "alias": "registration",
      "authenticationExecutions": [
        {
          "authenticator": "registration-page-form",
          "autheticatorFlow": true,
          "flowAlias": "registration form",
          "priority": 10,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        }
      ],
      "builtIn": true,
      "description": "registration flow",
      "providerId": "basic-flow",
      "topLevel": true
    },
    {
      "alias": "registration form",
      "authenticationExecutions": [
        {
          "authenticator": "registration-password-action",
          "autheticatorFlow": false,
          "priority": 50,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        },
        {
          "authenticator": "registration-profile-action",
          "autheticatorFlow": false,
          "priority": 40,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        },
        {
          "authenticator": "registration-recaptcha-action",
          "autheticatorFlow": false,
          "priority": 60,
          "requirement": "DISABLED",
          "userSetupAllowed": false
        },
        {
          "authenticator": "registration-user-creation",
          "autheticatorFlow": false,
          "priority": 20,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        }
      ],
      "builtIn": true,
      "description": "registration form",
      "providerId": "form-flow",
      "topLevel": false
    },
    {
      "alias": "reset credentials",
      "authenticationExecutions": [
        {
          "authenticator": "reset-credential-email",
          "autheticatorFlow": false,
          "priority": 20,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        },
        {
          "authenticator": "reset-credentials-choose-user",
          "autheticatorFlow": false,
          "priority": 10,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        },
        {
          "authenticator": "reset-password",
          "autheticatorFlow": false,
          "priority": 30,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        },
        {
          "autheticatorFlow": true,
          "flowAlias": "Reset - Conditional OTP",
          "priority": 40,
          "requirement": "CONDITIONAL",
          "userSetupAllowed": false
        }
      ],
      "builtIn": true,
      "description": "Reset credentials for a user if they forgot their password or something",
      "providerId": "basic-flow",
      "topLevel": true
    },
    {
      "alias": "saml ecp",
      "authenticationExecutions": [
        {
          "authenticator": "http-basic-authenticator",
          "autheticatorFlow": false,
          "priority": 10,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        }
      ],
      "builtIn": true,
      "description": "SAML ECP Profile Authentication Flow",
      "providerId": "basic-flow",
      "topLevel": true
    }
  ],
  "authenticatorConfig": [
    {
      "alias": "automatically-login-existing-user",
      "config": {
        "scriptCode": "/*\n * Template for JavaScript based authenticator's.\n * See org.keycloak.authentication.authenticators.browser.ScriptBasedAuthenticatorFactory\n */\n\n// import enum for error lookup\nAuthenticationFlowError = Java.type(\"org.keycloak.authentication.AuthenticationFlowError\");\nSerializedBrokeredIdentityContext = Java.type(\"org.keycloak.authentication.authenticators.broker.util.SerializedBrokeredIdentityContext\");\nAbstractIdpAuthenticator = Java.type(\"org.keycloak.authentication.authenticators.broker.AbstractIdpAuthenticator\");\nUserModel = Java.type('org.keycloak.models.UserModel');\nExistingUserInfo = Java.type('org.keycloak.authentication.authenticators.broker.util.ExistingUserInfo');\n/**\n * An example authenticate function.\n *\n * The following variables are available for convenience:\n * user - current user {@see org.keycloak.models.UserModel}\n * realm - current realm {@see org.keycloak.models.RealmModel}\n * session - current KeycloakSession {@see org.keycloak.models.KeycloakSession}\n * httpRequest - current HttpRequest {@see org.jboss.resteasy.spi.HttpRequest}\n * script - current script {@see org.keycloak.models.ScriptModel}\n * authenticationSession - current authentication session {@see org.keycloak.sessions.AuthenticationSessionModel}\n * LOG - current logger {@see org.jboss.logging.Logger}\n *\n * You one can extract current http request headers via:\n * httpRequest.getHttpHeaders().getHeaderString(\"Forwarded\")\n *\n * @param context {@see org.keycloak.authentication.AuthenticationFlowContext}\n */\nfunction authenticate(context) {\n    var serializedCtx = SerializedBrokeredIdentityContext.readFromAuthenticationSession(authenticationSession, AbstractIdpAuthenticator.BROKERED_CONTEXT_NOTE);\n    var brokerIdentityCtx = serializedCtx.deserialize(session, authenticationSession);\n    \n    var idpUsername = brokerIdentityCtx.username;\n    \n    LOG.info(\"Broker context: \" + brokerIdentityCtx);\n    LOG.info(\"Trying to login: \" + idpUsername);\n\n    var existingUser = context.getSession().users().getUserByUsername(idpUsername, context.getRealm());\n    \n    \n    if (existingUser === null) {\n        LOG.info(\"Could not find user \" + idpUsername);\n        context.failure(AuthenticationFlowError.INVALID_USER);\n        return;\n    }\n\n    LOG.info(\"User \" + idpUsername + \" found.\")\n    \n    var existingUserInfo = new ExistingUserInfo(existingUser.id, UserModel.USERNAME, existingUser.username);\n    context.getAuthenticationSession().setAuthNote(AbstractIdpAuthenticator.EXISTING_USER_INFO,existingUserInfo.serialize());\n\n    context.success();\n    return;\n}"
      }
    },
    {
      "alias": "create unique user config",
      "config": {
        "require.password.update.after.registration": "false"
      }
    },
    {
      "alias": "review profile config",
      "config": {
        "update.profile.on.first.login": "missing"
      }
    }
  ],
  "browserFlow": "browser",
  "browserSecurityHeaders": {
    "contentSecurityPolicy": "frame-src 'self'; frame-ancestors 'self'; object-src 'none';",
    "contentSecurityPolicyReportOnly": "",
    "strictTransportSecurity": "max-age=31536000; includeSubDomains",
    "xContentTypeOptions": "nosniff",
    "xFrameOptions": "SAMEORIGIN",
    "xRobotsTag": "none",
    "xXSSProtection": "1; mode=block"
  },
  "bruteForceProtected": false,
  "clientAuthenticationFlow": "clients",
  "clientScopes": [
    {
      "attributes": {
        "consent.screen.text": "${offlineAccessScopeConsentText}",
        "display.on.consent.screen": "true"
      },
      "description": "OpenID Connect built-in scope: offline_access",
      "name": "offline_access",
      "protocol": "openid-connect"
    },
    {
      "attributes": {
        "consent.screen.text": "${samlRoleListScopeConsentText}",
        "display.on.consent.screen": "true"
      },
      "description": "SAML role list",
      "name": "role_list",
      "protocol": "saml",
      "protocolMappers": [
        {
          "config": {
            "attribute.name": "Role",
            "attribute.nameformat": "Basic",
            "single": "false"
          },
          "consentRequired": false,
          "name": "role list",
          "protocol": "saml",
          "protocolMapper": "saml-role-list-mapper"
        }
      ]
    },
    {
      "attributes": {
        "consent.screen.text": "",
        "display.on.consent.screen": "false",
        "include.in.token.scope": "false"
      },
      "description": "OpenID Connect scope for add allowed web origins to the access token",
      "name": "web-origins",
      "protocol": "openid-connect",
      "protocolMappers": [
        {
          "config": {},
          "consentRequired": false,
          "name": "allowed web origins",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-allowed-origins-mapper"
        }
      ]
    },
    {
      "attributes": {
        "consent.screen.text": "${addressScopeConsentText}",
        "display.on.consent.screen": "true",
        "include.in.token.scope": "true"
      },
      "description": "OpenID Connect built-in scope: address",
      "name": "address",
      "protocol": "openid-connect",
      "protocolMappers": [
        {
          "config": {
            "access.token.claim": "true",
            "id.token.claim": "true",
            "user.attribute.country": "country",
            "user.attribute.formatted": "formatted",
            "user.attribute.locality": "locality",
            "user.attribute.postal_code": "postal_code",
            "user.attribute.region": "region",
            "user.attribute.street": "street",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "address",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-address-mapper"
        }
      ]
    },
    {
      "attributes": {
        "consent.screen.text": "${emailScopeConsentText}",
        "display.on.consent.screen": "true",
        "include.in.token.scope": "true"
      },
      "description": "OpenID Connect built-in scope: email",
      "name": "email",
      "protocol": "openid-connect",
      "protocolMappers": [
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "email",
            "id.token.claim": "true",
            "jsonType.label": "String",
            "user.attribute": "email",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "email",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-property-mapper"
        },
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "email_verified",
            "id.token.claim": "true",
            "jsonType.label": "boolean",
            "user.attribute": "emailVerified",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "email verified",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-property-mapper"
        }
      ]
    },
    {
      "attributes": {
        "consent.screen.text": "${phoneScopeConsentText}",
        "display.on.consent.screen": "true",
        "include.in.token.scope": "true"
      },
      "description": "OpenID Connect built-in scope: phone",
      "name": "phone",
      "protocol": "openid-connect",
      "protocolMappers": [
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "phone_number",
            "id.token.claim": "true",
            "jsonType.label": "String",
            "user.attribute": "phoneNumber",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "phone number",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper"
        },
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "phone_number_verified",
            "id.token.claim": "true",
            "jsonType.label": "boolean",
            "user.attribute": "phoneNumberVerified",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "phone number verified",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper"
        }
      ]
    },
    {
      "attributes": {
        "consent.screen.text": "${profileScopeConsentText}",
        "display.on.consent.screen": "true",
        "include.in.token.scope": "true"
      },
      "description": "OpenID Connect built-in scope: profile",
      "name": "profile",
      "protocol": "openid-connect",
      "protocolMappers": [
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "birthdate",
            "id.token.claim": "true",
            "jsonType.label": "String",
            "user.attribute": "birthdate",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "birthdate",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper"
        },
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "family_name",
            "id.token.claim": "true",
            "jsonType.label": "String",
            "user.attribute": "lastName",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "family name",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-property-mapper"
        },
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "gender",
            "id.token.claim": "true",
            "jsonType.label": "String",
            "user.attribute": "gender",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "gender",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper"
        },
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "given_name",
            "id.token.claim": "true",
            "jsonType.label": "String",
            "user.attribute": "firstName",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "given name",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-property-mapper"
        },
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "locale",
            "id.token.claim": "true",
            "jsonType.label": "String",
            "user.attribute": "locale",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "locale",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper"
        },
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "middle_name",
            "id.token.claim": "true",
            "jsonType.label": "String",
            "user.attribute": "middleName",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "middle name",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper"
        },
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "nickname",
            "id.token.claim": "true",
            "jsonType.label": "String",
            "user.attribute": "nickname",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "nickname",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper"
        },
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "picture",
            "id.token.claim": "true",
            "jsonType.label": "String",
            "user.attribute": "picture",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "picture",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper"
        },
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "preferred_username",
            "id.token.claim": "true",
            "jsonType.label": "String",
            "user.attribute": "username",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "username",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-property-mapper"
        },
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "profile",
            "id.token.claim": "true",
            "jsonType.label": "String",
            "user.attribute": "profile",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "profile",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper"
        },
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "updated_at",
            "id.token.claim": "true",
            "jsonType.label": "String",
            "user.attribute": "updatedAt",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "updated at",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper"
        },
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "website",
            "id.token.claim": "true",
            "jsonType.label": "String",
            "user.attribute": "website",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "website",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper"
        },
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "zoneinfo",
            "id.token.claim": "true",
            "jsonType.label": "String",
            "user.attribute": "zoneinfo",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "zoneinfo",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper"
        },
        {
          "config": {
            "access.token.claim": "true",
            "id.token.claim": "true",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "full name",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-full-name-mapper"
        }
      ]
    },
    {
      "attributes": {
        "consent.screen.text": "${rolesScopeConsentText}",
        "display.on.consent.screen": "true",
        "include.in.token.scope": "false"
      },
      "description": "OpenID Connect scope for add user roles to the access token",
      "name": "roles",
      "protocol": "openid-connect",
      "protocolMappers": [
        {
          "config": {},
          "consentRequired": false,
          "name": "audience resolve",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-audience-resolve-mapper"
        },
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "realm_access.roles",
            "jsonType.label": "String",
            "multivalued": "true",
            "user.attribute": "foo"
          },
          "consentRequired": false,
          "name": "realm roles",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-realm-role-mapper"
        },
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "resource_access.${client_id}.roles",
            "jsonType.label": "String",
            "multivalued": "true",
            "user.attribute": "foo"
          },
          "consentRequired": false,
          "name": "client roles",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-client-role-mapper"
        }
      ]
    },
    {
      "attributes": {
        "display.on.consent.screen": "false",
        "include.in.token.scope": "true"
      },
      "description": "Microprofile - JWT built-in scope",
      "name": "microprofile-jwt",
      "protocol": "openid-connect",
      "protocolMappers": [
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "groups",
            "id.token.claim": "true",
            "jsonType.label": "String",
            "multivalued": "true",
            "user.attribute": "foo",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "groups",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-realm-role-mapper"
        },
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "upn",
            "id.token.claim": "true",
            "jsonType.label": "String",
            "user.attribute": "username",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "upn",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-property-mapper"
        }
      ]
    }
  ],
  "clients": [
    {
      "adminUrl": "",
      "attributes": {
        "display.on.consent.screen": "false",
        "exclude.session.state.from.auth.response": "false",
        "saml.assertion.signature": "false",
        "saml.authnstatement": "false",
        "saml.client.signature": "false",
        "saml.encrypt": "false",
        "saml.force.post.binding": "false",
        "saml.multivalued.roles": "false",
        "saml.onetimeuse.condition": "false",
        "saml.server.signature": "false",
        "saml.server.signature.keyinfo.ext": "false",
        "saml_force_name_id_format": "false",
        "tls.client.certificate.bound.access.tokens": "false"
      },
      "authenticationFlowBindingOverrides": {},
      "baseUrl": "http://localhost:4200",
      "bearerOnly": false,
      "clientAuthenticatorType": "client-secret",
      "clientId": "frontend",
      "consentRequired": false,
      "defaultClientScopes": [
        "email",
        "profile",
        "role_list",
        "roles",
        "web-origins"
      ],
      "directAccessGrantsEnabled": true,
      "enabled": true,
      "frontchannelLogout": false,
      "fullScopeAllowed": true,
      "implicitFlowEnabled": false,
      "nodeReRegistrationTimeout": -1,
      "notBefore": 0,
      "optionalClientScopes": [
        "address",
        "microprofile-jwt",
        "offline_access",
        "phone"
      ],
      "protocol": "openid-connect",
      "publicClient": true,
      "redirectUris": [
        "http://localhost:4200/*",
        "http://localhost:7070/*"
      ],
      "rootUrl": "http://localhost:4200",
      "secret": "107c0976-5f92-4b95-88a7-009836e6e04d",
      "serviceAccountsEnabled": false,
      "standardFlowEnabled": true,
      "surrogateAuthRequired": false,
      "webOrigins": [
        "+"
      ]
    },
    {
      "attributes": {
        "display.on.consent.screen": "false",
        "exclude.session.state.from.auth.response": "false",
        "saml.assertion.signature": "false",
        "saml.authnstatement": "false",
        "saml.client.signature": "false",
        "saml.encrypt": "false",
        "saml.force.post.binding": "false",
        "saml.multivalued.roles": "false",
        "saml.onetimeuse.condition": "false",
        "saml.server.signature": "false",
        "saml.server.signature.keyinfo.ext": "false",
        "saml_force_name_id_format": "false",
        "tls.client.certificate.bound.access.tokens": "false"
      },
      "authenticationFlowBindingOverrides": {},
      "authorizationServicesEnabled": true,
      "authorizationSettings": {
        "allowRemoteResourceManagement": true,
        "decisionStrategy": "UNANIMOUS",
        "policies": [
          {
            "config": {
              "applyPolicies": "[\"Default Policy\"]",
              "defaultResourceType": "urn:backend:resources:default"
            },
            "decisionStrategy": "UNANIMOUS",
            "description": "A permission that applies to the default resource type",
            "logic": "POSITIVE",
            "name": "Default Permission",
            "type": "resource"
          },
          {
            "config": {
              "code": "// by default, grants any permission associated with this policy\n$evaluation.grant();\n"
            },
            "decisionStrategy": "AFFIRMATIVE",
            "description": "A policy that grants access only for users within this realm",
            "logic": "POSITIVE",
            "name": "Default Policy",
            "type": "js"
          }
        ],
        "policyEnforcementMode": "ENFORCING",
        "resources": [
          {
            "_id": "4a5dfa0c-a2ba-44e7-9b5a-378d9d0eb842",
            "attributes": {},
            "name": "Default Resource",
            "ownerManagedAccess": false,
            "type": "urn:backend:resources:default",
            "uris": [
              "/*"
            ]
          }
        ],
        "scopes": []
      },
      "bearerOnly": false,
      "clientAuthenticatorType": "client-secret",
      "clientId": "backend",
      "consentRequired": false,
      "defaultClientScopes": [
        "email",
        "profile",
        "role_list",
        "roles",
        "web-origins"
      ],
      "directAccessGrantsEnabled": false,
      "enabled": true,
      "frontchannelLogout": false,
      "fullScopeAllowed": true,
      "implicitFlowEnabled": false,
      "nodeReRegistrationTimeout": -1,
      "notBefore": 0,
      "optionalClientScopes": [
        "address",
        "microprofile-jwt",
        "offline_access",
        "phone"
      ],
      "protocol": "openid-connect",
      "protocolMappers": [
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "clientAddress",
            "id.token.claim": "true",
            "jsonType.label": "String",
            "user.session.note": "clientAddress",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "Client IP Address",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usersessionmodel-note-mapper"
        },
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "clientHost",
            "id.token.claim": "true",
            "jsonType.label": "String",
            "user.session.note": "clientHost",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "Client Host",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usersessionmodel-note-mapper"
        },
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "clientId",
            "id.token.claim": "true",
            "jsonType.label": "String",
            "user.session.note": "clientId",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "Client ID",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usersessionmodel-note-mapper"
        }
      ],
      "publicClient": false,
      "redirectUris": [
        "http://localhost:8080/*"
      ],
      "secret": "a9392d5f-db39-4bbe-b36e-96aecdbfd9d0",
      "serviceAccountsEnabled": true,
      "standardFlowEnabled": false,
      "surrogateAuthRequired": false,
      "webOrigins": [
        ""
      ]
    },
    {
      "attributes": {},
      "authenticationFlowBindingOverrides": {},
      "baseUrl": "/realms/sens-webapp/account/",
      "bearerOnly": false,
      "clientAuthenticatorType": "client-secret",
      "clientId": "account",
      "consentRequired": false,
      "defaultClientScopes": [
        "email",
        "profile",
        "role_list",
        "roles",
        "web-origins"
      ],
      "defaultRoles": [
        "manage-account",
        "view-profile"
      ],
      "directAccessGrantsEnabled": false,
      "enabled": true,
      "frontchannelLogout": false,
      "fullScopeAllowed": false,
      "implicitFlowEnabled": false,
      "name": "${client_account}",
      "nodeReRegistrationTimeout": 0,
      "notBefore": 0,
      "optionalClientScopes": [
        "address",
        "microprofile-jwt",
        "offline_access",
        "phone"
      ],
      "protocol": "openid-connect",
      "publicClient": false,
      "redirectUris": [
        "/realms/sens-webapp/account/*"
      ],
      "rootUrl": "${authBaseUrl}",
      "secret": "6a5c9872-5a7c-4422-aed4-1d0d6ba6af1f",
      "serviceAccountsEnabled": false,
      "standardFlowEnabled": true,
      "surrogateAuthRequired": false,
      "webOrigins": []
    },
    {
      "attributes": {},
      "authenticationFlowBindingOverrides": {},
      "baseUrl": "/admin/sens-webapp/console/",
      "bearerOnly": false,
      "clientAuthenticatorType": "client-secret",
      "clientId": "security-admin-console",
      "consentRequired": false,
      "defaultClientScopes": [
        "email",
        "profile",
        "role_list",
        "roles",
        "web-origins"
      ],
      "directAccessGrantsEnabled": false,
      "enabled": true,
      "frontchannelLogout": false,
      "fullScopeAllowed": false,
      "implicitFlowEnabled": false,
      "name": "${client_security-admin-console}",
      "nodeReRegistrationTimeout": 0,
      "notBefore": 0,
      "optionalClientScopes": [
        "address",
        "microprofile-jwt",
        "offline_access",
        "phone"
      ],
      "protocol": "openid-connect",
      "protocolMappers": [
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "locale",
            "id.token.claim": "true",
            "jsonType.label": "String",
            "user.attribute": "locale",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "locale",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper"
        }
      ],
      "publicClient": true,
      "redirectUris": [
        "/admin/sens-webapp/console/*"
      ],
      "rootUrl": "${authAdminUrl}",
      "secret": "d7229ad1-043e-456c-a62e-0e477b665abf",
      "serviceAccountsEnabled": false,
      "standardFlowEnabled": true,
      "surrogateAuthRequired": false,
      "webOrigins": [
        "+"
      ]
    },
    {
      "attributes": {},
      "authenticationFlowBindingOverrides": {},
      "bearerOnly": false,
      "clientAuthenticatorType": "client-secret",
      "clientId": "admin-cli",
      "consentRequired": false,
      "defaultClientScopes": [
        "email",
        "profile",
        "role_list",
        "roles",
        "web-origins"
      ],
      "directAccessGrantsEnabled": true,
      "enabled": true,
      "frontchannelLogout": false,
      "fullScopeAllowed": false,
      "implicitFlowEnabled": false,
      "name": "${client_admin-cli}",
      "nodeReRegistrationTimeout": 0,
      "notBefore": 0,
      "optionalClientScopes": [
        "address",
        "microprofile-jwt",
        "offline_access",
        "phone"
      ],
      "protocol": "openid-connect",
      "publicClient": true,
      "redirectUris": [],
      "secret": "37f0abbf-c95b-47ad-92d9-92165c9a549b",
      "serviceAccountsEnabled": false,
      "standardFlowEnabled": false,
      "surrogateAuthRequired": false,
      "webOrigins": []
    },
    {
      "attributes": {},
      "authenticationFlowBindingOverrides": {},
      "bearerOnly": false,
      "clientAuthenticatorType": "client-secret",
      "clientId": "broker",
      "consentRequired": false,
      "defaultClientScopes": [
        "email",
        "profile",
        "role_list",
        "roles",
        "web-origins"
      ],
      "directAccessGrantsEnabled": false,
      "enabled": true,
      "frontchannelLogout": false,
      "fullScopeAllowed": false,
      "implicitFlowEnabled": false,
      "name": "${client_broker}",
      "nodeReRegistrationTimeout": 0,
      "notBefore": 0,
      "optionalClientScopes": [
        "address",
        "microprofile-jwt",
        "offline_access",
        "phone"
      ],
      "protocol": "openid-connect",
      "publicClient": false,
      "redirectUris": [],
      "secret": "fae4c743-06a6-4372-a0a2-d43028d099a7",
      "serviceAccountsEnabled": false,
      "standardFlowEnabled": true,
      "surrogateAuthRequired": false,
      "webOrigins": []
    },
    {
      "attributes": {},
      "authenticationFlowBindingOverrides": {},
      "bearerOnly": true,
      "clientAuthenticatorType": "client-secret",
      "clientId": "realm-management",
      "consentRequired": false,
      "defaultClientScopes": [
        "email",
        "profile",
        "role_list",
        "roles",
        "web-origins"
      ],
      "directAccessGrantsEnabled": false,
      "enabled": true,
      "frontchannelLogout": false,
      "fullScopeAllowed": false,
      "implicitFlowEnabled": false,
      "name": "${client_realm-management}",
      "nodeReRegistrationTimeout": 0,
      "notBefore": 0,
      "optionalClientScopes": [
        "address",
        "microprofile-jwt",
        "offline_access",
        "phone"
      ],
      "protocol": "openid-connect",
      "publicClient": false,
      "redirectUris": [],
      "secret": "bc0f505b-d930-472f-aa8c-9bbbb1c2be18",
      "serviceAccountsEnabled": false,
      "standardFlowEnabled": true,
      "surrogateAuthRequired": false,
      "webOrigins": []
    },
    {
      "attributes": {
        "display.on.consent.screen": "false",
        "exclude.session.state.from.auth.response": "false",
        "saml.assertion.signature": "false",
        "saml.authnstatement": "false",
        "saml.client.signature": "false",
        "saml.encrypt": "false",
        "saml.force.post.binding": "false",
        "saml.multivalued.roles": "false",
        "saml.onetimeuse.condition": "false",
        "saml.server.signature": "false",
        "saml.server.signature.keyinfo.ext": "false",
        "saml_force_name_id_format": "false",
        "tls.client.certificate.bound.access.tokens": "false"
      },
      "authenticationFlowBindingOverrides": {},
      "bearerOnly": false,
      "clientAuthenticatorType": "client-secret",
      "clientId": "report-cli",
      "consentRequired": false,
      "defaultClientScopes": [
        "email",
        "profile",
        "role_list",
        "roles",
        "web-origins"
      ],
      "directAccessGrantsEnabled": true,
      "enabled": true,
      "frontchannelLogout": false,
      "fullScopeAllowed": false,
      "implicitFlowEnabled": false,
      "nodeReRegistrationTimeout": -1,
      "notBefore": 0,
      "optionalClientScopes": [
        "address",
        "microprofile-jwt",
        "offline_access",
        "phone"
      ],
      "protocol": "openid-connect",
      "protocolMappers": [
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "clientAddress",
            "id.token.claim": "true",
            "jsonType.label": "String",
            "user.session.note": "clientAddress",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "Client IP Address",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usersessionmodel-note-mapper"
        },
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "clientHost",
            "id.token.claim": "true",
            "jsonType.label": "String",
            "user.session.note": "clientHost",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "Client Host",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usersessionmodel-note-mapper"
        },
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "clientId",
            "id.token.claim": "true",
            "jsonType.label": "String",
            "user.session.note": "clientId",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "Client ID",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usersessionmodel-note-mapper"
        }
      ],
      "publicClient": false,
      "redirectUris": [],
      "secret": "5ddbddc0-9da2-41b7-92c3-7b1948339add",
      "serviceAccountsEnabled": true,
      "standardFlowEnabled": false,
      "surrogateAuthRequired": false,
      "webOrigins": []
    }
  ],
  "components": {
    "org.keycloak.keys.KeyProvider": [
      {
        "config": {
          "algorithm": [
            "HS256"
          ],
          "kid": [
            "da95160b-7479-4fd7-8af9-c4dbe87bd764"
          ],
          "priority": [
            "100"
          ],
          "secret": [
            "t5CADiJHmuc6BCHa7cJGlS0DQQwxMTzXMOK3vCWhsQLOLmzTuFWRT7tyTdz94IqOxWscfhyC_wQCEleUAa9tjA"
          ]
        },
        "name": "hmac-generated",
        "providerId": "hmac-generated",
        "subComponents": {}
      },
      {
        "config": {
          "certificate": [
            "MIICpTCCAY0CBgFu+YooiDANBgkqhkiG9w0BAQsFADAWMRQwEgYDVQQDDAtzZW5zLXdlYmFwcDAeFw0xOTEyMTIwOTU1MTFaFw0yOTEyMTIwOTU2NTFaMBYxFDASBgNVBAMMC3NlbnMtd2ViYXBwMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAjWBkB98LTP0ZV92BXqemhq4c/E/2tC+MuNy5hMXQcxFCBbtkjio348bu2TbiXyNbmxTq40grhslLTnI+/LIVzSyZiM6usEahPF3Iz1BqF64z0037MW5FUaDE728eO9Os8RYnG13KrHddcPAb1l7w2zK3dZE6/7HXqZ8E2K+ptLnq0xuUqyWB5VFHj02OVd15YFdFp4tbWUAeDwlLDHk8mFmXEPhI4tBRQPWnkYc8IuqLJEVSC2OMk9BexmpnQvKDyVkRpFr9dDiL4+qgmoqh9laGAZCOJIsI7wyBAx0PJxemHrd5DiHw6caH/bWXOf8Zf+Bb+o1QdSpGev/3O6rl9QIDAQABMA0GCSqGSIb3DQEBCwUAA4IBAQAW11aSbq6WnxHDw6rFoc5NfiryDoELNWeIyG0J9Xn7EbJFLc1bhRID1/Qbd03pmY+/QGxEugLX7GRHGEItlfO5MxIq5Uyda9lcEujUnAvVxybqgxfIxVw324Evk2P5yfPyauYGr7eOH9HyaEveHzBWh9GMXxXxEJdPvwhKSnAG33NtTJqgJD+GkS+vqqxyz6UsMg87bSSsCRyJ/O6+h14klr1q0pBmEWx9KwiGQX7jWwu49TfVoFt98/Vu0QSYcCxyqFB+Qu5BxNOAgiGxhC5B2Qto73uqPzc9c37fD3Bsb7UVdGs6ETYj/yEtW5+vOA+O/QelRhE+OwITuDuwdk8i"
          ],
          "priority": [
            "100"
          ],
          "privateKey": [
            "MIIEpAIBAAKCAQEAjWBkB98LTP0ZV92BXqemhq4c/E/2tC+MuNy5hMXQcxFCBbtkjio348bu2TbiXyNbmxTq40grhslLTnI+/LIVzSyZiM6usEahPF3Iz1BqF64z0037MW5FUaDE728eO9Os8RYnG13KrHddcPAb1l7w2zK3dZE6/7HXqZ8E2K+ptLnq0xuUqyWB5VFHj02OVd15YFdFp4tbWUAeDwlLDHk8mFmXEPhI4tBRQPWnkYc8IuqLJEVSC2OMk9BexmpnQvKDyVkRpFr9dDiL4+qgmoqh9laGAZCOJIsI7wyBAx0PJxemHrd5DiHw6caH/bWXOf8Zf+Bb+o1QdSpGev/3O6rl9QIDAQABAoIBAFk/bGZ7q4qijIknUDAM7dc/uxSc9kSxb8iTrpnetsStNFyh+8yzYizsvINrXmRo0b+I6O8p9DBWiq+u94xWb+TiLtpqf2TQcaDGI6qcPR1N33GZXOXLkv8A2tG79/4UlqxrK6ze/L77a4WMTkZ6ENqPnbkeQXyBLH/r3wdbfWqUssJh/Vp9v7LpuOyKQaueb2bpishziRf51ftsdKD32bc2xO/LsjXMnIIfNrj37fXdO6x0zsek5uN0zmb+g7p9LHFmgv53SkRHSN3JoMalJ3WvGX/oXSOf1Yo1ayrWJX/ls1g0xrU7dAlaylu+YSA9YtfGCmjyHV6+r3BsKZTo04ECgYEAyh0/3DD6CV92sZoIVWk6YASRpNWQk3W+Lu9YHExS9OSjxw/pk3RpmRNf8yLGX9mhE/sNBnX/8UH3yVRnhme71fpnMOgUx/7K+EsSbxzAjN1Wr/LPw1bqav6l+Bqg7FRZ45FAVNFxUU944AJINYbu6VrwBv+CqKYtpXjZHRx92h0CgYEAsxGnvrx7v+aYzGvO5hIvDChoYWuk+/Fy8pTGMihMh1FlZTytxW+Yuh3R8ZEKuWaljfiUxRVnR2lWLw0x0HCt9fdrVCsSDckTss0tcd38F1twqA00/eoJG89p8SIY4d0kQjs939Znv6Am34H+fdmVxmzoy0v/wC7Y5lEcLAQus7kCgYEApRaNIfMTWPKUBe92HSXNm74/pK8Y34nOJZI0mzCwlf3n1OInfN0aoAFWX0epV4Nw8dwfQIbD3zFuDxIVWZCDuf1Fqon254E0EulnDkEi+iyU8TTZBYqKAYks0eIWTdN8dMghDubgs3TBm9/hUW982DkCVAUCmXTbVgzG8uNh3PUCgYBaEOBBREYt8EscToFDIRQ+1jgh/+V8vyWks4W4hqJvUVZhhBKXAplby1HkYaJ2PBW7AbO6KRjIR0gM5GMQxwwIcgiuzfcHrgJVZXOdGR0JlnlkXTgxGjy4mytbGF5RhEwPcAKgChQmwuOqeZTKMd1ubyrrze7199oqhdNYpEXlKQKBgQC9204y9D7AfVF1VtYiPCuBJstwutVs4SjvOckp+GHNPHuXJE3nqbexV9yXeoXkEAa0gxJ3ffpTQQKyORTvdjuiSJHaE0Q7/MNWq/q2qZUEd7ltDNm6+H5FFq63WLKu+WyKG+e2ijod7hfTg78GwDQ/1KVclrnwV2T0vWZ5q8ucww=="
          ]
        },
        "name": "rsa-generated",
        "providerId": "rsa-generated",
        "subComponents": {}
      },
      {
        "config": {
          "kid": [
            "b3c8432f-7bef-45eb-b8f3-8122eb9b0591"
          ],
          "priority": [
            "100"
          ],
          "secret": [
            "dofirKfHPOTH-1MgbUaYPw"
          ]
        },
        "name": "aes-generated",
        "providerId": "aes-generated",
        "subComponents": {}
      }
    ],
    "org.keycloak.services.clientregistration.policy.ClientRegistrationPolicy": [
      {
        "config": {},
        "name": "Consent Required",
        "providerId": "consent-required",
        "subComponents": {},
        "subType": "anonymous"
      },
      {
        "config": {},
        "name": "Full Scope Disabled",
        "providerId": "scope",
        "subComponents": {},
        "subType": "anonymous"
      },
      {
        "config": {
          "allow-default-scopes": [
            "true"
          ]
        },
        "name": "Allowed Client Scopes",
        "providerId": "allowed-client-templates",
        "subComponents": {},
        "subType": "anonymous"
      },
      {
        "config": {
          "allow-default-scopes": [
            "true"
          ]
        },
        "name": "Allowed Client Scopes",
        "providerId": "allowed-client-templates",
        "subComponents": {},
        "subType": "authenticated"
      },
      {
        "config": {
          "allowed-protocol-mapper-types": [
            "oidc-address-mapper",
            "oidc-full-name-mapper",
            "oidc-sha256-pairwise-sub-mapper",
            "oidc-usermodel-attribute-mapper",
            "oidc-usermodel-property-mapper",
            "saml-role-list-mapper",
            "saml-user-attribute-mapper",
            "saml-user-property-mapper"
          ]
        },
        "name": "Allowed Protocol Mapper Types",
        "providerId": "allowed-protocol-mappers",
        "subComponents": {},
        "subType": "anonymous"
      },
      {
        "config": {
          "allowed-protocol-mapper-types": [
            "oidc-address-mapper",
            "oidc-full-name-mapper",
            "oidc-sha256-pairwise-sub-mapper",
            "oidc-usermodel-attribute-mapper",
            "oidc-usermodel-property-mapper",
            "saml-role-list-mapper",
            "saml-user-attribute-mapper",
            "saml-user-property-mapper"
          ]
        },
        "name": "Allowed Protocol Mapper Types",
        "providerId": "allowed-protocol-mappers",
        "subComponents": {},
        "subType": "authenticated"
      },
      {
        "config": {
          "client-uris-must-match": [
            "true"
          ],
          "host-sending-registration-request-must-match": [
            "true"
          ]
        },
        "name": "Trusted Hosts",
        "providerId": "trusted-hosts",
        "subComponents": {},
        "subType": "anonymous"
      },
      {
        "config": {
          "max-clients": [
            "200"
          ]
        },
        "name": "Max Clients Limit",
        "providerId": "max-clients",
        "subComponents": {},
        "subType": "anonymous"
      }
    ]
  },
  "defaultDefaultClientScopes": [
    "email",
    "profile",
    "role_list",
    "roles",
    "web-origins"
  ],
  "defaultOptionalClientScopes": [
    "address",
    "microprofile-jwt",
    "offline_access",
    "phone"
  ],
  "directGrantFlow": "direct grant",
  "displayName": "SENS",
  "displayNameHtml": "<h1>Silent Eight Name Screening</h1>",
  "dockerAuthenticationFlow": "docker auth",
  "duplicateEmailsAllowed": false,
  "editUsernameAllowed": false,
  "enabled": true,
  "enabledEventTypes": [
    "CLIENT_DELETE",
    "CLIENT_DELETE_ERROR",
    "CLIENT_INITIATED_ACCOUNT_LINKING",
    "CLIENT_INITIATED_ACCOUNT_LINKING_ERROR",
    "CLIENT_LOGIN",
    "CLIENT_LOGIN_ERROR",
    "CLIENT_REGISTER",
    "CLIENT_REGISTER_ERROR",
    "CLIENT_UPDATE",
    "CLIENT_UPDATE_ERROR",
    "CODE_TO_TOKEN",
    "CODE_TO_TOKEN_ERROR",
    "CUSTOM_REQUIRED_ACTION",
    "CUSTOM_REQUIRED_ACTION_ERROR",
    "EXECUTE_ACTIONS",
    "EXECUTE_ACTIONS_ERROR",
    "EXECUTE_ACTION_TOKEN",
    "EXECUTE_ACTION_TOKEN_ERROR",
    "FEDERATED_IDENTITY_LINK",
    "FEDERATED_IDENTITY_LINK_ERROR",
    "GRANT_CONSENT",
    "GRANT_CONSENT_ERROR",
    "IDENTITY_PROVIDER_FIRST_LOGIN",
    "IDENTITY_PROVIDER_FIRST_LOGIN_ERROR",
    "IDENTITY_PROVIDER_LINK_ACCOUNT",
    "IDENTITY_PROVIDER_LINK_ACCOUNT_ERROR",
    "IDENTITY_PROVIDER_POST_LOGIN",
    "IDENTITY_PROVIDER_POST_LOGIN_ERROR",
    "IMPERSONATE",
    "IMPERSONATE_ERROR",
    "LOGIN",
    "LOGIN_ERROR",
    "LOGOUT",
    "LOGOUT_ERROR",
    "PERMISSION_TOKEN",
    "REGISTER",
    "REGISTER_ERROR",
    "REMOVE_FEDERATED_IDENTITY",
    "REMOVE_FEDERATED_IDENTITY_ERROR",
    "REMOVE_TOTP",
    "REMOVE_TOTP_ERROR",
    "RESET_PASSWORD",
    "RESET_PASSWORD_ERROR",
    "RESTART_AUTHENTICATION",
    "RESTART_AUTHENTICATION_ERROR",
    "REVOKE_GRANT",
    "REVOKE_GRANT_ERROR",
    "SEND_IDENTITY_PROVIDER_LINK",
    "SEND_IDENTITY_PROVIDER_LINK_ERROR",
    "SEND_RESET_PASSWORD",
    "SEND_RESET_PASSWORD_ERROR",
    "SEND_VERIFY_EMAIL",
    "SEND_VERIFY_EMAIL_ERROR",
    "TOKEN_EXCHANGE",
    "TOKEN_EXCHANGE_ERROR",
    "UPDATE_CONSENT",
    "UPDATE_CONSENT_ERROR",
    "UPDATE_EMAIL",
    "UPDATE_EMAIL_ERROR",
    "UPDATE_PASSWORD",
    "UPDATE_PASSWORD_ERROR",
    "UPDATE_PROFILE",
    "UPDATE_PROFILE_ERROR",
    "UPDATE_TOTP",
    "UPDATE_TOTP_ERROR",
    "VERIFY_EMAIL",
    "VERIFY_EMAIL_ERROR"
  ],
  "eventsEnabled": true,
  "eventsListeners": [
    "jboss-logging"
  ],
  "failureFactor": 30,
  "groups": [],
  "identityProviderMappers": [
    {
      "config": {
        "template": "${NAMEID}"
      },
      "identityProviderAlias": "scb-saml",
      "identityProviderMapper": "saml-username-idp-mapper",
      "name": "Map NAMEID to username"
    }
  ],
  "identityProviders": [
    {
      "addReadTokenRoleOnCreate": false,
      "alias": "scb-saml",
      "authenticateByDefault": false,
      "config": {
        "addExtensionsElementWithKeyInfo": "false",
        "backchannelSupported": "",
        "forceAuthn": "",
        "hideOnLoginPage": "",
        "nameIDPolicyFormat": "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified",
        "postBindingAuthnRequest": "true",
        "postBindingLogout": "true",
        "postBindingResponse": "true",
        "samlXmlKeyNameTranformer": "KEY_ID",
        "signatureAlgorithm": "RSA_SHA256",
        "signingCertificate": "MIICozCCAYsCBgFwYn3y3jANBgkqhkiG9w0BAQsFADAVMRMwEQYDVQQDDApzYW1sLXJlYWxtMB4XDTIwMDIyMDEyMDQ0NloXDTMwMDIyMDEyMDYyNlowFTETMBEGA1UEAwwKc2FtbC1yZWFsbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAIm8p6v51rMo5ic4v25Su//ShZn0ot+HYHH8JtA2qntO9nMLiDzFHKUsdwSV4xGi8FXT545HnUwGppWPSNgNgu/Q23SkFn3MjMy57J8RidUupbbMWynpUuXGM9lRmK1AK4ch1YYNoV2V9Pgm0iRARyQ3RuQC3o0X9tv1ocvFSasA7W2N9vI5IZjmVfJB5daOIvfSYhZ01uGu09y/gPcZ//TPlfMkqeKU5XamlzqP72n7MOdVbvBPwQmfee29TsUEoeoydEBufNsPJQcQlj3EQUTaxs7NF4pmfxWhhxDqwfIZwRTXtxZCGR1LAGwPGORe9TBffJx+KNjUql39kbKXp8cCAwEAATANBgkqhkiG9w0BAQsFAAOCAQEAGHzQlPUEBUW17mo2fpbm46BaJk2TkveFsZfE8aWE7CO0QkXCgfCnoNp395nMVvQC93J0HeVU1sqNSguDnPDB+WClMZp9KLNzPAs9RAiwWhRa40SQKF6LQncuQebScPnWzR4XAvPEi0tsXVeWAXRtbWpuLMGok9qYf7cA5zJ24ycR5I4CRdpxP4VOni2snVO8Flqrj8YjbdR9GCwSUMHntSCcZ0K3Az7HLo+2LRSQ5WCX8cNvQpHxDdmbalFn3cU5CUic/rrkRz5at150HA0gpQRWcUCegw2wxG9DRveswO5ujyesx+umHZplTLFzrCYOA7PSfpL12xA9GztC8lFVEQ==",
        "singleLogoutServiceUrl": "http://localhost:8095/auth/realms/saml-realm/protocol/saml",
        "singleSignOnServiceUrl": "http://localhost:8095/auth/realms/saml-realm/protocol/saml",
        "useJwksUrl": "true",
        "validateSignature": "true",
        "wantAssertionsEncrypted": "",
        "wantAssertionsSigned": "",
        "wantAuthnRequestsSigned": "true"
      },
      "displayName": "SCB Single sign-on",
      "enabled": true,
      "firstBrokerLoginFlowAlias": "SCB login flow",
      "internalId": "bee6a027-4576-4cc2-bea8-5a6469ebe631",
      "linkOnly": false,
      "providerId": "saml",
      "storeToken": false,
      "trustEmail": false,
      "updateProfileFirstLoginMode": "on"
    }
  ],
  "internationalizationEnabled": false,
  "keycloakVersion": "8.0.1",
  "loginWithEmailAllowed": true,
  "maxDeltaTimeSeconds": 43200,
  "maxFailureWaitSeconds": 900,
  "minimumQuickLoginWaitSeconds": 60,
  "notBefore": 1576261806,
  "offlineSessionIdleTimeout": 2592000,
  "offlineSessionMaxLifespan": 5184000,
  "offlineSessionMaxLifespanEnabled": false,
  "otpPolicyAlgorithm": "HmacSHA1",
  "otpPolicyDigits": 6,
  "otpPolicyInitialCounter": 0,
  "otpPolicyLookAheadWindow": 1,
  "otpPolicyPeriod": 30,
  "otpPolicyType": "totp",
  "otpSupportedApplications": [
    "FreeOTP",
    "Google Authenticator"
  ],
  "passwordPolicy": "regexPattern(^(?=.*?[0-9])(?=.*?[A-Za-z]).{8,}$)",
  "permanentLockout": false,
  "quickLoginCheckMilliSeconds": 1000,
  "realm": "sens-webapp",
  "refreshTokenMaxReuse": 0,
  "registrationAllowed": false,
  "registrationEmailAsUsername": false,
  "registrationFlow": "registration",
  "rememberMe": false,
  "requiredActions": [
    {
      "alias": "CONFIGURE_TOTP",
      "config": {},
      "defaultAction": false,
      "enabled": true,
      "name": "Configure OTP",
      "priority": 10,
      "providerId": "CONFIGURE_TOTP"
    },
    {
      "alias": "UPDATE_PASSWORD",
      "config": {},
      "defaultAction": false,
      "enabled": true,
      "name": "Update Password",
      "priority": 30,
      "providerId": "UPDATE_PASSWORD"
    },
    {
      "alias": "UPDATE_PROFILE",
      "config": {},
      "defaultAction": false,
      "enabled": true,
      "name": "Update Profile",
      "priority": 40,
      "providerId": "UPDATE_PROFILE"
    },
    {
      "alias": "VERIFY_EMAIL",
      "config": {},
      "defaultAction": false,
      "enabled": true,
      "name": "Verify Email",
      "priority": 50,
      "providerId": "VERIFY_EMAIL"
    },
    {
      "alias": "terms_and_conditions",
      "config": {},
      "defaultAction": false,
      "enabled": false,
      "name": "Terms and Conditions",
      "priority": 20,
      "providerId": "terms_and_conditions"
    }
  ],
  "requiredCredentials": [
    "password"
  ],
  "resetCredentialsFlow": "reset credentials",
  "resetPasswordAllowed": false,
  "revokeRefreshToken": false,
  "roles": {
    "client": {
      "account": [
        {
          "attributes": {},
          "clientRole": true,
          "composite": true,
          "composites": {
            "client": {
              "account": [
                "manage-account-links"
              ]
            }
          },
          "description": "${role_manage-account}",
          "name": "manage-account"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "description": "${role_manage-account-links}",
          "name": "manage-account-links"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "description": "${role_view-profile}",
          "name": "view-profile"
        }
      ],
      "admin-cli": [],
      "backend": [
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "name": "audit-generate-report"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "name": "uma_protection"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "name": "user-manage"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "name": "user-view"
        }
      ],
      "broker": [
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "description": "${role_read-token}",
          "name": "read-token"
        }
      ],
      "frontend": [
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "name": "audit_generate_report"
        }
      ],
      "realm-management": [
        {
          "attributes": {},
          "clientRole": true,
          "composite": true,
          "composites": {
            "client": {
              "realm-management": [
                "create-client",
                "impersonation",
                "manage-authorization",
                "manage-clients",
                "manage-events",
                "manage-identity-providers",
                "manage-realm",
                "manage-users",
                "query-clients",
                "query-groups",
                "query-realms",
                "query-users",
                "view-authorization",
                "view-clients",
                "view-events",
                "view-identity-providers",
                "view-realm",
                "view-users"
              ]
            }
          },
          "description": "${role_realm-admin}",
          "name": "realm-admin"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": true,
          "composites": {
            "client": {
              "realm-management": [
                "query-clients"
              ]
            }
          },
          "description": "${role_view-clients}",
          "name": "view-clients"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": true,
          "composites": {
            "client": {
              "realm-management": [
                "query-groups",
                "query-users"
              ]
            }
          },
          "description": "${role_view-users}",
          "name": "view-users"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "description": "${role_create-client}",
          "name": "create-client"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "description": "${role_impersonation}",
          "name": "impersonation"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "description": "${role_manage-authorization}",
          "name": "manage-authorization"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "description": "${role_manage-clients}",
          "name": "manage-clients"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "description": "${role_manage-events}",
          "name": "manage-events"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "description": "${role_manage-identity-providers}",
          "name": "manage-identity-providers"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "description": "${role_manage-realm}",
          "name": "manage-realm"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "description": "${role_manage-users}",
          "name": "manage-users"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "description": "${role_query-clients}",
          "name": "query-clients"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "description": "${role_query-groups}",
          "name": "query-groups"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "description": "${role_query-realms}",
          "name": "query-realms"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "description": "${role_query-users}",
          "name": "query-users"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "description": "${role_view-authorization}",
          "name": "view-authorization"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "description": "${role_view-events}",
          "name": "view-events"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "description": "${role_view-identity-providers}",
          "name": "view-identity-providers"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "description": "${role_view-realm}",
          "name": "view-realm"
        }
      ],
      "report-cli": [],
      "security-admin-console": []
    },
    "realm": [
      {
        "attributes": {
          "origin": [
            "webapp"
          ]
        },
        "clientRole": false,
        "composite": true,
        "composites": {
          "client": {
            "account": [
              "view-profile"
            ]
          }
        },
        "name": "Analyst"
      },
      {
        "attributes": {
          "origin": [
            "webapp"
          ]
        },
        "clientRole": false,
        "composite": true,
        "composites": {
          "client": {
            "account": [
              "view-profile"
            ]
          }
        },
        "name": "Business Operator"
      },
      {
        "attributes": {
          "origin": [
            "webapp"
          ]
        },
        "clientRole": false,
        "composite": true,
        "composites": {
          "client": {
            "account": [
              "view-profile"
            ],
            "backend": [
              "audit-generate-report"
            ]
          }
        },
        "name": "Auditor"
      },
      {
        "attributes": {
          "origin": [
            "webapp"
          ]
        },
        "clientRole": false,
        "composite": true,
        "composites": {
          "realm": [
            "Analyst",
            "Auditor",
            "Business Operator"
          ]
        },
        "name": "Admin"
      },
      {
        "attributes": {},
        "clientRole": false,
        "composite": false,
        "description": "${role_offline-access}",
        "name": "offline_access"
      },
      {
        "attributes": {},
        "clientRole": false,
        "composite": false,
        "description": "${role_uma_authorization}",
        "name": "uma_authorization"
      }
    ]
  },
  "scopeMappings": [
    {
      "client": "report-cli",
      "roles": [
        "Auditor",
        "uma_authorization"
      ]
    },
    {
      "clientScope": "offline_access",
      "roles": [
        "offline_access"
      ]
    }
  ],
  "smtpServer": {},
  "sslRequired": "external",
  "ssoSessionIdleTimeout": 1800,
  "ssoSessionIdleTimeoutRememberMe": 0,
  "ssoSessionMaxLifespan": 36000,
  "ssoSessionMaxLifespanRememberMe": 0,
  "supportedLocales": [],
  "userManagedAccessAllowed": false,
  "users": [
    {
      "attributes": {
        "origin": [
          "SENS"
        ]
      },
      "clientRoles": {
        "account": [
          "manage-account"
        ]
      },
      "createdTimestamp": 1583844544472,
      "credentials": [
        {
          "createdDate": 1583844555320,
          "credentialData": "{\"hashIterations\":27500,\"algorithm\":\"pbkdf2-sha256\"}",
          "secretData": "{\"value\":\"XyyKCpAg5i/qxVXXnVDYvjE3lO1zQwr2oSURgpK3fJuMoRpkuOfrUUTxD60DoiUzT6rg80sgcG8c1PD3f8+1FQ==\",\"salt\":\"tiYEAzYB2302FEgvvHgPJg==\"}",
          "type": "password"
        }
      ],
      "disableableCredentialTypes": [],
      "emailVerified": true,
      "enabled": true,
      "firstName": "Admin First Name",
      "groups": [],
      "lastName": "Admin Surname",
      "notBefore": 0,
      "realmRoles": [
        "Admin"
      ],
      "requiredActions": [],
      "totp": false,
      "username": "admin"
    },
    {
      "attributes": {
        "origin": [
          "SENS"
        ]
      },
      "clientRoles": {
        "account": [
          "manage-account"
        ]
      },
      "createdTimestamp": 1583844732030,
      "credentials": [
        {
          "createdDate": 1583844747191,
          "credentialData": "{\"hashIterations\":27500,\"algorithm\":\"pbkdf2-sha256\"}",
          "secretData": "{\"value\":\"RFqlb6JGZDQEIvdlnxI0GHDMiIgfa5eupUmQzfNSCHLURrA/k6W9GP9NrSb15ZHZG9tm3YMfZpFGXzOhpY0SVQ==\",\"salt\":\"8QllFuKyd/Tuqnv9A+RUSg==\"}",
          "type": "password"
        }
      ],
      "disableableCredentialTypes": [],
      "emailVerified": true,
      "enabled": true,
      "firstName": "Auditor First Name",
      "groups": [],
      "lastName": "Auditor Surname",
      "notBefore": 0,
      "realmRoles": [
        "Auditor"
      ],
      "requiredActions": [],
      "totp": false,
      "username": "auditor"
    },
    {
      "attributes": {
        "origin": [
          "SENS"
        ]
      },
      "clientRoles": {
        "account": [
          "manage-account"
        ]
      },
      "createdTimestamp": 1583844795188,
      "credentials": [
        {
          "createdDate": 1583844811304,
          "credentialData": "{\"hashIterations\":27500,\"algorithm\":\"pbkdf2-sha256\"}",
          "secretData": "{\"value\":\"pHO3vc1K/zJcZEorI9EUR8NZid3k33gbeIAn4+s8YOLd/VXAfcQ2jYy81xN1r20cVGq1ZGZ+hmHuB2ZL7G3u+Q==\",\"salt\":\"oDfJrwVFu01aNYGd8jrjtg==\"}",
          "type": "password"
        }
      ],
      "disableableCredentialTypes": [],
      "emailVerified": true,
      "enabled": true,
      "firstName": "Analyst First Name",
      "groups": [],
      "lastName": "Analyst Surname",
      "notBefore": 0,
      "realmRoles": [
        "Analyst"
      ],
      "requiredActions": [],
      "totp": false,
      "username": "analyst"
    },
    {
      "attributes": {
        "origin": [
          "SENS"
        ]
      },
      "clientRoles": {
        "account": [
          "manage-account"
        ]
      },
      "createdTimestamp": 1583844851585,
      "credentials": [
        {
          "createdDate": 1583844876289,
          "credentialData": "{\"hashIterations\":27500,\"algorithm\":\"pbkdf2-sha256\"}",
          "secretData": "{\"value\":\"5i8p1upLYUa1yYeoNZh1BBjGWiHG02MbAT5mNEBad1VezXK3NqxKn9/Gkhgq1kcinE4cqVDCIxoy+BW+r2eJ4g==\",\"salt\":\"WHiMXD6oCne67nwxS9/Wqg==\"}",
          "type": "password"
        }
      ],
      "disableableCredentialTypes": [],
      "emailVerified": true,
      "enabled": true,
      "firstName": "Business Operator First Name",
      "groups": [],
      "lastName": "Business Operator Surname",
      "notBefore": 0,
      "realmRoles": [
        "Business Operator"
      ],
      "requiredActions": [],
      "totp": false,
      "username": "business_operator"
    },
    {
      "attributes": {
        "origin": [
          "GNS"
        ]
      },
      "clientRoles": {
        "account": [
          "manage-account",
          "view-profile"
        ]
      },
      "createdTimestamp": 1585056761380,
      "credentials": [],
      "disableableCredentialTypes": [],
      "emailVerified": false,
      "enabled": true,
      "groups": [],
      "notBefore": 0,
      "realmRoles": [
        "Analyst"
      ],
      "requiredActions": [],
      "totp": false,
      "username": "scb-user-1"
    },
    {
      "clientRoles": {
        "account": [
          "manage-account"
        ]
      },
      "createdTimestamp": 1583246982209,
      "credentials": [],
      "disableableCredentialTypes": [],
      "emailVerified": false,
      "enabled": true,
      "groups": [],
      "notBefore": 0,
      "realmRoles": [
        "Auditor",
        "offline_access",
        "uma_authorization"
      ],
      "requiredActions": [],
      "serviceAccountClientId": "report-cli",
      "totp": false,
      "username": "service-account-report-cli"
    },
    {
      "clientRoles": {
        "account": [
          "manage-account"
        ],
        "backend": [
          "uma_protection"
        ],
        "realm-management": [
          "manage-authorization",
          "manage-users",
          "query-users",
          "realm-admin"
        ]
      },
      "createdTimestamp": 1583246982010,
      "credentials": [],
      "disableableCredentialTypes": [],
      "emailVerified": false,
      "enabled": true,
      "groups": [],
      "notBefore": 0,
      "realmRoles": [
        "Admin",
        "offline_access",
        "uma_authorization"
      ],
      "requiredActions": [],
      "serviceAccountClientId": "backend",
      "totp": false,
      "username": "service-account-backend"
    }
  ],
  "verifyEmail": false,
  "waitIncrementSeconds": 60,
  "webAuthnPolicyAcceptableAaguids": [],
  "webAuthnPolicyAttestationConveyancePreference": "not specified",
  "webAuthnPolicyAuthenticatorAttachment": "not specified",
  "webAuthnPolicyAvoidSameAuthenticatorRegister": false,
  "webAuthnPolicyCreateTimeout": 0,
  "webAuthnPolicyRequireResidentKey": "not specified",
  "webAuthnPolicyRpEntityName": "keycloak",
  "webAuthnPolicyRpId": "",
  "webAuthnPolicySignatureAlgorithms": [
    "ES256"
  ],
  "webAuthnPolicyUserVerificationRequirement": "not specified"
}
