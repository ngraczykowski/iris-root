syntax = "proto3";

package silenteight.datasource.comments.api.v1;

import "google/api/annotations.proto";
import "google/protobuf/struct.proto";
import "google/api/field_behavior.proto";

option java_package = "com.silenteight.datasource.comments.api.v1";
option java_outer_classname = "CommentInputProto";
option java_multiple_files = true;

service CommentInputService {
  rpc StreamCommentInputs (StreamCommentInputsRequest) returns (stream CommentInput) {
    option (google.api.http) = {
      post: "/comment-inputs/v1/alerts:batchGet"
      body: "*"
    };
  }
}

message StreamCommentInputsRequest {
  // The list of alert names to which comment inputs are requested, in form of `alerts/<Alert ID>`.
  repeated string alerts = 1 [(google.api.field_behavior) = REQUIRED];
}

// Comment input contains alert and match data required to generate a comment from a template.
message CommentInput {
  // Alert name in form of `alerts/<Alert ID>`.
  string alert = 1;

  // Generic Struct which contains nested objects with comment input for alert.
  // Example content: alert metadata.
  google.protobuf.Struct alert_comment_input = 2;

  // List of match comment inputs.
  repeated MatchCommentInput match_comment_inputs = 3;
}

// Match Comment input contains match data required to generate a comment from a template.
message MatchCommentInput {
  // Match name in form of `alerts/<Alert ID>/matches/<Match ID>`.
  string match = 1;

  // Generic Struct which contains nested objects with comment input for match.
  // Example content: agent inputs, match metadata.
  google.protobuf.Struct comment_input = 2;
}
