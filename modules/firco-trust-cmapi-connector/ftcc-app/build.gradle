plugins {
  id "java"
  id "groovy"
  id "org.springframework.boot"
  id "io.freefair.aspectj.post-compile-weaving"
  id "com.google.cloud.tools.jib"
}

description = "Firco Trust CMAPI Connector"

dependencies {
  implementation project(":ftcc-common")
  implementation project(":ftcc-callback")
  implementation project(":ftcc-db-changelog")
  implementation project(":ftcc-ingest")
  implementation project(":ftcc-request")

  // Base Libraries
  implementation libraries.silenteight_sep_base_common
  implementation libraries.silenteight_commons_app

  implementation libraries.core_bridge_registration_connector_lib
  implementation libraries.core_bridge_registration_connector_proto
  implementation libraries.recommendation_api_library
  implementation libraries.recommendation_internal_protos
  implementation libraries.sear_rabbitmq_common_schema
  implementation libraries.fab_cmapi_connector_api

  // Utilities
  implementation libraries.commons_lang3

  // Application Starters
  implementation libraries.spring_boot_starter_actuator
  implementation libraries.spring_boot_starter_logging
  implementation libraries.spring_boot_starter_undertow
  implementation libraries.spring_boot_starter_web

  // Jackson
  implementation libraries.jackson_annotations
  implementation libraries.jackson_databind
  runtimeOnly libraries.jackson_datatype_jdk8
  runtimeOnly libraries.jackson_datatype_jsr310
  runtimeOnly libraries.jackson_module_afterburner
  runtimeOnly libraries.jackson_module_paranamer
  runtimeOnly libraries.jackson_module_parameter_names

  // Database
  implementation libraries.spring_boot_starter_data_jpa
  implementation libraries.spring_boot_starter_jdbc
  implementation libraries.liquibase_core
  implementation libraries.hikari_cp
  runtimeOnly libraries.postgresql
  runtimeOnly libraries.liquibase_sessionlock

  // Validator
  implementation libraries.hibernate_validator

  // Messaging
  implementation libraries.amqp_client
  implementation libraries.lz4_java

  // gRPC
  implementation libraries.grpc_api
  implementation libraries.grpc_stub
  implementation libraries.grpc_client_spring_boot_starter
  implementation libraries.grpc_server_spring_boot_starter

  //Consul
  runtimeOnly libraries.spring_cloud_consul_discovery
  runtimeOnly libraries.spring_cloud_starter_consul_config

  //Prometheus
  runtimeOnly libraries.micrometer_prometheus

  //Sentry
  runtimeOnly libraries.sentry_spring_boot_starter
  runtimeOnly libraries.sentry_logback

  testImplementation libraries.silenteight_sep_base_testing
  testImplementation project(":ftcc-common-testing")
  testImplementation libraries.groovy_wslite
  testImplementation libraries.jsonassert
  testImplementation libraries.wiremock

  aspect libraries.silenteight_sep_base_aspects
}

jar {
  manifest {
    attributes "Main-Class": "com.silenteight.connector.ftcc.app.FtccApplication"
  }
}

publishing {
  publications {
    bootJava(MavenPublication) {
      artifact bootJar
    }
  }
}

jib {
  from {
    // NOTE(ahaczewski): Use debug version of the image for SNAPSHOT builds.
    def imageTag = "$version".endsWith("-SNAPSHOT") ? "debug-nonroot" : "nonroot"
    image = "gcr.io/distroless/java11-debian11:" + imageTag
  }
  to {
    image = "docker.repo.silenteight.com/ftcc/${project.name}:${version}"
    if ("$version".contains("-BUILD") || "$version".endsWith("-SNAPSHOT")) {
      tags = ["snapshot"]
    } else {
      tags = ["latest"]
    }
  }
  container {
    jvmFlags = [
        "-XX:MaxRAMPercentage=75",
        "-Dfile.encoding=UTF-8",
        "-Dsun.jnu.encoding=UTF-8",
        "-Djava.net.preferIPv4Stack=true",
        "-Djava.io.tmpdir=/tmp",
        "-Dserver.port=8080",
        "-Dgrpc.server.port=9090"
    ]
    ports = ["8080", "9090"]
    user = "nonroot"
    workingDirectory = "/silenteight"
  }
}
