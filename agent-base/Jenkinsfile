@Library('pipeline-shared-library@github') _
def jenkins = new com.silenteight.jenkins.ci.Jenkins()

pipeline {
    agent {
        label 'ec2-agent'
    }
    environment {
        PYPI_URL = credentials('pypi-readonly-url')
        TWINE_REPOSITORY_URL = 'https://repo.silenteight.com/artifactory/api/pypi/pypi'
    }
    options {
        timeout(time: 1, unit: 'HOURS')   // just to be safe
    }
    parameters {
        booleanParam(name: 'RELEASE', defaultValue: false, description: 'Release new version')
    }

    stages {
        stage('Build and publish package') {
            agent {
                docker {
                    image 'docker.repo.silenteight.com/python-build-image:3.7-bullseye'
                    args '--volume $HOME/.cache/agent/pip:/home/jenkins/.cache/pip'
                    reuseNode true
                }
            }
            stages {
                stage('Get commit msg') {
                    steps {
                        script {
                            env.COMMIT_TYPE = sh (
                                script: "git log -1 --pretty=%B | grep : | cut -d ':' -f 1",
                                returnStdout: true
                            ).trim()
                        }
                        echo "${COMMIT_TYPE}"
                    }
                }
                stage('Prepare') {
                    steps {
                        sh 'pip install --index-url "${PYPI_URL}" --requirement requirements.txt'
                    }
                }
                stage('Build package') {
                    steps {
                        sh './scripts/clean.sh'
                        sh './scripts/build.sh --index-url "${PYPI_URL}"'
                        script {
                           env.VERSION = sh(
                            returnStdout: true,
                            script: '''#!/bin/bash
                                grep ^current_version setup.cfg | awk '{ print $3 }'
                            '''
                           ).trim()
                        }
                    }
                }
                stage('Test package') {
                    steps {
                        sh 'pip install --index-url "${PYPI_URL}" tox'
                        sh './scripts/test.sh --index-url "${PYPI_URL}"'
                    }
                }
                stage('Publish package') {
                    when {
                        allOf {
                            anyOf {
                                branch 'master'
                                branch pattern: 'RELEASE-.*', comparator: 'REGEXP'
                            }
                            expression { env.COMMIT_TYPE != "Bump version" }
                        }
                    }
                    steps {
                        withCredentials([usernamePassword(
                            credentialsId: 'pypi-deployment-user',
                            usernameVariable: 'TWINE_USERNAME',
                            passwordVariable: 'TWINE_PASSWORD',
                        )]) {
                            sh './scripts/publish.sh --index-url "${PYPI_URL}"'
                            sh 'git tag --delete $(git tag --list)'

                            sshagent([env.JENKINS_SSH_NAME]) {
                                sh './scripts/tag_and_bump_version.sh'
                            }
                        }
                    }
                }
                stage('Release package') {
                    when {
                        allOf {
                            anyOf {
                                branch 'master'
                                branch pattern: 'RELEASE-.*', comparator: 'REGEXP'
                            }
                            expression { return params.RELEASE }
                        }
                    }
                    steps {
                        sh 'pip install --index-url "${PYPI_URL}" bump2version tox'
                        sh 'git tag --delete $(git tag --list)'
                        sshagent([env.JENKINS_SSH_NAME]) {
                            sh './scripts/release.sh --index-url ${PYPI_URL}'
                        }
                        withCredentials([usernamePassword(
                            credentialsId: 'pypi-deployment-user',
                            usernameVariable: 'TWINE_USERNAME',
                            passwordVariable: 'TWINE_PASSWORD',
                        )]) {
                            sh './scripts/publish.sh --index-url "${PYPI_URL}"'
                        }
                    }
                }
            }
            post {
                always {
                    junit testResults: '.tox/flake8-report.xml, .tox/mypy-report.xml, .tox/pytest-report.xml',
                          allowEmptyResults: true
                    archiveArtifacts artifacts: 'dist/*', fingerprint: true
                }
                success {
                    publishCoverage adapters: [istanbulCoberturaAdapter('.tox/coverage-report.xml')],
                                    failNoReports: false
                    stash includes: 'dist/*', name: 'artifacts'
                }
            }
        }
    }
}

