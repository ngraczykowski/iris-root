# String to partially override spring.fullname template (will maintain the release name)
nameOverride: ""
# String to fully override spring.fullname template
fullnameOverride: ""

#
# Common for all components
#
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
# fsGroup: 2000

securityContext: {}
# capabilities:
#   drop:
#   - ALL
# readOnlyRootFilesystem: true
# runAsNonRoot: true
# runAsUser: 1000

#
# PostgreSQL database
#
database:
  enabled: true

  volume:
    size: 50Gi

  numberOfInstances: 1

  postgresql:
    version: "12"

#
# RabbitMQ
#
rabbitmq:
  enabled: true

  replicas: 1
  persistence: {}
  # storageClassName: gp3
  # storage: 10Gi

  resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

  annotations: {}
  tolerations: []
  affinity: {}

#
# Mailhog
#
mailhog:
  enabled: true

  image:
    repository: docker.io/mailhog/mailhog
    tag: "v1.0.1"
    pullPolicy: IfNotPresent
    pullSecrets: []

  service:
    annotations: {}
    clusterIP: ""
    externalIPs: []
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    type: ClusterIP
    port:
      http: 8025
      smtp: 1025
    nodePort:
      http: ""
      smtp: ""

  securityContext:
    runAsUser: 1000
    runAsGroup: 1000
    runAsNonRoot: true
    fsGroup: 1000

  containerSecurityContext:
    readOnlyRootFilesystem: true
    privileged: false
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL

  auth:
    enabled: true
    existingSecret: ""
    fileName: auth.txt
    # User/password is test/test
    fileContents: |
      test:$2a$04$qxRo.ftFoNep7ld/5jfKtuBTnGqff/fZVyj53mUC5sVf9dtDLAi/S

  extraEnv: []

  priorityClassName: ""

  podAnnotations: {}

  podLabels: {}

  resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

  affinity: {}

  nodeSelector: {}

  tolerations: []

#
# Common Ingress configuration
#
ingress:
  className: ""
  annotations: {}
  # kubernetes.io/ingress.class: nginx-internal
  ## hosts is a list of host names to expose ingress for.
  ## Defaults to <release name>-<namespace>.prv.dev.s8ops.com
  hosts: []
  # - sear-example.local
  tls: []
  # - secretName: sear-example-tls
  #   hosts:
  #     - sear-example.local

#
# Configuration common for all components
#
common:
  # which component templates to use; supported: spring, pythonagent
  type: spring
  # enable component
  enabled: true
  # use rabbit (inject rabbit secrets)
  rabbit:
    enabled: true                 # component is using rabbit connection
    external: false               # component is using externally provided rabbit server
    check: true                   # use initContainer to check availability; warn: it's using port 15672 and rest api
    host: ""                      # required if external==true
    port: 5672                    # required if external==true
    username: ""                  # required if external==true
    password: ""                  # required if external==true
  # configure db
  db:
    enabled: true                 # component is using database connection
    external: false               # component is using externally provided postgres server
    name: ""                      # required if external==true
    host: ""                      # required if external==true
    port: 5432                    # required if external==true
    options: "sslmode=require&\
      sslfactory=org.postgresql.\
      ssl.NonValidatingFactory"   # append option to jdbc url
    username: ""                  # required if external==true
    password: ""                  # required if external==true
  configServer:
    enabled: false
  # std k8s docker image settings
  image:
    repository: ""
    tag: ""
    pullPolicy: IfNotPresent
    pullSecrets: []

  replicaCount: 1

  # override docker entrypoint command
  command: []

  # override docker command arguments
  # values defined in "common", "agentCommon" and specified component are _concatenated_ together
  args: []
  # - --spring.profiles.active=dev

  # inject additional configuration files (eg into /etc/spring/ for type: spring)
  # currently only supported for type: spring
  configFiles: {}
  # application.yml: |
  #   logging:
  #     level:
  #       com.silenteight: DEBUG

  # inject --spring.profiles.include=[] into cmd arguments; only applicable for type: spring
  profiles: []

  # inject --<property>=<value> into cmd arguments; only applicable for type: spring
  properties: {}

  # inject additional yaml entries into default config files:
  # - /app/config/application.yaml for type: pythonagent
  # (note - /app/config/application.yaml support os environment variables - see "configmap-init-scripts.yaml.tpl")
  additionalConfig: {}

  # inject amqp specific parameters; currently used for type: pythonagent (see "configmap-init-scripts.yaml.tpl")
  amqp: {}

  # inject sentry specific parameters into spring apps (--sentry.dsn, --sentry.environment)
  sentry:
    dsn: ""
    environment: ""

  resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

  # reportDeployments control if deployment info is pushed into integrated Grafana
  reportDeployments: false

  service:
    # Determines how the Service is exposed. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer.
    type: ClusterIP
    http:
      port: 8080
    grpc:
      enabled: true
      port: 9090

  containerPorts:
    http:
      port: 8080
    management:
      port: 8081
    grpc:
      enabled: true
      port: 9090

  startupProbe:
    enabled: true
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 1
    failureThreshold: 30

  livenessProbe:
    enabled: true
    periodSeconds: 10
    timeoutSeconds: 1
    failureThreshold: 3

  readinessProbe:
    enabled: true
    periodSeconds: 10
    timeoutSeconds: 1
    successThreshold: 1
    failureThreshold: 3

  ingress:
    enabled: true

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  nodeSelector: {}
  tolerations: []
  affinity: {}

## override "common" node for agent deployments only
agentsCommon:
  enabled: false
  db:
    enabled: false
  image:
    tag: "latest"
  ingress:
    enabled: false

#
# Declare and customize components
#
# Each component can have the following parameters customized:
#
#   db.name  - (String) name of the database. Defaults to the component name.
#   webPath - (String) URL path of this component. Defaults to the component name.
#
# You can also overwrite the `common` configuration, by configuring the following values:
#
#   replicaCount: 1
#   args: []
#   configFiles: {}
#   resources: {}
#   service: {}
#   containerPorts: {}
#   startupProbe: {}
#   livenessProbe: {}
#   readinessProbe: {}
#   ingress: {}
#   autoscaling: {}
#   nodeSelector: {}
#   tolerations: []
#   affinity: {}
#
components:
  hsbc-bridge:
    enabled: false
    image:
      repository: registry.dev.s8ops.com/iris/hsbc-bridge-app

    db:
      name: "hb"
    webPath: "hsbc-bridge"

  scb-bridge:
    enabled: false
    image:
      repository: registry.dev.s8ops.com/iris/scb-bridge-app

    db:
      name: "scbb"
    webPath: "scb-bridge"

  #FAB bridge start
  ftcc:
    enabled: false

    image:
      repository: registry.dev.s8ops.com/iris/ftcc-app

    db:
      name: "ftcc"
    webPath: "ftcc"

  dataprep:
    enabled: false

    image:
      repository: registry.dev.s8ops.com/iris/dataprep-app
  #Fab bridge end

  core-bridge:
    enabled: false

    image:
      repository: registry.dev.s8ops.com/iris/bridge-app
    db:
      name: "cb"
    webPath: cb

  payments-bridge:
    enabled: false

    image:
      repository: registry.dev.s8ops.com/iris/sear-payments-bridge-app

    db:
      name: "pb"
    webPath: "pb"
    name: "pb"

  universal-data-source:
    image:
      repository: registry.dev.s8ops.com/iris/universal-data-source-app

    db:
      name: "uds"
    webPath: "uds"

  adjudication-engine:
    image:
      repository: registry.dev.s8ops.com/iris/adjudication-engine-app

    db:
      name: "ae"
    webPath: "ae"
    name: ae
    configServer:
      enabled: true

  governance:
    image:
      repository: registry.dev.s8ops.com/iris/governance-app
    configServer:
      enabled: true

  simulator:
    image:
      repository: registry.dev.s8ops.com/iris/simulator-app
    configServer:
      enabled: true

  webapp:
    image:
      repository: registry.dev.s8ops.com/iris/sens-webapp-backend
    configServer:
      enabled: true

  warehouse:
    image:
      repository: registry.dev.s8ops.com/iris/warehouse-app
    configServer:
      enabled: true

  e2e-helper:
    enabled: false
    configServer:
      enabled: true
    db:
      enabled: false
    rabbit:
      enabled: false
    replicaCount: 1
    image:
      repository: registry.dev.s8ops.com/iris/e2e-helper

  config-server:
    enabled: false
    useDb: false
    useRabbit: false
    ingress:
      enabled: false
    image:
      repository: registry.dev.s8ops.com/iris/config-server


# FIXME(pputerla) - remark - we're missing list of supported component keys
agents:
  name-agent:
    image:
      repository: registry.dev.s8ops.com/linguistics-agent
  date-agent:
    image:
      repository: registry.dev.s8ops.com/date-agent
  document-comparer-agent:
    command:
      - "/docker-entrypoint.sh"
      - "comparer"
    image:
      repository: registry.dev.s8ops.com/document-agent
  document-recognizer-agent:
    command:
      - "/docker-entrypoint.sh"
      - "recognizer"
    image:
      repository: registry.dev.s8ops.com/document-agent
  document-number-agent:
    command:
      - "/docker-entrypoint.sh"
      - "number"
    image:
      repository: registry.dev.s8ops.com/document-agent
  geo-agent:
    image:
      repository: registry.dev.s8ops.com/geo-agent-default
  learning-engine:
    db:
      enabled: true
      name: "learningengine"
    image:
      repository: registry.dev.s8ops.com/learning-engine-default
  watchlist-agent:
    image:
      repository: registry.dev.s8ops.com/watchlist-agent-default
  historical-decisions-agent:
    db:
      enabled: true
      name: "historicaldecisions"
    image:
      repository: registry.dev.s8ops.com/historical-decisions-agent
  allow-list-agent:
    image:
      repository: registry.dev.s8ops.com/allow-list-agent-default
  country-agent:
    image:
      repository: registry.dev.s8ops.com/country-agent
  freetext-agent:
    image:
      repository: registry.dev.s8ops.com/freetext-agent
  gender-agent:
    image:
      repository: registry.dev.s8ops.com/gender-agent
  region-agent:
    image:
      repository: registry.dev.s8ops.com/region-agent
  organization-name-agent:
    type: pythonagent
    image:
      repository: registry.dev.s8ops.com/organization-name-agent
  company-name-surrounding-agent:
    type: pythonagent
    image:
      repository: registry.dev.s8ops.com/company-name-surrounding-agent
    additionalConfig:
      solution_rules:
        - solution: 0
          lower_bound: 0
          upper_bound: 0
        - solution: 1
          lower_bound: 1
          upper_bound: 1
        - solution: 2
          lower_bound: 2
          upper_bound: 2
        - solution: 3
          lower_bound: 3
          upper_bound: 3
        - solution: 4
          lower_bound: 4
          upper_bound: 4
        - solution: 5+
          lower_bound: 5
          upper_bound: 1000000
      default_response: AGENT_ERROR
  hit-type-name-agent:
    type: pythonagent
    image:
      repository: registry.dev.s8ops.com/hit-type-name-agent


#
# Frontend Web Application
#
frontend:
  replicaCount: 1

  image:
    repository: registry.dev.s8ops.com/sep-front-app
    tag: "latest"
    pullPolicy: IfNotPresent
    pullSecrets: []

  service:
    type: ClusterIP
    port: 80

  ingress:
    enabled: true

  resources: {}

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  nodeSelector: {}
  tolerations: []
  affinity: {}

#
# KeyCloak
#
# Configuration of all the values below is required.
#
keycloak:
  auth:
    adminUser: admin
    adminPassword: secret
  extraEnvVars:
    - name: KEYCLOAK_EXTRA_ARGS
      value: "-Dkeycloak.import=/config/realm.json"
    - name: KEYCLOAK_PROXY_ADDRESS_FORWARDING
      value: "true"
  extraVolumeMounts:
    - name: config
      mountPath: "/config"
      readOnly: true
  extraVolumes:
    - name: config
      configMap:
        name: keycloak-dev-realm
        items:
          - key: "realm.json"
            path: "realm.json"
  ingress:
    enabled: true
    #TODO(dsniezek) now it places with set - we should use helmfile?
    hostname: "change me"
    path: /auth
    tls: true
    annotations:
      kubernetes.io/ingress.class: nginx-internal
  postgresql:
    enabled: false
  externalDatabase:
    #TODO(dsniezek) now it places with set - we should use helmfile?
    host: "change me"
    user: keycloak
    database: keycloak
    #TODO(dsniezek) now it places with set - we should use helmfile?
    existingSecret: "change me"
  readinessProbe:
    enabled: false
  customReadinessProbe:
    failureThreshold: 3
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
    httpGet:
      path: /auth/realms/Dev
      port: http
  startupProbe:
    enabled: false
  customStartupProbe:
    failureThreshold: 60
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
    httpGet:
      path: /auth/realms/Dev
      port: http

  #Start of IRIS "keycloak" values
  internal: true
  authServerUrl: 'https://{{- .Values.ingress.hosts | default (list (include "sear.defaultHost" $)) | first }}/auth'
  realm: Dev
  frontend:
    clientId: frontend
    redirectUri: 'https://{{- .Values.ingress.hosts | default (list (include "sear.defaultHost" $)) | first }}/*'
  backend:
    clientId: backend
    clientSecret: 5f8909cc-dd98-11ec-a941-7f28fefdd672
  cmapi:
    clientId: dev-cmapi
    clientSecret: 468e81d6-ddca-11ec-bb7e-679f3017e8de
  kibana:
    clientId: kibana-sso

oracle-xe:
  enabled: false
