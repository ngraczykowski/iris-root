# String to partially override spring.fullname template (will maintain the release name)
nameOverride: ""
# String to fully override spring.fullname template
fullnameOverride: ""

#
# Common for all components
#
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
# fsGroup: 2000

securityContext: {}
# capabilities:
#   drop:
#   - ALL
# readOnlyRootFilesystem: true
# runAsNonRoot: true
# runAsUser: 1000

#
# PostgreSQL database
#
database:
  enabled: true

  volume:
    size: 50Gi

  numberOfInstances: 1

  postgresql:
    version: "12"

#
# RabbitMQ
#
rabbitmq:
  enabled: true

  replicas: 1
  persistence: {}
  # storageClassName: gp3
  # storage: 10Gi

  resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

  annotations: {}
  tolerations: []
  affinity: {}

#
# Mailhog
#
mailhog:
  enabled: true

  image:
    repository: docker.io/mailhog/mailhog
    tag: "v1.0.1"
    pullPolicy: IfNotPresent
    pullSecrets: []

  service:
    annotations: {}
    clusterIP: ""
    externalIPs: []
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    type: ClusterIP
    port:
      http: 8025
      smtp: 1025
    nodePort:
      http: ""
      smtp: ""

  securityContext:
    runAsUser: 1000
    runAsGroup: 1000
    runAsNonRoot: true
    fsGroup: 1000

  containerSecurityContext:
    readOnlyRootFilesystem: true
    privileged: false
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL

  auth:
    enabled: true
    existingSecret: ""
    fileName: auth.txt
    # User/password is test/test
    fileContents: |
      test:$2a$04$qxRo.ftFoNep7ld/5jfKtuBTnGqff/fZVyj53mUC5sVf9dtDLAi/S

  extraEnv: []

  priorityClassName: ""

  podAnnotations: {}

  podLabels: {}

  resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

  affinity: {}

  nodeSelector: {}

  tolerations: []

#
# Common Ingress configuration
#
ingress:
  className: ""
  annotations: {}
  # kubernetes.io/ingress.class: nginx-internal
  ## hosts is a list of host names to expose ingress for.
  ## Defaults to <release name>-<namespace>.prv.dev.s8ops.com
  hosts: []
  # - sear-example.local
  tls: []
  # - secretName: sear-example-tls
  #   hosts:
  #     - sear-example.local

#
# Configuration common for all components
#
common:
  type: spring
  enabled: true
  useDb: true
  dbName: ""
  image:
    pullPolicy: IfNotPresent
    pullSecrets: []

  replicaCount: 1

  command: []

  args: []
  # - --spring.profiles.active=dev

  configFiles: {}
  # application.yml: |
  #   logging:
  #     level:
  #       com.silenteight: DEBUG

  profiles: []

  properties: {}

  sentry:
    dsn: ""
    environment: ""

  resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

  service:
    # Determines how the Service is exposed. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer.
    type: ClusterIP
    http:
      port: 8080
    grpc:
      enabled: true
      port: 9090

  containerPorts:
    http:
      port: 8080
    management:
      port: 8081
    grpc:
      enabled: true
      port: 9090

  startupProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 1
    failureThreshold: 6

  livenessProbe:
    enabled: true
    periodSeconds: 10
    timeoutSeconds: 1
    failureThreshold: 3

  readinessProbe:
    enabled: true
    periodSeconds: 10
    timeoutSeconds: 1
    successThreshold: 1
    failureThreshold: 3

  ingress:
    enabled: true

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  nodeSelector: {}
  tolerations: []
  affinity: {}

agentsCommon:
  enabled: false
  useDb: false
  startupProbe:
    initialDelaySeconds: 60
  image:
    tag: "latest"
  ingress:
    enabled: false

#
# Declare and customize components
#
# Each component can have the following parameters customized:
#
#   dbName  - (String) name of the database. Defaults to the component name.
#   webPath - (String) URL path of this component. Defaults to the component name.
#
# You can also overwrite the `common` configuration, by configuring the following values:
#
#   replicaCount: 1
#   args: []
#   configFiles: {}
#   resources: {}
#   service: {}
#   containerPorts: {}
#   startupProbe: {}
#   livenessProbe: {}
#   readinessProbe: {}
#   ingress: {}
#   autoscaling: {}
#   nodeSelector: {}
#   tolerations: []
#   affinity: {}
#
components:
  hsbc-bridge:
    enabled: false
    args:
      - --spring.profiles.active=consuldisabled

    image:
      repository: registry.dev.s8ops.com/hsbc/hsbc-bridge
      tag: "snapshot"

    dbName: "hb"
    webPath: "hb"

  #FAB bridge start
  ftcc:
    enabled: false

    image:
      repository: registry.dev.s8ops.com/ftcc/ftcc-app
      tag: "snapshot"

    dbName: "ftcc"
    webPath: "ftcc"

  dataprep:
    enabled: false

    image:
      repository: registry.dev.s8ops.com/dataprep/dataprep-app
      tag: "snapshot"
  #Fab bridge end

  payments-bridge:
    enabled: false

    image:
      repository: registry.dev.s8ops.com/pb/sear-payments-bridge-app
      tag: "snapshot"

    dbName: "pb"
    webPath: "pb"

  universal-data-source:
    image:
      repository: registry.dev.s8ops.com/uds/universal-data-source-app
      tag: "snapshot"

    dbName: "uds"
    webPath: "uds"

  adjudication-engine:
    image:
      repository: registry.dev.s8ops.com/ae/adjudication-engine-app
      tag: "latest"

    dbName: "ae"
    webPath: "ae"

  governance:
    image:
      repository: registry.dev.s8ops.com/iris/governance-app
      tag: "latest"

    dbName: "gov"

  simulator:
    image:
      repository: registry.dev.s8ops.com/iris/simulator-app
      tag: "latest"

    dbName: "sim"

  webapp:
    image:
      repository: registry.dev.s8ops.com/iris/webapp-app
      tag: "latest"

  warehouse:
    image:
      repository: registry.dev.s8ops.com/warehouse/warehouse-app
      tag: "latest"

    dbName: "wh"

    startupProbe:
      initialDelaySeconds: 60

# FIXME(pputerla) - remark - we're missing list of supported component keys
agents:
  name-agent:
    image:
      repository: registry.dev.s8ops.com/linguistics-agent
  date-agent:
    image:
      repository: registry.dev.s8ops.com/date-agent
  document-comparer-agent:
    command:
      - "/docker-entrypoint.sh"
      - "comparer"
    image:
      repository: registry.dev.s8ops.com/document-agent
  document-recognizer-agent:
    command:
      - "/docker-entrypoint.sh"
      - "recognizer"
    image:
      repository: registry.dev.s8ops.com/document-agent
  document-number-agent:
    command:
      - "/docker-entrypoint.sh"
      - "number"
    image:
      repository: registry.dev.s8ops.com/document-agent
  geo-agent:
    image:
      repository: registry.dev.s8ops.com/geo-agent
  learning-engine:
    useDb: true
    dbName: "learningengine"
    image:
      repository: registry.dev.s8ops.com/learning-engine
  freetext-agent:
    image:
      repository: registry.dev.s8ops.com/freetext-agent
  gender-agent:
    image:
      repository: registry.dev.s8ops.com/gender-agent
  region-agent:
    image:
      repository: registry.dev.s8ops.com/region-agent
  organization-name-agent:
    type: python
    image:
      repository: registry.dev.s8ops.com/organization-name-agent
    configFiles:
      application.yml: |
        agent:
          processes: 1

          agent-exchange:
            request:
              exchange: 'agent.request'
              routing-key: 'agents.companyName.versions.1_0_0.configs.1'
              queue-name: 'agent.companyname-requests'

            response:
              exchange: 'agent.response'

          grpc:
            port: 9090

        grpc:
          client:
            data-source:
              address: universal-data-source-service.default.svc.cluster.local:9090
              timeout: 15

        rabbitmq:
          host: wrkd-sierra-uat-rmq-nlb-d1beaa949f286776.elb.us-west-1.amazonaws.com
          port: 5672
          login: {{ ssm "/rabbitmq/username" "required=true" "region=$AWS_REGION" }}
          password: {{ ssm "/rabbitmq/password" "required=true" "region=$AWS_REGION" }}
          virtualhost: /


#
# Frontend Web Application
#
frontend:
  replicaCount: 1

  image:
    repository: registry.dev.s8ops.com/sep-front-app
    tag: "latest"
    pullPolicy: IfNotPresent
    pullSecrets: []

  service:
    type: ClusterIP
    port: 80

  ingress:
    enabled: true

  resources: {}

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  nodeSelector: {}
  tolerations: []
  affinity: {}

#
# KeyCloak
#
# Configuration of all the values below is required.
#
keycloak:
  authServerUrl: ""
  realm: ""
  frontendClientId: ""
  jwtIssuerUri: "{{ .Values.keycloak.authServerUrl }}/auth/realms/{{ .Values.keycloak.realm }}"
