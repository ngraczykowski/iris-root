## This values file configures Sierra environment, with Payments Bridge as bridge and transaction
## screening agents.
##
components:
  payments-bridge:
    enabled: true
    profiles:
      - mockaws
      - mockemail
    args:
      - --spring.security.oauth2.client.registration.callback.client-id=cmapi-dev
      - --spring.security.oauth2.client.provider.external.token-uri=https://auth.silent8.cloud/realms/egress-mock/protocol/openid-connect/token
      - --pb.email-notification.learning-enabled=true

agents:
  name-agent:
    enabled: true
    profiles:
      - sierra
    resources:
      limits:
        memory: 2Gi
      requests:
        memory: 1Gi

  geo-agent:
    enabled: true
    image:
      repository: registry.dev.s8ops.com/geo-agent-default
    properties:
      "geotransactions.agent.facade.enabled": true
      "geo.agent.facade.enabled": true
    profiles:
      - sierra
    resources:
      limits:
        memory: 2Gi
      requests:
        memory: 1Gi

  geo-agent2:
    from: geo-agent
    properties:
      "facade.amqp.queueDefinitions[geo].inbound-exchange": "name=agent.request"
      "facade.amqp.queueDefinitions[geo].inboundRoutingKey": "agents.geo.versions.2_0_0.configs.*"
      "facade.amqp.queueDefinitions[geo].inboundQueueName": "agent.geo2-requests"
      "facade.amqp.queueDefinitions[geo].deadLetterExchangeName": "geo2-agent-dead-letter-exchange"
      "facade.amqp.queueDefinitions[geo].deadLetterQueueName": "geo2-agent-dead-letter-queue"
      "facade.amqp.queueDefinitions[geo].deadLetterRoutingKey": "geo2-agent-dead-letter-key"
      "facade.amqp.queueDefinitions[geo].outbound-exchange-name": "agent.response"
      "facade.amqp.queueDefinitions[geoSanctions].inbound-exchange-name": "agent.request"
      "facade.amqp.queueDefinitions[geosanctions].inboundRoutingKey": "agents.geosanctions.versions.2_0_0.configs.*"
      "facade.amqp.queueDefinitions[geosanctions].inboundQueueName": "agent.geosanctions2-requests"
      "facade.amqp.queueDefinitions[geosanctions].deadLetterExchangeName": "geosanctions2-agent-dead-letter-exchange"
      "facade.amqp.queueDefinitions[geosanctions].deadLetterQueueName": "geosanctions2-agent-dead-letter-queue"
      "facade.amqp.queueDefinitions[geosanctions].deadLetterRoutingKey": "geosanctions2-agent-dead-letter-key"
      "facade.amqp.queueDefinitions[geoSanctions].outbound-exchange-name": "agent.response"

  organization-name-agent:
    enabled: true
    properties:
      "serp.show-env": null
    args:
      - --configuration-dir=/app/config
      - --grpc
      - --agent-exchange
      - --verbose
    initScripts:
      000mkConfig.sh: |
        #!/bin/sh
        cat > /tmp/application.yaml << EOF
        agent:
          processes: 10
          agent-exchange:
            request:
              exchange: 'agent.request'
              routing-key: 'agents.companyName.versions.1_0_0.configs.1'
              queue-name: 'agent.companyname-requests'
            response:
              exchange: 'agent.response'
          grpc:
            port: 9090
        grpc:
          client:
            data-source:
              address: $UDS_ADDRESS
              timeout: 15
        rabbitmq:
          host: $RABBITMQ_HOST
          port: $RABBITMQ_PORT
          login: $RABBITMQ_USERNAME
          password: $RABBITMQ_PASSWORD
          virtualhost: /
        sentry:
          turn_on: false
          environment: unknown
          release: unknown
          sample_rate: 1.0
        EOF
  organization-name-agent2:
    from: organization-name-agent
    args:
      - --configuration-dir=/app/config
      - --grpc
      - --agent-exchange
      - --verbose
    initScripts:
      000mkConfig.sh: |
        #!/bin/sh
        cat > /tmp/application.yaml << EOF
        agent:
          processes: 10
          agent-exchange:
            request:
              exchange: 'agent.request'
              routing-key: 'agents.companyName.versions.2_0_0.configs.1'
              queue-name: 'agent.companyname-requests-2'
            response:
              exchange: 'agent.response'
          grpc:
            port: 9090
        grpc:
          client:
            data-source:
              address: $UDS_ADDRESS
              timeout: 15
        rabbitmq:
          host: $RABBITMQ_HOST
          port: $RABBITMQ_PORT
          login: $RABBITMQ_USERNAME
          password: $RABBITMQ_PASSWORD
          virtualhost: /
        sentry:
          turn_on: false
          environment: unknown
          release: unknown
          sample_rate: 1.0
        EOF

keycloak:
  realmData:
    users:
      - username: "iris"
        enabled: true
        credentials:
          # must be provided in plain-text for now
          # https://github.com/keycloak/keycloak-operator/issues/499
          # looks like change is enforced on first login
          - type: "password"
            value: "temporary123"
        realmRoles:
          - default-roles-{{ .Release.Namespace }}
        clientRoles:
          frontend:
            - "QA_ISSUE_MANAGER"
            - "MODEL_TUNER"
            - "USER_ADMINISTRATOR"
            - "QA"
            - "APPROVER"
            - "AUDITOR"
      - username: "ttorcz"
        firstName: "Tomasz"
        lastName: "Torcz"
        email: "ttorcz@silenteight.com"
        enabled: true
        credentials:
          - type: "password"
            value: "temporary123"
    clients:
      - clientId: dev-frontend
        protocol: openid-connect
        #rootUrl:
        clientAuthenticatorType: "client-secret"
        redirectUris:
          - "*"
        defaultClientScopes:
          - web-origins
          - acr
          - profile
          - roles
          - email
        optionalClientScopes:
          - address
          - phone
          - offline_access
          - microprofile-jwt
        defaultRoles:
          - AUDITOR
          - APPROVER
          - QA
          - USER_ADMINISTRATOR
          - MODEL_TUNER
          - QA_ISSUE_MANAGER
