import itertools
from abc import ABC, abstractmethod

from silenteight.datasource.api.allowlist.v1.allow_list_pb2 import AllowListFeatureInput
from silenteight.datasource.api.bankidentificationcodes.v1.bank_identification_codes_pb2 import (
    BankIdentificationCodesFeatureInput,
)
from silenteight.datasource.api.country.v1.country_pb2 import CountryFeatureInput
from silenteight.datasource.api.date.v1.date_pb2 import DateFeatureInput
from silenteight.datasource.api.document.v1.document_pb2 import DocumentFeatureInput
from silenteight.datasource.api.event.v1.event_pb2 import EventFeatureInput
from silenteight.datasource.api.freetext.v1.freetext_pb2 import FreeTextFeatureInput
from silenteight.datasource.api.gender.v1.gender_pb2 import GenderFeatureInput
from silenteight.datasource.api.historicaldecisions.v1.historical_decisions_pb2 import (
    HistoricalDecisionsInput,
)
from silenteight.datasource.api.location.v1.location_pb2 import LocationFeatureInput
from silenteight.datasource.api.name.v1.name_pb2 import NameFeatureInput
from silenteight.datasource.api.nationalid.v1.national_id_pb2 import NationalIdFeatureInput
from silenteight.datasource.api.transaction.v1.transaction_pb2 import TransactionFeatureInput


# The following entries have been copied from the __init__.py file


class Producer(ABC):
    @abstractmethod
    def produce_feature_input(self, payload):
        pass


class DobAgentFeatureInputProducer(Producer):
    feature_name = "features/dateOfBirth"

    def produce_feature_input(self, payload):

        return DateFeatureInput(
            feature=self.feature_name,
            alerted_party_dates=[element for element in payload.get("ap_all_dobs_aggregated", [])],
            watchlist_dates=[element for element in payload.get("wl_all_dobs_aggregated", [])],
            alerted_party_type=DateFeatureInput.EntityType.INDIVIDUAL,
            mode=DateFeatureInput.SeverityMode.NORMAL,
        )


class CountryResidencyAgentFeatureInputProducer(Producer):
    feature_name = "features/residencyCountry"

    def produce_feature_input(self, payload):
        ap_parties = payload.get("ap_all_residencies_aggregated", [])
        wl_parties = payload.get("wl_all_residencies_aggregated", [])
        return CountryFeatureInput(
            feature=self.feature_name,
            alerted_party_countries=ap_parties,
            watchlist_countries=wl_parties,
        )


class GeoResidencyAgentFeatureInputProducer(Producer):
    feature_name = "features/residencyCountry"

    def produce_feature_input(self, payload):
        ap_parties = payload.get("ap_all_residencies_aggregated", [""])
        wl_parties = payload.get("wl_all_residencies_aggregated", [""])
        if not ap_parties:
            ap_parties = [""]
        if not wl_parties:
            wl_parties = [""]
        combinations = list(itertools.product(ap_parties, wl_parties))
        return [
            LocationFeatureInput(
                feature=self.feature_name, alerted_party_location=ap, watchlist_location=wl
            )
            for ap, wl in combinations
        ]


class NationalityAgentFeatureInputProducer(Producer):
    feature_name = "features/geoNationality"

    def produce_feature_input(self, payload):
        ap_parties = payload.get("ap_all_nationalities_aggregated", [])
        wl_parties = payload.get("wl_all_nationalities_aggregated", [])
        combinations = list(itertools.product(ap_parties, wl_parties))

        return [
            LocationFeatureInput(
                feature=self.feature_name, alerted_party_location=ap, watchlist_location=wl
            )
            for ap, wl in combinations
        ]


class EmployerNameAgentFeatureInputProducer(Producer):
    feature_name = "features/employer_name"

    def produce_feature_input(self, payload):
        ap_parties = payload.get("ap_all_employer_aggregated", [])
        wl_parties = payload.get("wl_all_employer_aggregated", [])
        combinations = list(itertools.product(ap_parties, wl_parties))

        return [
            LocationFeatureInput(
                feature=self.feature_name, alerted_party_location=ap, watchlist_location=wl
            )
            for ap, wl in combinations
        ]
