@Library('pipeline-shared-library') _
def utils = new com.silenteight.jenkins.ci.Utils()
def jenkins = new com.silenteight.jenkins.ci.Jenkins()

pipeline {
  agent {
    label "ec2-agent"
  }
  environment {
    PYPI_URL = credentials('pypi-readonly-url')
    TWINE_REPOSITORY_URL = 'https://repo.silenteight.com/artifactory/api/pypi/pypi'
  }
  options {
    timeout(time: 1, unit: 'HOURS')   // just to be safe
  }
  parameters {
    booleanParam(name: 'RELEASE', defaultValue: false, description: 'Release new version')
  }
  stages {
    stage('Build and publish package') {
      agent {
        docker {
          image 'docker.repo.silenteight.com/python-build-image:3.7-bullseye'
          args '--volume $HOME/.cache/agent/pip:/home/jenkins/.cache/pip'
          alwaysPull true
        }
      }
      stages {
        stage('Prepare') {
          steps {
            sh 'pip install --index-url "${PYPI_URL}" --requirement requirements.txt'
          }
        }

        stage('Build package') {
          steps {
            sh './scripts/clean.sh'
            sh './scripts/build.sh --index-url "${PYPI_URL}"'
            script {
              env.VERSION = sh(
                returnStdout: true,
                script: '''#!/bin/bash
                  grep ^current_version setup.cfg | awk '{ print $3 }'
                '''
              ).trim()
            }
          }
        }

        stage('Test') {
          steps {
            sh 'pip install --index-url "${PYPI_URL}" tox'
            sh './scripts/test.sh --index-url "${PYPI_URL}"'
          }
        }

        stage('Publish') {
          when {
            anyOf {
              branch 'master'
              branch pattern: 'release-\\d+(\\.\\d+)?', comparator: 'REGEXP'
            }
          }
          steps {
            withCredentials([usernamePassword(
              credentialsId: 'pypi-deployment-user',
              usernameVariable: 'TWINE_USERNAME',
              passwordVariable: 'TWINE_PASSWORD',
            )]) {
              sh './scripts/publish.sh --index-url "${PYPI_URL}"'
            }
          }
        }

        stage('Release package') {
          when {
            allOf {
              anyOf {
                branch 'master'
                branch pattern: 'release-\\d+(\\.\\d+)?', comparator: 'REGEXP'
              }
              expression { return params.RELEASE }
            }
          }
          steps {
            sh 'pip install --index-url "${PYPI_URL}" bump2version tox'
            sh 'git tag --delete $(git tag --list)'
            sshagent([env.JENKINS_SSH_NAME]) {
              sh './scripts/release.sh --index-url ${PYPI_URL}'
            }
            script {
              env.VERSION = env.VERSION.replace('-dev', '')
            }
            withCredentials(
              [usernamePassword(
                credentialsId: 'pypi-deployment-user',
                usernameVariable: 'TWINE_USERNAME',
                passwordVariable: 'TWINE_PASSWORD',
              )])
            {
              sh './scripts/publish.sh --index-url "${PYPI_URL}"'
            }
          }
        }

        stage('Prepare nomad artifact') {
          steps {
            sh './nomad/prepare.sh'
          }
        }
      }
      post {
        always {
          junit testResults: '.tox/flake8-report.xml, .tox/mypy-report.xml, .tox/pytest-report.xml',
            allowEmptyResults: true
          archiveArtifacts artifacts: 'dist/*, nomad/*.tar.bz2', fingerprint: true
        }
        success {
          publishCoverage adapters: [istanbulCoberturaAdapter('.tox/coverage-report.xml')],
                          failNoReports: false
          stash includes: 'dist/*, nomad/artifacts/*', name: 'artifacts'
        }
      }
    }

    stage('Build and push image') {
      when {
        anyOf {
          branch 'master'
          branch pattern: 'RELEASE-.*', comparator: 'REGEXP'
        }
      }
      steps {
        withCredentials([usernamePassword(
           credentialsId: 'pypi-deployment-user',
           usernameVariable: 'TWINE_USERNAME',
           passwordVariable: 'TWINE_PASSWORD',
         )]) {
           buildAndPush(
             "company-name-surrounding-agent", "${VERSION},latest", "--build-arg PYPI_URL=${PYPI_URL} -f Dockerfile ."
           )
         }
      }
    }

    stage('Zipped (.pyz) atrifacts upload') {
      agent any
      stages {
        stage ('Prepare') {
          steps {
            sh './scripts/clean.sh'
            unstash 'artifacts'
          }
        }
        stage('Upload artifacts to artifactory') {
          when {
            anyOf {
              branch 'master'
              branch pattern: '^v(\\d+(\\.\\d+)*)\$', comparator: 'REGEXP'
            }
          }
          steps {
            rtServer (
              id: "silenteight-repo",
              url: "https://repo.silenteight.com/artifactory",
              credentialsId: "artifactory-deployment-user"
            )
            rtUpload (
              serverId: 'silenteight-repo',
              spec: '''{
                "files": [
                  {
                    "pattern": "dist/*.pyz",
                    "target": "datascience-local/company-name-surrounding-agent/"
                  },
                  {
                    "pattern": "dist/*.tgz",
                    "target": "datascience-local/company-name-surrounding-agent/"
                  }
                ]
              }''',
            )
          }
        }
        stage('Deploy on nomad') {
          when {
            allOf {
              anyOf {
                branch 'master'
                branch pattern: 'RELEASE-.*', comparator: 'REGEXP'
              }
              expression { return params.RELEASE }
            }
          }
          steps {
            sh './nomad/deploy.sh -var-file="vars/dev.vars"'
          }
        }
      }
    }
  }
}

