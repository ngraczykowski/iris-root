/*
 * Copyright (c) 2022 Silent Eight Pte. Ltd. All rights reserved.
 */

@Library('pipeline-shared-library@master') _

def version = ""
def javaVersion = ""

def sonarScan(String task, String version) {
  return {
    withSonarQubeEnv(env.SONAR_NAME) {
      withCredentials(
          [usernamePassword(
              credentialsId: 'artifactory-user',
              usernameVariable: 'S8_REPO_USER',
              passwordVariable: 'S8_REPO_PASSWORD')]) {
        sh "./gradlew -Pversion=${version} ${task}"
      }
    }
  }
}

pipeline {
  // NOTE(ahaczewski): Waiting for Quality Gate does not require an agent.
  agent none
  triggers {
    pollSCM scmpoll_spec: 'TZ=Europe/Warsaw\nH 7-16 * * 1-5', ignorePostCommitHooks: true
  }
  options {
    disableConcurrentBuilds()
    ansiColor('xterm')
  }
  stages {
    stage('Version') {
      steps {
        script {
          version = sh(returnStdout: true, script: './scripts/get-version.sh').trim()
          if (env.CHANGE_ID)
            version += "-${env.BRANCH_NAME}"
          // NOTE(ahaczewski): To keep the "version" clean of -SNAPSHOT, while still using
          //  Artifactory mechanism for clearing -SNAPSHOTs.
          javaVersion = env.CHANGE_ID ? "${version}-SNAPSHOT" : version
        }
        updateBuildName displayName: "#${env.BUILD_NUMBER} v${version}"
      }
    }
    stage('SonarQube') {
      agent {
        label 'ec2-agent'
      }
      steps {
        withGradle {
          withCredentials(
              [usernamePassword(
                  credentialsId: 'artifactory-user',
                  usernameVariable: 'S8_REPO_USER',
                  passwordVariable: 'S8_REPO_PASSWORD')]) {
            sh "./gradlew -Pversion=\"${javaVersion}\" clean build"
          }
        }

        script {
          def scanList = findFiles(glob: 'modules/**/*.sonarqube').collect {readFile(file: it.path).trim()}
          parallel scanList.collectEntries {[(it): sonarScan(it, javaVersion)]}
        }
      }
    }
    stage('Quality Gate') {
      steps {
        timeout(time: 30, unit: 'MINUTES') {
          waitForQualityGate
        }
      }
    }
  }
  post {
    //failure {
    //notifyBuild color: 'danger', channel: 'C03D4GD7RHP', title: ':rocket: Iris Release'
    //}
  }
}
