/*
 * Copyright (c) 2022 Silent Eight Pte. Ltd. All rights reserved.
 */

@Library('pipeline-shared-library@master') _

def version = ""

def sonarScan(String task, String version) {
  return {
    withSonarQubeEnv(env.SONAR_NAME) {
      withCredentials(
          [usernamePassword(
              credentialsId: 'artifactory-user',
              usernameVariable: 'S8_REPO_USER',
              passwordVariable: 'S8_REPO_PASSWORD')]) {
        sh "./gradlew -Dsonar.branch.name=\$CHANGE_BRANCH -Pversion=${version} ${task}"
      }
    }
  }
}

pipeline {
  agent {
    label 'ec2-agent'
  }
  triggers {
    pollSCM scmpoll_spec: 'TZ=Europe/Warsaw\nH 7-16 * * 1-5', ignorePostCommitHooks: true
  }
  options {
    disableConcurrentBuilds()
    ansiColor('xterm')
  }
  stages {
    stage('Version') {
      steps {
        script {
          version = sh(returnStdout: true, script: './scripts/get-version.sh').trim()
        }
        updateBuildName displayName: "#${env.BUILD_NUMBER} v${version}"
      }
    }
    stage('SonarQube') {
      steps {
        withGradle {
          withCredentials(
              [usernamePassword(
                  credentialsId: 'artifactory-user',
                  usernameVariable: 'S8_REPO_USER',
                  passwordVariable: 'S8_REPO_PASSWORD')]) {
            sh "./gradlew -Pversion=\"${version}\" clean build"
          }
        }

        script {
          def scanList =
              findFiles(glob: 'modules/**/*.sonarqube').collect {readFile(file: it.path).trim()}
          parallel scanList.collectEntries {[(it): sonarScan(it, version)]}
        }
      }
    }
  }
}
