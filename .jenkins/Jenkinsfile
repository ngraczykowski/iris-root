@Library('pipeline-shared-library@master') _

def version = ""

def distributions = ["hotel", "sierra", "foxtrot"]

pipeline {
  agent {
    label 'ec2-agent'
  }
  options {
    gitLabConnection(env.GITLAB_CONNECTION_NAME)
    disableConcurrentBuilds()
    ansiColor('xterm')
  }
  stages {
    stage('Version') {
      steps {
        script {
          version = sh(returnStdout: true, script: './scripts/get-version.sh').trim()
        }

        updateBuildName displayName: "#${env.BUILD_NUMBER} v${version}"
      }
    }
    stage('Applications') {
      environment {
        ARTIFACTORY = credentials('artifactory-deployment-user')
      }
      steps {
        withGradle {
          withCredentials(
              [usernamePassword(
                  credentialsId: 'artifactory-user',
                  usernameVariable: 'S8_REPO_USER',
                  passwordVariable: 'S8_REPO_PASSWORD')]) {
            sh "./gradlew -Pversion=\"${version}\" clean build"

            withDockerRegistry(
                url: 'https://docker.repo.silenteight.com',
                credentialsId: 'artifactory-deployment-user') {
              sh """
                test \$BRANCH_NAME = 'master' \
                  && \
                    ./gradlew \
                      -Dsilenteight.repoDeploymentUser="\$ARTIFACTORY_USR" \
                      -Dsilenteight.repoDeploymentPassword="\$ARTIFACTORY_PWD" \
                      -Djib.console=plain \
                      -Pversion="${version}" \
                      publish \
                  && \
                    jq --raw-output '.image' \$(find . -type f -name 'jib-image.json') >.jib-images
              """
            }

            stash name: 'jib', includes: '.jib-images', allowEmpty: true
          }
        }
      }
      post {
        always {
          discoverGitReferenceBuild()
          junit allowEmptyResults: true, testResults: '**/build/test-results/test/TEST-*.xml'
          jacoco()

          recordIssues enabledForFailure: true, tools: [java(), javaDoc()]
          recordIssues enabledForFailure: true, tool: checkStyle(
              pattern: '**/build/reports/checkstyle/main.xml, **/build/reports/checkstyle/test.xml')
          recordIssues enabledForFailure: true, tool: taskScanner(
              includePattern: '**/*.java, **/*.groovy',
              ignoreCase: true,
              highTags: 'HACK',
              normalTags: 'TODO, FIXME',
              lowTags: 'XXX')
        }
      }
    }
    stage("E2E Tests") {
      environment {
        E2E_TESTS_CREDS = credentials('karate-username-password')
      }
      steps {
        withGradle {
          withCredentials(
                        [usernamePassword(
                            credentialsId: 'artifactory-user',
                            usernameVariable: 'S8_REPO_USER',
                            passwordVariable: 'S8_REPO_PASSWORD')]) {
            script {
              for (def distribution: distributions) {
                sh """
                  echo "Starting E2E tests for ${distribution} distribution."
                """
                sh """
                    ./gradlew test \
                    -Dcucumber.features=src/test/java/features/SmokeTests.feature \
                    -Dcucumber.plugin=html:report.html \
                    -Dtest.isRegression=false \
                    -Dtest.clientId=dev-frontend \
                    -Dtest.username="\$E2E_TESTS_CREDS_USR" \
                    -Dtest.password="\$E2E_TESTS_CREDS_PWD" \
                    -Dtest.url=https://bravo.dev.silenteight.com/
                  """
              }
            }
          }
        }
      }
      post {
        success {
          echo 'E2E tests were successful'
        }
      }
    }
    stage('Chart') {
      when {
        beforeAgent true
        branch 'master'
      }
      environment {
        ARTIFACTORY = credentials('artifactory-deployment-user')
      }
      steps {
        sh """
          helm package \
            --dependency-update \
            --app-version "${version}" \
            --version "${version}" \
            --destination build/charts \
            charts/sear

          helm push-artifactory \
            --skip-reindex \
            --username "\$ARTIFACTORY_USR" \
            --password "\$ARTIFACTORY_PSW" \
            build/charts/sear-"${version}".tgz \
            https://repo.silenteight.com/artifactory/helm
        """
      }
      post {
        success {
          echo 'Marking successful build'
          sh 'git branch --force last-known-good-build'
          gitPush branch: 'last-known-good-build'
        }
      }
    }
    stage('ECR') {
      agent {
        label 'aws-worker'
      }
      when {
        beforeAgent true
        branch 'master'
      }
      steps {
        unstash name: 'jib'

        // TODO(ahaczewski): Implement sync with ECR.
        // 1. Ensure repository in ECR exists, if not - create one
        // 2. Login to skopeo
        // 3. Copy/sync images from `.jib-images` to ECR.
      }
    }
  }
  post {
    failure {
      script {
        if (env.BRANCH_NAME == 'master') {
          notifyBuild color: 'danger', channel: 'C03D4GD7RHP',
              title: ':building_construction: Iris Build'
        }
      }
    }
  }
}
