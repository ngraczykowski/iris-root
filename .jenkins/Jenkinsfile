@Library('pipeline-shared-library@master') _

def version = ""

pipeline {
  agent none
  options {
    gitLabConnection(env.GITLAB_CONNECTION_NAME)
    disableConcurrentBuilds()
    ansiColor('xterm')
  }
  triggers {
    cron '*/2 5-22 * * 1-5'
  }
  stages {
    stage('Version') {
      agent {
        label 'ec2-agent'
      }
      steps {
        script {
          version = sh(returnStdout: true, script: './scripts/get-version.sh').trim()
        }
        updateBuildName displayName: "#${env.BUILD_NUMBER} v${version}"
      }
    }
    //= --------------------------------------------------------------------------------------------
    //=   BUILD PIPELINE
    //= --------------------------------------------------------------------------------------------
    stage('Build Applications') {
      agent {
        label 'ec2-agent'
      }
      when {
        beforeAgent true
        not {
          branch 'last-known-good-build'
        }
        not {
          triggeredBy 'TimerTrigger'
        }
      }
      steps {
        withGradle {
          withCredentials(
              [usernamePassword(
                  credentialsId: 'artifactory-user',
                  usernameVariable: 'S8_REPO_USER',
                  passwordVariable: 'S8_REPO_PASSWORD')]) {
            sh "./gradlew -Pversion=\"${version}\" clean build"
          }
          withCredentials(
              [usernamePassword(
                  credentialsId: 'artifactory-user',
                  usernameVariable: 'S8_REPO_USER',
                  passwordVariable: 'S8_REPO_PASSWORD'),
               usernamePassword(
                   credentialsId: 'artifactory-deployment-user',
                   usernameVariable: 'repoDeploymentUser',
                   passwordVariable: 'repoDeploymentPassword')]) {
            withDockerRegistry(
                url: 'https://docker.repo.silenteight.com',
                credentialsId: 'artifactory-deployment-user') {
              sh """
                test \$BRANCH_NAME = 'master' && ./gradlew \
                  -Dsilenteight.repoDeploymentUser="\$repoDeploymentUser" \
                  -Dsilenteight.repoDeploymentPassword="\$repoDeploymentPassword" \
                  -Djib.console=plain \
                  -Pversion="${version}" \
                  publish
              """
            }
          }
        }
      }
      post {
        always {
          discoverGitReferenceBuild()
          junit allowEmptyResults: true, testResults: '**/build/test-results/test/TEST-*.xml'
          jacoco()

          recordIssues enabledForFailure: true, tools: [java(), javaDoc()]
          recordIssues enabledForFailure: true, tool: checkStyle(
              pattern: '**/build/reports/checkstyle/main.xml, **/build/reports/checkstyle/test.xml')
          recordIssues enabledForFailure: true, tool: taskScanner(
              includePattern: '**/*.java, **/*.groovy',
              ignoreCase: true,
              highTags: 'HACK',
              normalTags: 'TODO, FIXME',
              lowTags: 'XXX')
        }
      }
    }
    stage('Build Chart') {
      agent {
        label 'ec2-agent'
      }
      when {
        beforeAgent true
        branch 'master'
        not {
          triggeredBy 'TimerTrigger'
        }
      }
      environment {
        ARTIFACTORY = credentials('artifactory-deployment-user')
      }
      steps {
        sh """
          helm package \
            --dependency-update \
            --app-version "${version}" \
            --version "${version}" \
            --destination build/charts \
            charts/sear

          helm push-artifactory \
            --skip-reindex \
            --username "\$ARTIFACTORY_USR" \
            --password "\$ARTIFACTORY_PSW" \
            build/charts/sear-"${version}".tgz \
            https://repo.silenteight.com/artifactory/helm
        """
      }
      post {
        success {
          echo 'Marking successful build'
          gitPush branch: 'last-known-good-build'
        }
      }
    }
    //= --------------------------------------------------------------------------------------------
    //=   RELEASE PIPELINE
    //= --------------------------------------------------------------------------------------------
    stage('Kubernetes Release') {
      matrix {
        agent {
          label 'ec2-agent-devenv'
        }
        when {
          beforeAgent true
          branch 'last-known-good-build'
          triggeredBy 'TimerTrigger'
        }
        axes {
          axis {
            name 'ENVIRONMENT'
            values 'sierra', 'hotel', 'foxtrot'
          }
        }
        environment {
          ARTIFACTORY = credentials('artifactory-user')
        }
        stages {
          stage('Install chart') {
            steps {
              echo "Deploying version ${version} to ${ENVIRONMENT}"
  //              withKubeConfig(
  //                  credentialsId: 'devenv-eks',
  //                  serverUrl: 'https://72480afab36290b71d9d6395d9c66606.gr7.eu-central-1.eks.amazonaws.com/') {
  //                sh """
  //                  helm install \
  //                    --create-namespace \
  //                    --namespace jenkins-${ENVIRONMENT} \
  //                    --username "\$ARTIFACTORY_USR" \
  //                    --password "\$ARTIFACTORY_PSW" \
  //                    --values kubernetes/values.core.yaml \
  //                    --values kubernetes/values.ingress-internal.yaml  \
  //                    --values kubernetes/values.${ENVIRONMENT}.yaml \
  //                    --wait \
  //                    --timeout 10m \
  //                    sear \
  //                    https://repo.silenteight.com/artifactory/helm/sear/sear-"${version}".tgz
  //                """
  //              }
            }
            post {
              failure {
                echo "Deployment of ${version} to ${ENVIRONMENT} failed!"
                withKubeConfig(
                    credentialsId: 'devenv-eks',
                    serverUrl: 'https://72480afab36290b71d9d6395d9c66606.gr7.eu-central-1.eks.amazonaws.com/') {
                  sh """
                      export NAMESPACE=jenkins-${ENVIRONMENT}
                      export LOGS_DIR=logs/${ENVIRONMENT}

                      mkdir -p "\$LOGS_DIR"

                      kubectl get pods \
                        --namespace \$NAMESPACE \
                        --output wide \
                        --sort-by '.status.containerStatuses[0].restartCount' | tee "\$LOGS_DIR"/${ENVIRONMENT}+pods.log

                      kubectl get events \
                        --namespace \$NAMESPACE \
                        --field-selector='type!=Normal,reason=BackOff' \
                        --sort-by='.metadata.creationTimestamp' | tee "\$LOGS_DIR"/${ENVIRONMENT}+events.log

                      FAILED_PODS=\$(set +x && kubectl get pods \
                        --namespace \$NAMESPACE \
                        --output=custom-columns="POD:metadata.name" \
                        --no-headers)
                      for pod in \$FAILED_PODS ; do
                        kubectl --namespace \$NAMESPACE logs --previous \$pod >"\$LOGS_DIR"/${ENVIRONMENT}+\$pod.previous.log || true
                        kubectl --namespace \$NAMESPACE logs \$pod >"\$LOGS_DIR"/${ENVIRONMENT}+\$pod.log || true
                      done
                    """
                }
                archiveArtifacts allowEmptyArchive: true, artifacts: "logs/${ENVIRONMENT}/*"
              }
              cleanup {
                withKubeConfig(
                    credentialsId: 'devenv-eks',
                    serverUrl: 'https://72480afab36290b71d9d6395d9c66606.gr7.eu-central-1.eks.amazonaws.com/') {
  //                  sh "helm uninstall --namespace jenkins-${ENVIRONMENT} sear"
                }
              }
            }
          }
        }
      }
    }
  }
  post {
    failure {
      script {
        if (env.BRANCH_NAME == 'master') {
          slackSend color: 'danger', channel: '#iris-tech',
              message: "Build of v${version} failed (<${env.BUILD_URL}|Open>)."
        } else if (env.BRANCH_NAME == 'last-known-good-build') {
          slackSend color: 'danger', channel: '#iris-tech',
              message: "Failed to release version ${version}! To see the details, <${env.BUILD_URL}|click here>)."
        }
      }
    }
  }
}
