@Library('pipeline-shared-library@master') _

pipeline {
  agent {
    label 'ec2-agent'
  }
  options {
    gitLabConnection(env.GITLAB_CONNECTION_NAME)
    skipDefaultCheckout(true)
    ansiColor('xterm')
  }
  tools {
    jdk 'jdk-17'
  }
  stages {
    stage('Checkout') {
      steps {
        ciCheckout()
      }
    }
    stage('Build') {
      steps {
        withGradle {
          withCredentials(
              [usernamePassword(
                  credentialsId: 'artifactory-user',
                  usernameVariable: 'S8_REPO_USER',
                  passwordVariable: 'S8_REPO_PASSWORD')]) {
            sh '''
              ./gradlew \
              -Pversion=$(./scripts/get-version.sh) \
              clean build
            '''
          }
        }
      }
      post {
        always {
          discoverGitReferenceBuild()
          junit allowEmptyResults: true, testResults: '**/build/test-results/test/TEST-*.xml'
          jacoco()

          recordIssues enabledForFailure: true, tools: [java(), javaDoc()]
          recordIssues enabledForFailure: true, tool: checkStyle(
              pattern: '**/build/reports/checkstyle/main.xml, **/build/reports/checkstyle/test.xml')
          recordIssues enabledForFailure: true, tool: taskScanner(
              includePattern: '**/*.java, **/*.groovy',
              ignoreCase: true,
              highTags: 'HACK',
              normalTags: 'TODO, FIXME',
              lowTags: 'XXX')
        }
      }
    }
    stage('Publish') {
      steps {
        withGradle {
          withCredentials(
              [usernamePassword(
                  credentialsId: 'artifactory-deployment-user',
                  usernameVariable: 'repoDeploymentUser',
                  passwordVariable: 'repoDeploymentPassword')]) {
            sh '''./gradlew \
              -Dsilenteight.repoDeploymentUser=$repoDeploymentUser \
              -Dsilenteight.repoDeploymentPassword=$repoDeploymentPassword \
              -Djib.console=plain \
              -Pversion=$(./scripts/get-version.sh) \
              publish
            '''
          }
        }
      }
    }
  }
}
