@Library('pipeline-shared-library@master') _

def version = ""

pipeline {
  agent {
    label 'ec2-agent'
  }
  triggers {
    cron('H 5-17 * * 1-5')
  }
  options {
    gitLabConnection(env.GITLAB_CONNECTION_NAME)
    disableConcurrentBuilds()
    skipDefaultCheckout(true)
    ansiColor('xterm')
  }
  stages {
    stage('Checkout') {
      steps {
        ciCheckout()
        script {
          version = sh(returnStdout: true, script: './scripts/get-version.sh').trim()
        }
        updateBuildName displayName: "#${env.BUILD_NUMBER} v${version}"
      }
    }
    stage('Build Applications') {
      when {
        not {
          triggeredBy 'TimerTrigger'
        }
      }
      steps {
        withGradle {
          withCredentials(
              [usernamePassword(
                  credentialsId: 'artifactory-user',
                  usernameVariable: 'S8_REPO_USER',
                  passwordVariable: 'S8_REPO_PASSWORD')]) {
            sh """./gradlew -Pversion="${version}" clean build"""
          }
          withCredentials(
              [usernamePassword(
                  credentialsId: 'artifactory-user',
                  usernameVariable: 'S8_REPO_USER',
                  passwordVariable: 'S8_REPO_PASSWORD'),
               usernamePassword(
                   credentialsId: 'artifactory-deployment-user',
                   usernameVariable: 'repoDeploymentUser',
                   passwordVariable: 'repoDeploymentPassword')]) {
            withDockerRegistry(
                url: 'https://docker.repo.silenteight.com',
                credentialsId: 'artifactory-deployment-user') {
              sh """
                ./gradlew \
                  -Dsilenteight.repoDeploymentUser="\$repoDeploymentUser" \
                  -Dsilenteight.repoDeploymentPassword="\$repoDeploymentPassword" \
                  -Djib.console=plain \
                  -Pversion="${version}" \
                  publish
              """
            }
          }
        }
      }
      post {
        always {
          discoverGitReferenceBuild()
          junit allowEmptyResults: true, testResults: '**/build/test-results/test/TEST-*.xml'
          jacoco()

          recordIssues enabledForFailure: true, tools: [java(), javaDoc()]
          recordIssues enabledForFailure: true, tool: checkStyle(
              pattern: '**/build/reports/checkstyle/main.xml, **/build/reports/checkstyle/test.xml')
          recordIssues enabledForFailure: true, tool: taskScanner(
              includePattern: '**/*.java, **/*.groovy',
              ignoreCase: true,
              highTags: 'HACK',
              normalTags: 'TODO, FIXME',
              lowTags: 'XXX')
        }
      }
    }
    stage('Build Chart') {
      when {
        not {
          triggeredBy 'TimerTrigger'
        }
      }
      steps {
        sh """
          helm package \
            --dependency-update \
            --app-version "${version}" \
            --version "${version}" \
            --destination build/charts \
            charts/sear
        """
        withCredentials(
            [usernamePassword(
                 credentialsId: 'artifactory-deployment-user',
                 usernameVariable: 'HELM_REPO_USERNAME',
                 passwordVariable: 'HELM_REPO_PASSWORD')]) {
          sh """
            helm push-artifactory \
              --skip-reindex \
              build/charts/sear-"${version}".tgz \
              https://repo.silenteight.com/artifactory/helm
          """
        }
      }
    }
    stage('Release') {
      parallel {
        stage('Release K8s/Sierra') {
          steps {
            echo "Deploying version ${version}"
          }
        }
        stage('Release K8s/Hotel') {
          steps {
            echo "Deploying version ${version}"
          }
        }
        stage('Deploy to Nomad') {
          steps {
            echo "Deploying version ${version} to Nomad?"
          }
        }
      }
    }
  }
}
