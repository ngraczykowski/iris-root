@Library('pipeline-shared-library@master') _

def version = ""
def images = []

pipeline {
  agent {
    label 'ec2-agent'
  }
  options {
    disableConcurrentBuilds()
    ansiColor('xterm')
  }
  stages {
    stage("Pre-Commit") {
      when {
        changeRequest()
      }
      steps {
        withCredentials([gitUsernamePassword(credentialsId: 'Github-app-access')]) {
          sh '''#!/usr/bin/env bash
          changed_java_files=$(git diff --cached --name-only --diff-filter=ACMR | grep ".*java$" )
          echo $changed_java_files
          java \
            --add-exports jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED \
            --add-exports jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED \
            --add-exports jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED \
            --add-exports jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED \
            --add-exports jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED \
            -jar ~/.local/bin/google-java-format.jar --replace $changed_java_files

          pre-commit run --show-diff-on-failure --color=always --all-files
          git diff --quiet
          if [[ $? -ne 0 ]]; then
            git checkout HEAD -B $CHANGE_BRANCH
            git commit -am 'chore: pre-commit fixes'
            git push --set-upstream origin $CHANGE_BRANCH
          fi
          '''
        }
      }
    }
    stage('Version') {
      steps {
        script {
          version = sh(returnStdout: true, script: './scripts/get-version.sh').trim()
        }
        updateBuildName displayName: "#${env.BUILD_NUMBER} v${version}"
      }
    }
    stage('Applications') {
      environment {
        ARTIFACTORY = credentials('artifactory-deployment-user')
        // NOTE(ahaczewski): See https://blog.andresteingress.com/2018/09/05/gradle-daemon-and-jenkins.html.
        JENKINS_NODE_COOKIE = 'kill-protection'
      }
      steps {
        withGradle {
          withCredentials(
              [usernamePassword(
                  credentialsId: 'artifactory-user',
                  usernameVariable: 'S8_REPO_USER',
                  passwordVariable: 'S8_REPO_PASSWORD')]) {
            sh "./gradlew -Pversion=\"${version}\" clean build"

            withDockerRegistry(
                url: 'https://docker.repo.silenteight.com',
                credentialsId: 'artifactory-deployment-user') {
              script {
                if (env.BRANCH_NAME == 'master') {
                  sh """
                    ./gradlew \
                      -Dsilenteight.repoDeploymentUser="\$ARTIFACTORY_USR" \
                      -Dsilenteight.repoDeploymentPassword="\$ARTIFACTORY_PSW" \
                      -Djib.console=plain \
                      -Pversion="${version}" \
                      publish
                  """
                  images =
                      findFiles(glob: '**/jib-image.json')
                          .collect {readJSON(file: it.path)}
                          .image.collect {it.minus('docker.repo.silenteight.com/')}
                }
              }
            }
          }
        }
      }
      post {
        always {
          discoverGitReferenceBuild()
          junit allowEmptyResults: true, testResults: '**/build/test-results/test/TEST-*.xml'
          jacoco()

          recordIssues enabledForFailure: true, tools: [java(), javaDoc()]
          recordIssues enabledForFailure: true, tool: checkStyle(
              pattern: '**/build/reports/checkstyle/main.xml, **/build/reports/checkstyle/test.xml')
          recordIssues enabledForFailure: true, tool: taskScanner(
              includePattern: '**/*.java, **/*.groovy',
              ignoreCase: true,
              highTags: 'HACK',
              normalTags: 'TODO, FIXME',
              lowTags: 'XXX')
        }
      }
    }
    stage('Chart') {
      when {
        beforeAgent true
        branch 'master'
      }
      environment {
        ARTIFACTORY = credentials('artifactory-deployment-user')
      }
      steps {
        sh """
          helm package \
            --dependency-update \
            --app-version "${version}" \
            --version "${version}" \
            --destination build/charts \
            charts/sear

          helm push-artifactory \
            --skip-reindex \
            --username "\$ARTIFACTORY_USR" \
            --password "\$ARTIFACTORY_PSW" \
            build/charts/sear-"${version}".tgz \
            https://repo.silenteight.com/artifactory/helm
        """
      }
    }
    stage('ECR') {
      agent {
        label 'aws-worker'
      }
      when {
        beforeAgent true
        branch 'master'
      }
      environment {
        ECR = '278875966478.dkr.ecr.us-east-1.amazonaws.com'
        AWS_REGION = 'us-east-1'
      }
      steps {
        // Copy images from `.jib-images` file to ECR.
        sh "aws ecr get-login-password | skopeo login --username AWS --password-stdin ${env.ECR}"
        script {
          images.each {
            def repositoryName = it.split(':')[0]
            sh """
              aws ecr describe-repositories --repository-names ${repositoryName} 2>&1 >/dev/null \
                || aws ecr create-repository --encryption-configuration encryptionType=KMS --repository-name ${repositoryName}
              skopeo copy docker://docker.repo.silenteight.com/${it} docker://${env.ECR}/${it}
            """
          }
        }
      }
    }
    stage('Last known good build') {
      when {
        beforeAgent true
        branch 'master'
      }
      steps {
        withCredentials([gitUsernamePassword(credentialsId: 'Github-app-access')]) {
          sh """
            git branch --force last-known-good-build
            git push --atomic --force origin last-known-good-build
          """
        }
      }
    }
  }
  post {
    success {
      mergeOnPullRequest()
    }
    fixed {
      script {
        if (env.BRANCH_NAME == 'master') {
          slackSend color: 'good', channel: 'C03D4GD7RHP', attachments: [
              [
                  color      : 'good',
                  author_name: ':building_construction: Iris Build',
                  author_link: env.JOB_DISPLAY_URL,
                  title      : "${currentBuild.fullProjectName} build is fixed with <${env.RUN_DISPLAY_URL}|${currentBuild.displayName}>!",
              ]
          ]
        }
      }
    }
    failure {
      script {
        if (env.BRANCH_NAME == 'master') {
          notifyBuild color: 'danger', channel: 'C03D4GD7RHP',
              title: ':building_construction: Iris Build'
        }
      }
    }
  }
}
