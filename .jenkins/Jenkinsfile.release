/*
 * Copyright (c) 2022 Silent Eight Pte. Ltd. All rights reserved.
 */

@Library('pipeline-shared-library@master') _

def version = ""

pipeline {
  agent {
    label 'ec2-agent-devenv'
  }
  triggers {
    pollSCM scmpoll_spec: 'TZ=Europe/Warsaw\nH 7-16 * * 1-5', ignorePostCommitHooks: true
  }
  options {
    disableConcurrentBuilds()
    ansiColor('xterm')
  }
  environment {
    ARTIFACTORY = credentials('artifactory-deployment-user')
  }
  stages {
    stage('Version') {
      steps {
        script {
          version = sh(returnStdout: true, script: './scripts/get-version.sh').trim()
        }

        updateBuildName displayName: "#${env.BUILD_NUMBER} v${version}"
      }
    }
    stage('Kubernetes Release') {
      matrix {
        agent {
          node {
            label 'ec2-agent-devenv'
            customWorkspace "workspace/${JOB_NAME}/env/${ENVIRONMENT}/"
          }
        }
        axes {
          axis {
            name 'ENVIRONMENT'
            values 'sierra', 'hotel', 'foxtrot', 'hotel-backend', 'lima'
          }
        }
        environment {
          NAMESPACE = "test-e2e-${env.ENVIRONMENT}-${env.BUILD_NUMBER}-${env.GIT_COMMIT[0..7]}"
          INGRESS_HOST = "${env.NAMESPACE}.prv.dev.s8ops.com"
          BASE_URL = "https://${env.INGRESS_HOST}"
          RELEASE_NAME = "sear-${env.ENVIRONMENT}"
        }
        stages {
          stage('Install chart') {
            steps {
              echo "Deploying version ${version} to ${env.ENVIRONMENT}"

              withKubeConfig(
                  credentialsId: 'devenv-eks',
                  serverUrl: 'https://72480afab36290b71d9d6395d9c66606.gr7.eu-central-1.eks.amazonaws.com/') {
                withCredentials([aws(credentialsId: 'jenkins-ec2-devenv')]) {
                  sh """
                  chmod go-rw "\${KUBECONFIG}"

                  helm \
                    secrets -d vals \
                    install \
                    --create-namespace \
                    --namespace \${NAMESPACE} \
                    --username "\${ARTIFACTORY_USR}" \
                    --password "\${ARTIFACTORY_PSW}" \
                    --values kubernetes/values.core.yaml \
                    --values kubernetes/values.ingress-internal.yaml  \
                    --values kubernetes/values.\${ENVIRONMENT}.yaml \
                    --set ingress.hosts[0]=\${INGRESS_HOST} \
                    --set keycloak.ingress.hostname=\${INGRESS_HOST} \
                    --set keycloak.externalDatabase.host=\${RELEASE_NAME}-postgres.\${NAMESPACE}.svc \
                    --set keycloak.externalDatabase.existingSecret=keycloak.\${RELEASE_NAME}-postgres.credentials.postgresql.acid.zalan.do \
                    --wait \
                    --timeout 15m \
                    \${RELEASE_NAME} \
                    https://repo.silenteight.com/artifactory/helm/sear/sear-"${version}".tgz
                """
                }
              }
            }
            post {
              failure {
                saveLogs()
              }
            }
          }
          stage("E2E Tests") {
            environment {
              E2E_TESTS_CREDS_2 = credentials('ra-username-password-2')
              // NOTE(ahaczewski): See https://blog.andresteingress.com/2018/09/05/gradle-daemon-and-jenkins.html.
              JENKINS_NODE_COOKIE = 'kill-protection'
            }
            steps {
              withGradle {
                echo "Starting E2E tests for ${env.ENVIRONMENT} environment."
                sh """
                  cd tests/e2e-tests
                  ../../gradlew test \
                  -Dcucumber.features="src/test/java/features" \
                  -Dcucumber.filter.tags="@smoke or @\${ENVIRONMENT}" \
                  -Dcucumber.plugin=json:report-\${ENVIRONMENT}.json \
                  -Dtest.clientId=frontend \
                  -Dtest.admin.username="\$E2E_TESTS_CREDS_2_USR" \
                  -Dtest.admin.password="\$E2E_TESTS_CREDS_2_PSW" \
                  -Dtest.realm=Dev \
                  -Dtest.authServerUrl="\${BASE_URL}/auth" \
                  -Dtest.url="\$BASE_URL" \
                  --info --stacktrace
                """
              }
            }
            post {
              failure {
                saveLogs()
              }
              always {
                cucumber fileIncludePattern: "**/report-${env.ENVIRONMENT}.json",
                    reportTitle: env.ENVIRONMENT
              }
            }

          }
        }
        post {
          cleanup {
            withKubeConfig(
                credentialsId: 'devenv-eks',
                serverUrl: 'https://72480afab36290b71d9d6395d9c66606.gr7.eu-central-1.eks.amazonaws.com/') {
              sh """
                chmod go-rw "\${KUBECONFIG}"
                helm uninstall --namespace \${NAMESPACE} \${RELEASE_NAME}
                kubectl delete namespace \${NAMESPACE}
              """
            }
          }
        }
      }
    }
  }
  post {
    success {
      slackSend color: "good", channel: 'C03D4GD7RHP', attachments: [
          [
              color      : "good",
              author_name: ':rocket: Iris Release',
              author_link: env.JOB_DISPLAY_URL,
              title      : "${currentBuild.fullProjectName} build passed <${env.RUN_DISPLAY_URL}|${currentBuild.displayName}>."
          ]
      ]
    }
    failure {
      notifyBuild color: 'danger', channel: 'C03D4GD7RHP', title: ':rocket: Iris Release'
    }
  }
}

def saveLogs() {

  echo "Deployment/test to ${env.ENVIRONMENT} failed!"
  withKubeConfig(
      credentialsId: 'devenv-eks',
      serverUrl: 'https://72480afab36290b71d9d6395d9c66606.gr7.eu-central-1.eks.amazonaws.com/') {
    sh """
      chmod go-rw "${KUBECONFIG}"
    """
    sh(returnStdout: false, script: './scripts/get-logs.sh')
  }
  archiveArtifacts allowEmptyArchive: true, artifacts: "logs/${env.ENVIRONMENT}/*"

}
