/*
 * Copyright (c) 2022 Silent Eight Pte. Ltd. All rights reserved.
 */

@Library('pipeline-shared-library@master') _

def version = ""

def makeSlackChanges(changes, defaults) {
  return changes.findAll {
    it.changes.size() > 0
  }.collect {
    [
        title     : "Build #${it.number}",
        title_link: it.url,
        mrkdwn_in : ["text"],
        text      : it.changes.collect {ch ->
          def slackUserId = slackUserIdFromEmail email: ch.authorEmail
          def author = slackUserId ? "<@${slackUserId}>" : ch.authorName
          "<https://gitlab.silenteight.com/iris/iris/-/commit/${ch.commitId}|${ch.commitId.take(7)}>: ${ch.truncatedMsg} - _${author}_"
        }.join('\n'),
    ] + defaults ?: [:]
  }
}

@NonCPS
def getAllChanges() {
  def buildChanges = []
  buildChanges << getBuildChanges(currentBuild)

  def buildToCheck = currentBuild.getPreviousBuild()
  while (buildToCheck != null && buildToCheck.result != 'SUCCESS') {
    buildChanges << getBuildChanges(buildToCheck)

    buildToCheck = buildToCheck.previousBuild
  }

  return buildChanges
}

@NonCPS
def getBuildChanges(build) {
  return [
      number : build.number,
      url    : build.absoluteUrl,
      changes: getChangesForBuild(build),
  ]
}

@NonCPS
def getChangesForBuild(build) {
  MAX_MSG_LEN = 60

  def changeSets = build.changeSets
  def changes = []

  for (int i = 0; i < changeSets.size(); i++) {
    def entries = changeSets[i].items
    for (int j = 0; j < entries.length; j++) {
      def entry = entries[j]
      def truncatedMsg = entry.msg.take(MAX_MSG_LEN)
      if (entry.msg.length() > MAX_MSG_LEN) {
        truncatedMsg += "..."
      }

      authorId = entry.author.id
      authorEmail = authorId.endsWith('@silenteight.com') ? authorId : authorId + '@silenteight.com'

      changes << [
          commitId     : entry.commitId,
          truncatedMsg : truncatedMsg,
          authorName   : entry.author.fullName,
          authorEmail  : authorEmail,
          affectedPaths: entry.affectedPaths,
      ]
    }
  }

  return changes
}

pipeline {
  agent {
    label 'ec2-agent-devenv'
  }
  triggers {
    pollSCM 'H 5-17 * * 1-5'
  }
  options {
    gitLabConnection(env.GITLAB_CONNECTION_NAME)
    disableConcurrentBuilds()
    ansiColor('xterm')
  }
  stages {
    stage('Version') {
      steps {
        script {
          version = sh(returnStdout: true, script: './scripts/get-version.sh').trim()
        }

        updateBuildName displayName: "#${env.BUILD_NUMBER} v${version}"
      }
    }
    stage('Kubernetes Release') {
      matrix {
        axes {
          axis {
            name 'ENVIRONMENT'
            values 'sierra', 'hotel', 'foxtrot'
          }
        }
        environment {
          ARTIFACTORY = credentials('artifactory-user')
        }
        stages {
          stage('Install chart') {
            steps {
              echo "Deploying version ${version} to ${ENVIRONMENT}"
              withKubeConfig(
                  credentialsId: 'devenv-eks',
                  serverUrl: 'https://72480afab36290b71d9d6395d9c66606.gr7.eu-central-1.eks.amazonaws.com/') {
                sh """
                  helm install \
                    --create-namespace \
                    --namespace jenkins-${ENVIRONMENT} \
                    --username "\$ARTIFACTORY_USR" \
                    --password "\$ARTIFACTORY_PSW" \
                    --values kubernetes/values.core.yaml \
                    --values kubernetes/values.ingress-internal.yaml  \
                    --values kubernetes/values.${ENVIRONMENT}.yaml \
                    --wait \
                    --timeout 10m \
                    sear \
                    https://repo.silenteight.com/artifactory/helm/sear/sear-"${version}".tgz
                """
              }
            }
            post {
              failure {
                echo "Deployment of ${version} to ${ENVIRONMENT} failed!"
                withKubeConfig(
                    credentialsId: 'devenv-eks',
                    serverUrl: 'https://72480afab36290b71d9d6395d9c66606.gr7.eu-central-1.eks.amazonaws.com/') {
                  sh """
                    export NAMESPACE=jenkins-${ENVIRONMENT}
                    export LOGS_DIR=logs/${ENVIRONMENT}

                    mkdir -p "\$LOGS_DIR"

                    kubectl get pods \
                      --namespace \$NAMESPACE \
                      --output wide \
                      --sort-by '.status.containerStatuses[0].restartCount' | tee "\$LOGS_DIR"/${ENVIRONMENT}+pods.log

                    kubectl get events \
                      --namespace \$NAMESPACE \
                      --field-selector='type!=Normal,reason=BackOff' \
                      --sort-by='.metadata.creationTimestamp' | tee "\$LOGS_DIR"/${ENVIRONMENT}+events.log

                    FAILED_PODS=\$(set +x && kubectl get pods \
                      --namespace \$NAMESPACE \
                      --output=custom-columns="POD:metadata.name" \
                      --no-headers)
                    for pod in \$FAILED_PODS ; do
                      kubectl --namespace \$NAMESPACE logs --previous \$pod >"\$LOGS_DIR"/${ENVIRONMENT}+\$pod.previous.log || true
                      kubectl --namespace \$NAMESPACE logs \$pod >"\$LOGS_DIR"/${ENVIRONMENT}+\$pod.log || true
                    done
                  """
                }
                archiveArtifacts allowEmptyArchive: true, artifacts: "logs/${ENVIRONMENT}/*"
              }
              cleanup {
                withKubeConfig(
                    credentialsId: 'devenv-eks',
                    serverUrl: 'https://72480afab36290b71d9d6395d9c66606.gr7.eu-central-1.eks.amazonaws.com/') {
                  sh "helm uninstall --namespace jenkins-${ENVIRONMENT} sear"
                }
              }
            }
          }
        }
      }
    }
  }
  post {
    failure {
      slackSend color: 'danger', channel: 'C03D4GD7RHP', attachments: [
          [
              color : 'danger',
              author_name: ':rocket: Iris Release',
              author_link: env.JOB_DISPLAY_URL,
              title : "${currentBuild.fullProjectName} build failed <${env.RUN_DISPLAY_URL}|${currentBuild.displayName}>.",
              fields: [
                  [
                      title: 'Artifacts',
                      value: "<${env.RUN_ARTIFACTS_DISPLAY_URL}|link to artifacts>",
                      short: true
                  ],
                  [
                      title: 'Changes',
                      value: "<${env.RUN_CHANGES_DISPLAY_URL}|link to changes>",
                      short: true
                  ],
                  [
                      title: 'Tests',
                      value: "<${env.RUN_TESTS_DISPLAY_URL}|link to tests>",
                      short: true
                  ],
              ]
          ],
      ] + makeSlackChanges(getAllChanges(), [color: 'danger'])
    }
  }
}
