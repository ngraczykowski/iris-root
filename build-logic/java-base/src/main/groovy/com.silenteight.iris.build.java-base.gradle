import org.gradle.api.tasks.testing.logging.TestExceptionFormat

plugins {
  id('java')
  id('com.silenteight.iris.build.jacoco')
}

group = 'com.silenteight.iris'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
    vendor = JvmVendorSpec.AZUL
  }
}

dependencies {
  implementation(platform('com.silenteight.iris.platform:product-platform'))
  annotationProcessor(platform('com.silenteight.iris.platform:product-platform'))
  implementation(libs.aspectjrt)
  implementation(libs.slf4j.api)

  // APIs
  compileOnly(libs.jsr305, libs.jetbrains.annotations, libs.spotbugs.annotations)
  testCompileOnly(libs.jsr305, libs.jetbrains.annotations, libs.spotbugs.annotations)

  // Lombok
  compileOnly(libs.lombok)
  testCompileOnly(libs.lombok)
  annotationProcessor(libs.lombok)
  testAnnotationProcessor(libs.lombok)

  testImplementation(platform('com.silenteight.iris.platform:test-platform'))
  testImplementation(libs.assertj.core)
  testImplementation(libs.junit.jupiter.api)
  testImplementation(libs.junit.jupiter.migrationsupport)
  testImplementation(libs.junit.jupiter.params)
  testImplementation(libs.mockito.core)
  testImplementation(libs.mockito.junit.jupiter)
  testRuntimeOnly(libs.junit.jupiter.engine)
}

tasks.named('test') {
  useJUnitPlatform()

  systemProperty('file.encoding', 'UTF-8')
  systemProperty('sun.jnu.encoding', 'UTF-8')
  systemProperty('user.language', 'en')
  systemProperty('user.timezone', 'UTC')
  systemProperty('java.awt.headless', 'true')

  testLogging {
    exceptionFormat = TestExceptionFormat.FULL
  }

  // When using Java 9, Groovy (Spock) accesses illegal APIs. Open them here.
  jvmArgs(
      '--add-opens', 'java.base/java.io=ALL-UNNAMED',
      '--add-opens', 'java.base/java.lang.invoke=ALL-UNNAMED',
      '--add-opens', 'java.base/java.lang.reflect=ALL-UNNAMED',
      '--add-opens', 'java.base/java.lang=ALL-UNNAMED',
      '--add-opens', 'java.base/java.nio.charset=ALL-UNNAMED',
      '--add-opens', 'java.base/java.nio=ALL-UNNAMED',
      '--add-opens', 'java.base/java.security=ALL-UNNAMED',
      '--add-opens', 'java.base/java.text=ALL-UNNAMED',
      '--add-opens', 'java.base/java.time.chrono=ALL-UNNAMED',
      '--add-opens', 'java.base/java.time.format=ALL-UNNAMED',
      '--add-opens', 'java.base/java.time=ALL-UNNAMED',
      '--add-opens', 'java.base/java.util.concurrent.atomic=ALL-UNNAMED',
      '--add-opens', 'java.base/java.util.function=ALL-UNNAMED',
      '--add-opens', 'java.base/java.util.regex=ALL-UNNAMED',
      '--add-opens', 'java.base/java.util.stream=ALL-UNNAMED',
      '--add-opens', 'java.base/java.util=ALL-UNNAMED',
      '--add-opens', 'java.base/sun.nio.cs=ALL-UNNAMED',
      '--add-opens', 'java.sql/java.sql=ALL-UNNAMED',
      '--add-opens', 'java.sql/javax.sql=ALL-UNNAMED',
  )
}

configurations.all {
  resolutionStrategy {
//    dependencySubstitution {
//      substitute module("org.glassfish:javax.el") using module(
//          "org.apache.tomcat.embed:tomcat-embed-el:9.0.55") because "Tomcat is a kitty"
//      substitute module("org.glassfish:jakarta.el") using module(
//          "org.apache.tomcat.embed:tomcat-embed-el:9.0.55") because "Tomcat is a kitty"
//    }

    cacheChangingModulesFor 0, 'seconds'
    failOnVersionConflict()
    preferProjectModules()

    force libs.aspectjrt
    force libs.aspectjtools
  }
}

//allprojects {
//  apply plugin: 'idea'
//
//  idea {
//    module {
//      [
//          '.gradle',
//          'build',
//          'cert',
//          'data',
//          'html',
//          'lib',
//          'log',
//          'opt',
//          'plugin',
//          'python',
//          'run',
//          'tmp',
//      ].each {
//        excludeDirs += file("$projectDir/$it")
//      }
//      outputDir file("${buildDir}/idea/production/${delegate.name}")
//      testOutputDir file("${buildDir}/idea/test/${delegate.name}")
//    }
//  }
//}

def commonCompilerArgs = [
    '-parameters',
    //'-Xlint:-options',
    '-Xlint:cast',
    '-Xlint:classfile',
    '-Xlint:dep-ann',
    '-Xlint:divzero',
    '-Xlint:empty',
    '-Xlint:finally',
    '-Xlint:overloads',
    '-Xlint:overrides',
    '-Xlint:path',
    '-Xlint:serial',
    '-Xlint:static',
    '-Xlint:try',
]

compileJava.options*.compilerArgs = commonCompilerArgs + [
    '-Xlint:deprecation',
    '-Xlint:fallthrough',
    '-Xlint:rawtypes',
    '-Xlint:unchecked',
    '-Xlint:varargs',
]

compileTestJava.options*.compilerArgs = commonCompilerArgs + [
    '-Xlint:-deprecation',
    '-Xlint:-fallthrough',
    '-Xlint:-rawtypes',
    '-Xlint:-unchecked',
    '-Xlint:-varargs',
]
