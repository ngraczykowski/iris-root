From d779393dd89c50943c15848cb33267bf58532d36 Mon Sep 17 00:00:00 2001
From: Tomasz Biedrzycki <tbiedrzycki@silenteight.com>
Date: Thu, 17 Mar 2022 15:21:26 +0100
Subject: [PATCH 01/12] WEB-747 Added library grpc-census

---
 modules/simulator/simulator-app/build.gradle | 1 +
 1 file changed, 1 insertion(+)

diff --git a/modules/simulator/simulator-app/build.gradle b/modules/simulator/simulator-app/build.gradle
index e782d74..69bc1d6 100644
--- a/modules/simulator/simulator-app/build.gradle
+++ b/modules/simulator/simulator-app/build.gradle
@@ -60,6 +60,7 @@ dependencies {
 
   implementation libraries.grpc_api
   implementation libraries.grpc_stub
+  implementation libraries.grpc_census
 
   implementation libraries.protobuf_java_util
 
-- 
2.25.1


From cf140953f3de58ad935b1f1a760243805a7a782e Mon Sep 17 00:00:00 2001
From: Jenkins <jenkins@silenteight.com>
Date: Wed, 6 Apr 2022 08:45:55 +0000
Subject: [PATCH 02/12] Snapshot 1.15.0-SNAPSHOT

---
 modules/simulator/gradle.properties | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/modules/simulator/gradle.properties b/modules/simulator/gradle.properties
index b604233..4f4a4a8 100644
--- a/modules/simulator/gradle.properties
+++ b/modules/simulator/gradle.properties
@@ -3,7 +3,7 @@
 ####################################################################################################
 description=Silent Eight Simulator
 group=com.silenteight.simulator
-version=1.14.0-SNAPSHOT
+version=1.15.0-SNAPSHOT
 
 ####################################################################################################
 # Gradle Settings
-- 
2.25.1


From 499b11cb1cb13cef98e472b442c587c27c246867 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Rafa=C5=82=20Pajdak?= <rpajdak@silenteight.com>
Date: Fri, 29 Apr 2022 12:21:30 +0000
Subject: [PATCH 03/12] Feature:  Datasets-create rest endpoint for
 single/multiple hit (WEB-1976)
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Closes WEB-1976

Reviewed-by: Tomasz Biedrzycki <tbiedrzycki@silenteight.com>
Reviewed-by: Kamil Dzięcioł <kdzieciol@silenteight.com>
Reviewed-by: Marek Mastyło <mmastylo@silenteight.com>
Reviewed-by: Wojciech Wątroba <wwatroba@silenteight.com>
Merged from: https://gitlab.silenteight.com/sens/simulator/-/merge_requests/113
---
 .../resources/config/application-sierra.yml   |  6 ---
 .../src/main/resources/config/application.yml |  1 -
 .../create/CreateDatasetConfiguration.java    |  6 ---
 .../create/CreateDatasetProperties.java       | 31 ---------------
 .../dataset/create/CreateDatasetRequest.java  |  5 +--
 .../create/CreateDatasetRestController.java   |  8 ++--
 .../dataset/create/CreateDatasetUseCase.java  |  6 +--
 .../create/DatasetLabelProperties.java        | 20 ----------
 .../create/dto/CreateDatasetRequestDto.java   |  4 ++
 .../simulator/dataset/domain/AlertMatch.java  |  6 +++
 .../dataset/domain/DatasetEntity.java         |  6 +++
 .../domain/DatasetMetadataService.java        |  7 ++++
 .../dto/AlertSelectionCriteriaDto.java        | 12 +++++-
 .../simulator/dataset/dto/DatasetDto.java     |  3 ++
 .../grpc/create/GrpcCreateDatasetService.java |  8 ++++
 .../create/CreateDatasetUseCaseTest.java      | 13 +++++--
 .../domain/DatasetMetadataServiceTest.java    | 29 +++++++++++---
 .../dataset/domain/DatasetQueryTest.java      |  1 +
 .../dataset/fixture/DatasetFixtures.java      | 18 ++++-----
 .../get/GetDatasetRestControllerTest.java     |  2 +
 .../create/GrpcCreateDatasetServiceTest.java  | 39 ++++++++++++++++++-
 .../list/ListDatasetRestControllerTest.java   |  3 ++
 .../db.changelog-simulator-1.5.0.xml          |  6 +++
 .../src/api/dataset/openapi.yaml              | 17 +++++++-
 24 files changed, 155 insertions(+), 102 deletions(-)
 delete mode 100644 modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/create/CreateDatasetProperties.java
 delete mode 100644 modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/create/DatasetLabelProperties.java
 create mode 100644 modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/domain/AlertMatch.java

diff --git a/modules/simulator/simulator-app/src/main/resources/config/application-sierra.yml b/modules/simulator/simulator-app/src/main/resources/config/application-sierra.yml
index 9510e95..79f7aa6 100644
--- a/modules/simulator/simulator-app/src/main/resources/config/application-sierra.yml
+++ b/modules/simulator/simulator-app/src/main/resources/config/application-sierra.yml
@@ -1,9 +1,3 @@
-simulator:
-  dataset:
-    create:
-      labels:
-        - name: matchQuantity
-          values: ['single']
 sentry:
   environment: sierra
   traces-sample-rate: 0
diff --git a/modules/simulator/simulator-app/src/main/resources/config/application.yml b/modules/simulator/simulator-app/src/main/resources/config/application.yml
index fd85310..028509d 100644
--- a/modules/simulator/simulator-app/src/main/resources/config/application.yml
+++ b/modules/simulator/simulator-app/src/main/resources/config/application.yml
@@ -225,7 +225,6 @@ simulator:
 #---------------------------------------------------------------------------------------------------
 # SEP BASE CONFIGURATION
 #---------------------------------------------------------------------------------------------------
-
 serp:
   show-env: true
 
diff --git a/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/create/CreateDatasetConfiguration.java b/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/create/CreateDatasetConfiguration.java
index a3e2291..f885f26 100644
--- a/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/create/CreateDatasetConfiguration.java
+++ b/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/create/CreateDatasetConfiguration.java
@@ -3,27 +3,21 @@ package com.silenteight.simulator.dataset.create;
 import com.silenteight.auditing.bs.AuditingLogger;
 import com.silenteight.simulator.dataset.domain.DatasetMetadataService;
 
-import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 
-import javax.validation.Valid;
-
 @Configuration
-@EnableConfigurationProperties(CreateDatasetProperties.class)
 class CreateDatasetConfiguration {
 
   @Bean
   CreateDatasetUseCase createDatasetUseCase(
       CreateDatasetService createDatasetService,
       DatasetMetadataService datasetMetadataService,
-      @Valid CreateDatasetProperties properties,
       AuditingLogger auditingLogger) {
 
     return new CreateDatasetUseCase(
         createDatasetService,
         datasetMetadataService,
-        properties.datasetLabels(),
         auditingLogger);
   }
 }
diff --git a/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/create/CreateDatasetProperties.java b/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/create/CreateDatasetProperties.java
deleted file mode 100644
index e354301..0000000
--- a/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/create/CreateDatasetProperties.java
+++ /dev/null
@@ -1,31 +0,0 @@
-package com.silenteight.simulator.dataset.create;
-
-import lombok.Data;
-
-import org.springframework.boot.context.properties.ConfigurationProperties;
-import org.springframework.boot.context.properties.ConstructorBinding;
-import org.springframework.validation.annotation.Validated;
-
-import java.util.List;
-import javax.validation.Valid;
-import javax.validation.constraints.NotNull;
-
-import static java.util.Collections.emptyList;
-import static java.util.stream.Collectors.toList;
-
-@Data
-@Validated
-@ConfigurationProperties(prefix = "simulator.dataset.create")
-@ConstructorBinding
-class CreateDatasetProperties {
-
-  @NotNull
-  private List<@Valid DatasetLabelProperties> labels = emptyList();
-
-  List<DatasetLabel> datasetLabels() {
-    return labels
-        .stream()
-        .map(label -> new DatasetLabel(label.getName(), label.getValues()))
-        .collect(toList());
-  }
-}
diff --git a/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/create/CreateDatasetRequest.java b/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/create/CreateDatasetRequest.java
index a85b97c..77a3a9f 100644
--- a/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/create/CreateDatasetRequest.java
+++ b/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/create/CreateDatasetRequest.java
@@ -41,6 +41,7 @@ public class CreateDatasetRequest implements AuditableRequest {
   List<DatasetLabel> labels = new ArrayList<>();
   @Builder.Default
   UUID correlationId = randomUUID();
+  boolean useMultiHitAlerts;
 
   @Override
   public void preAudit(Consumer<AuditDataDto> logger) {
@@ -69,8 +70,4 @@ public class CreateDatasetRequest implements AuditableRequest {
   void addCountries(List<String> countries) {
     labels.add(new DatasetLabel(COUNTRY, countries));
   }
-
-  void addLabels(List<DatasetLabel> labels) {
-    this.labels.addAll(labels);
-  }
 }
diff --git a/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/create/CreateDatasetRestController.java b/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/create/CreateDatasetRestController.java
index a9a0f22..3083f83 100644
--- a/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/create/CreateDatasetRestController.java
+++ b/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/create/CreateDatasetRestController.java
@@ -9,7 +9,6 @@ import com.silenteight.simulator.dataset.create.dto.CreateDatasetRequestDto;
 import io.swagger.v3.oas.annotations.responses.ApiResponse;
 import io.swagger.v3.oas.annotations.responses.ApiResponses;
 import io.swagger.v3.oas.annotations.tags.Tag;
-import org.apache.commons.lang3.ObjectUtils;
 import org.springframework.http.ResponseEntity;
 import org.springframework.security.access.prepost.PreAuthorize;
 import org.springframework.security.core.Authentication;
@@ -18,11 +17,12 @@ import org.springframework.web.bind.annotation.RequestBody;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RestController;
 
-import java.util.List;
 import javax.validation.Valid;
 
 import static com.silenteight.simulator.common.web.rest.RestConstants.*;
 import static com.silenteight.simulator.dataset.domain.DomainConstants.DATASET_ENDPOINT_TAG;
+import static java.util.List.of;
+import static org.apache.commons.lang3.ObjectUtils.defaultIfNull;
 import static org.springframework.http.HttpStatus.CREATED;
 import static org.springframework.http.ResponseEntity.status;
 
@@ -56,8 +56,10 @@ class CreateDatasetRestController {
         .rangeFrom(dto.getQuery().getRangeFrom())
         .rangeTo(dto.getQuery().getRangeTo())
         .createdBy(authentication.getName())
+        .useMultiHitAlerts(dto.useMultiHitAlerts())
         .build();
-    request.addCountries(ObjectUtils.defaultIfNull(dto.getQuery().getCountries(), List.of()));
+
+    request.addCountries(defaultIfNull(dto.getQuery().getCountries(), of()));
     useCase.activate(request);
     log.debug("Create dataset request processed.");
 
diff --git a/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/create/CreateDatasetUseCase.java b/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/create/CreateDatasetUseCase.java
index c5e02e0..fbd5fcd 100644
--- a/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/create/CreateDatasetUseCase.java
+++ b/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/create/CreateDatasetUseCase.java
@@ -8,8 +8,6 @@ import com.silenteight.auditing.bs.AuditingLogger;
 import com.silenteight.simulator.dataset.create.exception.EmptyDatasetException;
 import com.silenteight.simulator.dataset.domain.DatasetMetadataService;
 
-import java.util.List;
-
 @RequiredArgsConstructor
 public class CreateDatasetUseCase {
 
@@ -18,13 +16,11 @@ public class CreateDatasetUseCase {
   @NonNull
   private final DatasetMetadataService datasetMetadataService;
   @NonNull
-  private final List<DatasetLabel> labels;
-  @NonNull
   private final AuditingLogger auditingLogger;
 
   public void activate(CreateDatasetRequest request) {
     request.preAudit(auditingLogger::log);
-    request.addLabels(labels);
+
     Dataset dataset = createDatasetService.createDataset(request);
 
     if (dataset.getAlertCount() == 0)
diff --git a/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/create/DatasetLabelProperties.java b/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/create/DatasetLabelProperties.java
deleted file mode 100644
index 37e8da3..0000000
--- a/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/create/DatasetLabelProperties.java
+++ /dev/null
@@ -1,20 +0,0 @@
-package com.silenteight.simulator.dataset.create;
-
-import lombok.AllArgsConstructor;
-import lombok.Data;
-import lombok.NoArgsConstructor;
-
-import java.util.List;
-import javax.validation.constraints.NotBlank;
-import javax.validation.constraints.NotNull;
-
-@Data
-@NoArgsConstructor
-@AllArgsConstructor
-class DatasetLabelProperties {
-
-  @NotBlank
-  private String name;
-  @NotNull
-  private List<String> values;
-}
diff --git a/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/create/dto/CreateDatasetRequestDto.java b/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/create/dto/CreateDatasetRequestDto.java
index e294668..75560f7 100644
--- a/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/create/dto/CreateDatasetRequestDto.java
+++ b/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/create/dto/CreateDatasetRequestDto.java
@@ -19,4 +19,8 @@ public class CreateDatasetRequestDto {
   private String description;
   @NonNull
   private AlertSelectionCriteriaDto query;
+
+  public boolean useMultiHitAlerts() {
+    return query.getUseMultiHitAlerts();
+  }
 }
diff --git a/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/domain/AlertMatch.java b/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/domain/AlertMatch.java
new file mode 100644
index 0000000..d18d24a
--- /dev/null
+++ b/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/domain/AlertMatch.java
@@ -0,0 +1,6 @@
+package com.silenteight.simulator.dataset.domain;
+
+public enum AlertMatch {
+  SINGLE,
+  MULTI;
+}
diff --git a/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/domain/DatasetEntity.java b/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/domain/DatasetEntity.java
index 9bdbb3c..471cb3a 100644
--- a/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/domain/DatasetEntity.java
+++ b/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/domain/DatasetEntity.java
@@ -90,6 +90,11 @@ class DatasetEntity extends BaseEntity implements Serializable {
   @Column(name = "labels")
   private String labels;
 
+  @ToString.Include
+  @Enumerated(EnumType.STRING)
+  @Column(nullable = false)
+  private AlertMatch alertMatch;
+
   void archive() {
     assertInState(ACTIVE);
     this.state = ARCHIVED;
@@ -115,6 +120,7 @@ class DatasetEntity extends BaseEntity implements Serializable {
         .query(toQuery())
         .createdAt(getCreatedAt())
         .createdBy(getCreatedBy())
+        .alertMatch(getAlertMatch())
         .build();
   }
 
diff --git a/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/domain/DatasetMetadataService.java b/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/domain/DatasetMetadataService.java
index 5088e24..7f5239b 100644
--- a/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/domain/DatasetMetadataService.java
+++ b/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/domain/DatasetMetadataService.java
@@ -16,6 +16,8 @@ import java.util.Collection;
 import java.util.Set;
 import java.util.UUID;
 
+import static com.silenteight.simulator.dataset.domain.AlertMatch.MULTI;
+import static com.silenteight.simulator.dataset.domain.AlertMatch.SINGLE;
 import static com.silenteight.simulator.dataset.domain.DatasetState.ACTIVE;
 import static java.util.stream.Collectors.toList;
 
@@ -38,6 +40,7 @@ public class DatasetMetadataService {
         .generationDateFrom(request.getRangeFrom())
         .generationDateTo(request.getRangeTo())
         .labels(JsonConversionHelper.INSTANCE.serializeToString(request.getLabels()))
+        .alertMatch(setAlertMatch(request.isUseMultiHitAlerts()))
         .build();
     repository.save(datasetEntity);
     log.debug("Created Metadata DatasetEntity={}", datasetEntity);
@@ -80,4 +83,8 @@ public class DatasetMetadataService {
         .findByDatasetId(datasetId)
         .orElseThrow(() -> new DatasetNotFoundException(datasetId));
   }
+
+  private static AlertMatch setAlertMatch(boolean useMultiHitAlerts) {
+    return useMultiHitAlerts ? MULTI : SINGLE;
+  }
 }
diff --git a/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/dto/AlertSelectionCriteriaDto.java b/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/dto/AlertSelectionCriteriaDto.java
index 6126167..87f4dad 100644
--- a/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/dto/AlertSelectionCriteriaDto.java
+++ b/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/dto/AlertSelectionCriteriaDto.java
@@ -6,10 +6,10 @@ import lombok.NonNull;
 import lombok.Value;
 
 import java.time.OffsetDateTime;
-import java.time.temporal.ChronoUnit;
 import java.util.List;
 
 import static java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
+import static java.time.temporal.ChronoUnit.SECONDS;
 import static java.util.List.of;
 
 @Value
@@ -19,6 +19,10 @@ public class AlertSelectionCriteriaDto {
   @NonNull
   RangeQueryDto alertGenerationDate;
 
+  boolean useMultiHitAlerts;
+
+  boolean useLearningAlertsOnly;
+
   @Default
   List<String> countries = of();
 
@@ -37,7 +41,11 @@ public class AlertSelectionCriteriaDto {
 
   public String getDisplayRangeTo() {
     return alertGenerationDate.getTo()
-        .minus(1, ChronoUnit.SECONDS)
+        .minus(1, SECONDS)
         .format(ISO_LOCAL_DATE);
   }
+
+  public boolean getUseMultiHitAlerts() {
+    return useMultiHitAlerts;
+  }
 }
diff --git a/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/dto/DatasetDto.java b/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/dto/DatasetDto.java
index 24840af..7309048 100644
--- a/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/dto/DatasetDto.java
+++ b/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/dto/DatasetDto.java
@@ -4,6 +4,7 @@ import lombok.Builder;
 import lombok.NonNull;
 import lombok.Value;
 
+import com.silenteight.simulator.dataset.domain.AlertMatch;
 import com.silenteight.simulator.dataset.domain.DatasetState;
 
 import java.time.OffsetDateTime;
@@ -29,4 +30,6 @@ public class DatasetDto {
   OffsetDateTime createdAt;
   @NonNull
   String createdBy;
+  @NonNull
+  AlertMatch alertMatch;
 }
diff --git a/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/grpc/create/GrpcCreateDatasetService.java b/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/grpc/create/GrpcCreateDatasetService.java
index e80e265..9e707ea 100644
--- a/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/grpc/create/GrpcCreateDatasetService.java
+++ b/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/grpc/create/GrpcCreateDatasetService.java
@@ -10,6 +10,7 @@ import com.silenteight.adjudication.api.v1.FilteredAlerts;
 import com.silenteight.adjudication.api.v1.FilteredAlerts.AlertTimeRange;
 import com.silenteight.adjudication.api.v1.FilteredAlerts.LabelValues;
 import com.silenteight.adjudication.api.v1.FilteredAlerts.LabelsFilter;
+import com.silenteight.adjudication.api.v1.FilteredAlerts.MatchQuantity;
 import com.silenteight.simulator.dataset.create.CreateDatasetRequest;
 import com.silenteight.simulator.dataset.create.CreateDatasetService;
 import com.silenteight.simulator.dataset.create.DatasetLabel;
@@ -17,6 +18,8 @@ import com.silenteight.simulator.dataset.create.DatasetLabel;
 import java.util.List;
 import java.util.Map;
 
+import static com.silenteight.adjudication.api.v1.FilteredAlerts.MatchQuantity.ALL;
+import static com.silenteight.adjudication.api.v1.FilteredAlerts.MatchQuantity.SINGLE;
 import static com.silenteight.protocol.utils.MoreTimestamps.toTimestamp;
 import static java.util.stream.Collectors.toMap;
 
@@ -44,6 +47,7 @@ class GrpcCreateDatasetService implements CreateDatasetService {
 
   private static FilteredAlerts toFilteredAlerts(CreateDatasetRequest request) {
     return FilteredAlerts.newBuilder()
+        .setMatchQuantity(setMatchQuantity(request))
         .setAlertTimeRange(toAlertTimeRange(request))
         .setLabelsFilter(toLabelsFilter(request.getLabels()))
         .build();
@@ -73,4 +77,8 @@ class GrpcCreateDatasetService implements CreateDatasetService {
         .addAllValue(values)
         .build();
   }
+
+  private static MatchQuantity setMatchQuantity(CreateDatasetRequest request) {
+    return request.isUseMultiHitAlerts() ? ALL : SINGLE;
+  }
 }
diff --git a/modules/simulator/simulator-dataset/src/test/java/com/silenteight/simulator/dataset/create/CreateDatasetUseCaseTest.java b/modules/simulator/simulator-dataset/src/test/java/com/silenteight/simulator/dataset/create/CreateDatasetUseCaseTest.java
index 7942f0c..b4e5941 100644
--- a/modules/simulator/simulator-dataset/src/test/java/com/silenteight/simulator/dataset/create/CreateDatasetUseCaseTest.java
+++ b/modules/simulator/simulator-dataset/src/test/java/com/silenteight/simulator/dataset/create/CreateDatasetUseCaseTest.java
@@ -38,13 +38,15 @@ class CreateDatasetUseCaseTest {
   @BeforeEach
   void setUp() {
     underTest = new CreateDatasetUseCase(
-        createDatasetService, datasetMetadataService, LABELS, auditingLogger);
+        createDatasetService,
+        datasetMetadataService,
+        auditingLogger);
   }
 
   @Test
   void createDataset() {
     // given
-    CreateDatasetRequest request = makeCreateDatasetRequest();
+    CreateDatasetRequest request = makeCreateDatasetRequest(true, true);
     when(createDatasetService.createDataset(request)).thenReturn(DATASET);
 
     // when
@@ -63,7 +65,7 @@ class CreateDatasetUseCaseTest {
   @Test
   void throwExceptionIfDatasetIsEmpty() {
     // given
-    CreateDatasetRequest request = makeCreateDatasetRequest();
+    CreateDatasetRequest request = makeCreateDatasetRequest(true, true);
     when(createDatasetService.createDataset(request)).thenReturn(EMPTY_DATASET);
 
     // then
@@ -73,7 +75,9 @@ class CreateDatasetUseCaseTest {
     verifyNoInteractions(datasetMetadataService);
   }
 
-  private static CreateDatasetRequest makeCreateDatasetRequest() {
+  private static CreateDatasetRequest makeCreateDatasetRequest(
+      boolean useLearningAlertsOnly, boolean useMultiHitAlerts) {
+
     return CreateDatasetRequest.builder()
         .id(ID_1)
         .datasetName(DATASET_NAME)
@@ -81,6 +85,7 @@ class CreateDatasetUseCaseTest {
         .rangeFrom(FROM)
         .rangeTo(TO)
         .createdBy(CREATED_BY)
+        .useMultiHitAlerts(useMultiHitAlerts)
         .build();
   }
 
diff --git a/modules/simulator/simulator-dataset/src/test/java/com/silenteight/simulator/dataset/domain/DatasetMetadataServiceTest.java b/modules/simulator/simulator-dataset/src/test/java/com/silenteight/simulator/dataset/domain/DatasetMetadataServiceTest.java
index 376da25..beaab3c 100644
--- a/modules/simulator/simulator-dataset/src/test/java/com/silenteight/simulator/dataset/domain/DatasetMetadataServiceTest.java
+++ b/modules/simulator/simulator-dataset/src/test/java/com/silenteight/simulator/dataset/domain/DatasetMetadataServiceTest.java
@@ -6,6 +6,9 @@ import com.silenteight.simulator.dataset.create.CreateDatasetRequest;
 import com.silenteight.simulator.dataset.domain.exception.DatasetNotFoundException;
 
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.params.ParameterizedTest;
+import org.junit.jupiter.params.provider.Arguments;
+import org.junit.jupiter.params.provider.MethodSource;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.test.context.ContextConfiguration;
 import org.springframework.test.context.TestPropertySource;
@@ -15,7 +18,10 @@ import java.util.List;
 import java.util.Optional;
 import java.util.Set;
 import java.util.UUID;
+import java.util.stream.Stream;
 
+import static com.silenteight.simulator.dataset.domain.AlertMatch.MULTI;
+import static com.silenteight.simulator.dataset.domain.AlertMatch.SINGLE;
 import static com.silenteight.simulator.dataset.domain.DatasetState.ACTIVE;
 import static com.silenteight.simulator.dataset.domain.DatasetState.ARCHIVED;
 import static com.silenteight.simulator.dataset.domain.DatasetState.EXPIRED;
@@ -33,10 +39,12 @@ class DatasetMetadataServiceTest extends BaseDataJpaTest {
   @Autowired
   DatasetEntityRepository repository;
 
-  @Test
-  void createMetadata() {
+  @ParameterizedTest
+  @MethodSource("getCreateDataSetRequestList")
+  void createMetadata(
+      CreateDatasetRequest request, AlertMatch expectedAlertMatchLevel) {
     // when
-    underTest.createMetadata(makeCreateDatasetRequest(), DATASET);
+    underTest.createMetadata(request, DATASET);
 
     // then
     Optional<DatasetEntity> datasetOpt = repository.findByDatasetId(ID_1);
@@ -44,6 +52,7 @@ class DatasetMetadataServiceTest extends BaseDataJpaTest {
     DatasetEntity dataset = datasetOpt.get();
     assertThat(dataset.getDatasetId()).isEqualTo(ID_1);
     assertThat(dataset.getState()).isEqualTo(ACTIVE);
+    assertThat(dataset.getAlertMatch()).isEqualTo(expectedAlertMatchLevel);
     assertThat(dataset.getExternalResourceName()).isEqualTo(EXTERNAL_RESOURCE_NAME);
   }
 
@@ -93,15 +102,24 @@ class DatasetMetadataServiceTest extends BaseDataJpaTest {
     assertThat(savedDataset.getState()).isEqualTo(EXPIRED);
   }
 
-  private static CreateDatasetRequest makeCreateDatasetRequest() {
+  private static Stream<Arguments> getCreateDataSetRequestList() {
+    return Stream.of(
+        Arguments.of(makeCreateDatasetRequest(true), MULTI),
+        Arguments.of(
+            makeCreateDatasetRequest(false), SINGLE)
+    );
+  }
+
+  private static CreateDatasetRequest makeCreateDatasetRequest(boolean useMultiHitAlerts) {
+
     return CreateDatasetRequest.builder()
         .id(ID_1)
         .datasetName(DATASET_NAME)
         .description(DESCRIPTION)
         .rangeFrom(FROM)
         .rangeTo(TO)
-        .labels(LABELS)
         .createdBy(CREATED_BY)
+        .useMultiHitAlerts(useMultiHitAlerts)
         .build();
   }
 
@@ -117,6 +135,7 @@ class DatasetMetadataServiceTest extends BaseDataJpaTest {
         .generationDateFrom(FROM)
         .generationDateTo(TO)
         .labels(JsonConversionHelper.INSTANCE.serializeToString(LABELS))
+        .alertMatch(MULTI)
         .build();
 
     return repository.save(datasetEntity);
diff --git a/modules/simulator/simulator-dataset/src/test/java/com/silenteight/simulator/dataset/domain/DatasetQueryTest.java b/modules/simulator/simulator-dataset/src/test/java/com/silenteight/simulator/dataset/domain/DatasetQueryTest.java
index 8a4d979..9537274 100644
--- a/modules/simulator/simulator-dataset/src/test/java/com/silenteight/simulator/dataset/domain/DatasetQueryTest.java
+++ b/modules/simulator/simulator-dataset/src/test/java/com/silenteight/simulator/dataset/domain/DatasetQueryTest.java
@@ -134,6 +134,7 @@ class DatasetQueryTest extends BaseDataJpaTest {
         .state(state)
         .generationDateFrom(FROM)
         .generationDateTo(TO)
+        .alertMatch(AlertMatch.MULTI)
         .labels(JsonConversionHelper.INSTANCE.serializeToString(LABELS))
         .build();
   }
diff --git a/modules/simulator/simulator-dataset/src/test/java/com/silenteight/simulator/dataset/fixture/DatasetFixtures.java b/modules/simulator/simulator-dataset/src/test/java/com/silenteight/simulator/dataset/fixture/DatasetFixtures.java
index 2a4b811..f12b7b8 100644
--- a/modules/simulator/simulator-dataset/src/test/java/com/silenteight/simulator/dataset/fixture/DatasetFixtures.java
+++ b/modules/simulator/simulator-dataset/src/test/java/com/silenteight/simulator/dataset/fixture/DatasetFixtures.java
@@ -22,7 +22,9 @@ import java.util.List;
 import java.util.Map;
 import java.util.UUID;
 
+import static com.silenteight.adjudication.api.v1.FilteredAlerts.MatchQuantity.ALL;
 import static com.silenteight.protocol.utils.MoreTimestamps.toTimestamp;
+import static com.silenteight.simulator.dataset.domain.AlertMatch.MULTI;
 import static com.silenteight.simulator.dataset.domain.DatasetState.ACTIVE;
 import static java.time.ZoneOffset.UTC;
 import static java.util.UUID.fromString;
@@ -58,11 +60,9 @@ public final class DatasetFixtures {
   public static final String ARCHIVED_BY = "jdoe";
   public static final String COUNTRY_LABEL = "country";
   public static final List<String> COUNTRIES = List.of("PL", "RU", "DE");
-  private static final String MATCH_QUANTITY_LABEL = "matchQuantity";
   private static final List<String> MATCH_QUANTITIES = List.of("single");
-  public static final List<DatasetLabel> LABELS = List.of(
-      new DatasetLabel(COUNTRY_LABEL, COUNTRIES),
-      new DatasetLabel(MATCH_QUANTITY_LABEL, MATCH_QUANTITIES));
+  public static final List<DatasetLabel> LABELS =
+      List.of(new DatasetLabel(COUNTRY_LABEL, COUNTRIES));
 
   public static final CreateDatasetRequestDto CREATE_DATASET_REQUEST_DTO = createDatasetRequestDto()
       .build();
@@ -83,6 +83,7 @@ public final class DatasetFixtures {
       .query(selectionCriteria(FROM, TO, COUNTRIES))
       .createdAt(CREATED_AT)
       .createdBy(CREATED_BY)
+      .alertMatch(MULTI)
       .build();
 
   public static final Dataset DATASET =
@@ -124,15 +125,9 @@ public final class DatasetFixtures {
           .addAllValue(COUNTRIES)
           .build();
 
-  private static final LabelValues MATCH_QUANTITY_LABEL_VALUES =
-      LabelValues.newBuilder()
-          .addAllValue(MATCH_QUANTITIES)
-          .build();
-
   private static final Map<String, LabelValues> LABELS_MAP =
       Map.of(
-          COUNTRY_LABEL, COUNTRY_LABEL_VALUES,
-          MATCH_QUANTITY_LABEL, MATCH_QUANTITY_LABEL_VALUES);
+          COUNTRY_LABEL, COUNTRY_LABEL_VALUES);
 
   private static final LabelsFilter LABELS_FILTER =
       LabelsFilter.newBuilder()
@@ -143,6 +138,7 @@ public final class DatasetFixtures {
       FilteredAlerts.newBuilder()
           .setAlertTimeRange(ALERT_TIME_RANGE)
           .setLabelsFilter(LABELS_FILTER)
+          .setMatchQuantity(ALL)
           .build();
 
   public static final ArchiveDatasetRequest ARCHIVE_DATASET_REQUEST =
diff --git a/modules/simulator/simulator-dataset/src/test/java/com/silenteight/simulator/dataset/get/GetDatasetRestControllerTest.java b/modules/simulator/simulator-dataset/src/test/java/com/silenteight/simulator/dataset/get/GetDatasetRestControllerTest.java
index f1d7402..722f7a3 100644
--- a/modules/simulator/simulator-dataset/src/test/java/com/silenteight/simulator/dataset/get/GetDatasetRestControllerTest.java
+++ b/modules/simulator/simulator-dataset/src/test/java/com/silenteight/simulator/dataset/get/GetDatasetRestControllerTest.java
@@ -10,6 +10,7 @@ import org.springframework.boot.test.mock.mockito.MockBean;
 import org.springframework.context.annotation.Import;
 
 import static com.silenteight.simulator.common.testing.rest.TestRoles.*;
+import static com.silenteight.simulator.dataset.domain.AlertMatch.MULTI;
 import static com.silenteight.simulator.dataset.fixture.DatasetFixtures.*;
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.CoreMatchers.notNullValue;
@@ -46,6 +47,7 @@ class GetDatasetRestControllerTest extends BaseRestControllerTest {
         .body("query.alertGenerationDate.to", is(TO_AS_STRING))
         .body("query.displayRangeFrom", is(DISPLAY_RANGE_FROM))
         .body("query.displayRangeTo", is(DISPLAY_RANGE_TO))
+        .body("alertMatch", is(MULTI.name()))
         .body("createdAt", notNullValue())
         .body("createdBy", is(CREATED_BY));
   }
diff --git a/modules/simulator/simulator-dataset/src/test/java/com/silenteight/simulator/dataset/grpc/create/GrpcCreateDatasetServiceTest.java b/modules/simulator/simulator-dataset/src/test/java/com/silenteight/simulator/dataset/grpc/create/GrpcCreateDatasetServiceTest.java
index d8b38d9..a47cabd 100644
--- a/modules/simulator/simulator-dataset/src/test/java/com/silenteight/simulator/dataset/grpc/create/GrpcCreateDatasetServiceTest.java
+++ b/modules/simulator/simulator-dataset/src/test/java/com/silenteight/simulator/dataset/grpc/create/GrpcCreateDatasetServiceTest.java
@@ -3,13 +3,21 @@ package com.silenteight.simulator.dataset.grpc.create;
 import com.silenteight.adjudication.api.v1.CreateDatasetRequest;
 import com.silenteight.adjudication.api.v1.Dataset;
 import com.silenteight.adjudication.api.v1.DatasetServiceGrpc.DatasetServiceBlockingStub;
+import com.silenteight.adjudication.api.v1.FilteredAlerts;
+import com.silenteight.adjudication.api.v1.FilteredAlerts.MatchQuantity;
 
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
+import org.junit.jupiter.params.ParameterizedTest;
+import org.junit.jupiter.params.provider.Arguments;
+import org.junit.jupiter.params.provider.MethodSource;
+import org.mockito.ArgumentCaptor;
 import org.mockito.InjectMocks;
 import org.mockito.Mock;
 import org.mockito.junit.jupiter.MockitoExtension;
 
+import java.util.stream.Stream;
+
 import static com.silenteight.simulator.dataset.fixture.DatasetFixtures.*;
 import static org.assertj.core.api.Assertions.*;
 import static org.mockito.Mockito.*;
@@ -29,20 +37,40 @@ class GrpcCreateDatasetServiceTest {
     when(datasetStub.createDataset(makeGrpcRequest())).thenReturn(DATASET);
 
     // when
-    Dataset dataset = underTest.createDataset(makeDomainRequest());
+    Dataset dataset = underTest.createDataset(makeDomainRequest(true));
 
     // then
     assertThat(dataset.getName()).isEqualTo(EXTERNAL_RESOURCE_NAME);
     assertThat(dataset.getAlertCount()).isEqualTo(ALERTS_COUNT);
   }
 
+  @ParameterizedTest
+  @MethodSource("provideDomainRequests")
+  void shouldMakeGrpcRequest(
+      com.silenteight.simulator.dataset.create.CreateDatasetRequest createDatasetRequest,
+      MatchQuantity expectedMatchQuantity) {
+
+    //when
+    underTest.createDataset(createDatasetRequest);
+
+    //then
+    var logCaptor = ArgumentCaptor.forClass(CreateDatasetRequest.class);
+
+    verify(datasetStub, times(1)).createDataset(logCaptor.capture());
+    CreateDatasetRequest value = logCaptor.getValue();
+    FilteredAlerts filteredAlerts = value.getFilteredAlerts();
+    MatchQuantity matchQuantity = filteredAlerts.getMatchQuantity();
+    assertThat(matchQuantity).isEqualTo(expectedMatchQuantity);
+  }
+
   private static CreateDatasetRequest makeGrpcRequest() {
     return CreateDatasetRequest.newBuilder()
         .setFilteredAlerts(FILTERED_ALERTS)
         .build();
   }
 
-  private static com.silenteight.simulator.dataset.create.CreateDatasetRequest makeDomainRequest() {
+  private static com.silenteight.simulator.dataset.create.CreateDatasetRequest makeDomainRequest(
+      Boolean useMultiHitAlerts) {
     return com.silenteight.simulator.dataset.create.CreateDatasetRequest.builder()
         .id(ID_1)
         .datasetName(DATASET_NAME)
@@ -51,6 +79,13 @@ class GrpcCreateDatasetServiceTest {
         .rangeTo(TO)
         .labels(LABELS)
         .createdBy(CREATED_BY)
+        .useMultiHitAlerts(useMultiHitAlerts)
         .build();
   }
+
+  private static Stream<Arguments> provideDomainRequests() {
+    return Stream.of(
+        Arguments.of(makeDomainRequest(true), MatchQuantity.ALL),
+        Arguments.of(makeDomainRequest(false), MatchQuantity.SINGLE));
+  }
 }
diff --git a/modules/simulator/simulator-dataset/src/test/java/com/silenteight/simulator/dataset/list/ListDatasetRestControllerTest.java b/modules/simulator/simulator-dataset/src/test/java/com/silenteight/simulator/dataset/list/ListDatasetRestControllerTest.java
index 66da1fa..fcc908c 100644
--- a/modules/simulator/simulator-dataset/src/test/java/com/silenteight/simulator/dataset/list/ListDatasetRestControllerTest.java
+++ b/modules/simulator/simulator-dataset/src/test/java/com/silenteight/simulator/dataset/list/ListDatasetRestControllerTest.java
@@ -13,6 +13,7 @@ import java.util.List;
 import java.util.Set;
 
 import static com.silenteight.simulator.common.testing.rest.TestRoles.*;
+import static com.silenteight.simulator.dataset.domain.AlertMatch.MULTI;
 import static com.silenteight.simulator.dataset.domain.DatasetState.ACTIVE;
 import static com.silenteight.simulator.dataset.domain.DatasetState.ARCHIVED;
 import static com.silenteight.simulator.dataset.fixture.DatasetFixtures.*;
@@ -48,6 +49,7 @@ class ListDatasetRestControllerTest extends BaseRestControllerTest {
         .body("[0].query.alertGenerationDate.to", is(TO_AS_STRING))
         .body("[0].query.displayRangeFrom", is(DISPLAY_RANGE_FROM))
         .body("[0].query.displayRangeTo", is(DISPLAY_RANGE_TO))
+        .body("[0].alertMatch", is(MULTI.name()))
         .body("[0].createdAt", notNullValue())
         .body("[0].createdBy", is(CREATED_BY));
   }
@@ -65,6 +67,7 @@ class ListDatasetRestControllerTest extends BaseRestControllerTest {
         .body("[0].state", is(STATE.toString()))
         .body("[0].alertsCount", is((int) ALERTS_COUNT))
         .body("[0].query", notNullValue())
+        .body("[0].alertMatch", is(MULTI.name()))
         .body("[0].createdAt", notNullValue())
         .body("[0].createdBy", is(CREATED_BY));
   }
diff --git a/modules/simulator/simulator-db-changelog/src/main/resources/db/changelog/db.changelog-simulator-1.5.0.xml b/modules/simulator/simulator-db-changelog/src/main/resources/db/changelog/db.changelog-simulator-1.5.0.xml
index a178f60..f604f0b 100644
--- a/modules/simulator/simulator-db-changelog/src/main/resources/db/changelog/db.changelog-simulator-1.5.0.xml
+++ b/modules/simulator/simulator-db-changelog/src/main/resources/db/changelog/db.changelog-simulator-1.5.0.xml
@@ -25,4 +25,10 @@
       </column>
     </addColumn>
   </changeSet>
+  <changeSet id="simulator-1.5.0-3" author="rpajdak">
+    <addColumn tableName="simulator_dataset">
+      <column name="alert_match" type="VARCHAR(24)" defaultValue="SINGLE">
+      </column>
+    </addColumn>
+  </changeSet>
 </databaseChangeLog>
diff --git a/modules/simulator/simulator-documentation/src/api/dataset/openapi.yaml b/modules/simulator/simulator-documentation/src/api/dataset/openapi.yaml
index 5c331c6..14642b5 100644
--- a/modules/simulator/simulator-documentation/src/api/dataset/openapi.yaml
+++ b/modules/simulator/simulator-documentation/src/api/dataset/openapi.yaml
@@ -40,6 +40,19 @@ paths:
   /datasetets/{datasetId}:
     get:
       description: Dataset with specific id
+      parameters:
+        - in: query
+          name: id
+          required: true
+          description: 'Dataset id'
+      responses:
+        200:
+          description: Dataset details
+          content:
+            application/json:
+              schema:
+                type: object
+                $ref: '#/components/schemas/Dataset'
 
   /datasets/{id}:archive:
     post:
@@ -88,7 +101,6 @@ components:
         query:
           type: object
           $ref: '#/components/schemas/Query'
-        AlertType:
         alertsCount:
           type: number
         createdAt:
@@ -107,7 +119,8 @@ components:
         alertsCount: 75303
         createdAt: '2004-02-15T15:19:21Z'
         createdBy: 'UserName2'
-
+        alertType: SOLVING
+        alertMatch: SINGLE
 
     CreateDatasetRequest:
       type: object
-- 
2.25.1


From e35004679b7f351ad559275fbf4d732bd3313a2a Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Rafa=C5=82=20Pajdak?= <rpajdak@silenteight.com>
Date: Thu, 5 May 2022 11:58:21 +0000
Subject: [PATCH 04/12] Feature: Switch to new ae-api and wh-api in Simulator
 (WEB-2307) (WEB-2313)
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Closes WEB-2307

Reviewed-by: Kamil Dzięcioł <kdzieciol@silenteight.com>
Reviewed-by: Wojciech Wątroba <wwatroba@silenteight.com>
Merged from: https://gitlab.silenteight.com/sens/simulator/-/merge_requests/168
---
 .../management/grpc/GrpcAnalysisService.java  |  11 +-
 .../grpc/GrpcAnalysisServiceTest.java         |  41 +++-
 .../index/ack/FetchAckMessageUseCase.java     |   2 +-
 .../SimulationDataIndexRequestGateway.java    |   2 +-
 .../amqp/listener/AckMessageFlowAdapter.java  |   2 +-
 .../amqp/listener/AckMessageHandler.java      |   2 +-
 .../index/feed/RecommendationInfoBatch.java   |  34 ++++
 .../feed/RecommendationWithMetaDataBatch.java |  33 ----
 ...RecommendationsGeneratedConfiguration.java |  11 +-
 .../feed/RecommendationsGeneratedUseCase.java | 167 ++++++++--------
 .../alert/index/ack/AckMessageFixtures.java   |   2 +-
 .../RecommendationsGeneratedUseCaseTest.java  | 178 ++++++++++--------
 .../fixtures/RecommendationFixtures.java      |  83 +++++---
 13 files changed, 325 insertions(+), 243 deletions(-)
 create mode 100644 modules/simulator/simulator-processing/src/main/java/com/silenteight/simulator/processing/alert/index/feed/RecommendationInfoBatch.java
 delete mode 100644 modules/simulator/simulator-processing/src/main/java/com/silenteight/simulator/processing/alert/index/feed/RecommendationWithMetaDataBatch.java

diff --git a/modules/simulator/simulator-management/src/main/java/com/silenteight/simulator/management/grpc/GrpcAnalysisService.java b/modules/simulator/simulator-management/src/main/java/com/silenteight/simulator/management/grpc/GrpcAnalysisService.java
index 010643b..81b3954 100644
--- a/modules/simulator/simulator-management/src/main/java/com/silenteight/simulator/management/grpc/GrpcAnalysisService.java
+++ b/modules/simulator/simulator-management/src/main/java/com/silenteight/simulator/management/grpc/GrpcAnalysisService.java
@@ -7,6 +7,7 @@ import lombok.extern.slf4j.Slf4j;
 import com.silenteight.adjudication.api.v1.AddDatasetRequest;
 import com.silenteight.adjudication.api.v1.Analysis;
 import com.silenteight.adjudication.api.v1.Analysis.Feature;
+import com.silenteight.adjudication.api.v1.Analysis.NotificationFlags;
 import com.silenteight.adjudication.api.v1.AnalysisServiceGrpc.AnalysisServiceBlockingStub;
 import com.silenteight.adjudication.api.v1.CreateAnalysisRequest;
 import com.silenteight.adjudication.api.v1.GetAnalysisRequest;
@@ -45,6 +46,7 @@ class GrpcAnalysisService implements AnalysisService {
         .setStrategy(model.getStrategyName())
         .addAllCategories(model.getCategoriesList())
         .addAllFeatures(toFeatures(model.getFeaturesList()))
+        .setNotificationFlags(getNotificationFlags())
         .build();
   }
 
@@ -64,6 +66,13 @@ class GrpcAnalysisService implements AnalysisService {
         .build();
   }
 
+  private static NotificationFlags getNotificationFlags() {
+    return NotificationFlags.newBuilder()
+        .setAttachMetadata(true)
+        .setAttachRecommendation(true)
+        .build();
+  }
+
   @Override
   public void addDatasetToAnalysis(String analysis, String dataset) {
     AddDatasetRequest addDatasetRequest = toAddDatasetRequest(analysis, dataset);
@@ -83,7 +92,7 @@ class GrpcAnalysisService implements AnalysisService {
   public Analysis getAnalysis(String analysisName) {
     GetAnalysisRequest getAnalysisRequest = toGetAnalysisRequest(analysisName);
     log.debug("Getting analysis by name={}", analysisName);
-    Analysis analysis  = analysisStub.getAnalysis(getAnalysisRequest);
+    Analysis analysis = analysisStub.getAnalysis(getAnalysisRequest);
     log.debug("Got analysis by name={}", analysisName);
     return analysis;
   }
diff --git a/modules/simulator/simulator-management/src/test/java/com/silenteight/simulator/management/grpc/GrpcAnalysisServiceTest.java b/modules/simulator/simulator-management/src/test/java/com/silenteight/simulator/management/grpc/GrpcAnalysisServiceTest.java
index 4e45e40..be90823 100644
--- a/modules/simulator/simulator-management/src/test/java/com/silenteight/simulator/management/grpc/GrpcAnalysisServiceTest.java
+++ b/modules/simulator/simulator-management/src/test/java/com/silenteight/simulator/management/grpc/GrpcAnalysisServiceTest.java
@@ -1,18 +1,19 @@
 package com.silenteight.simulator.management.grpc;
 
+import com.silenteight.adjudication.api.v1.AddDatasetRequest;
 import com.silenteight.adjudication.api.v1.Analysis;
 import com.silenteight.adjudication.api.v1.AnalysisServiceGrpc.AnalysisServiceBlockingStub;
+import com.silenteight.adjudication.api.v1.CreateAnalysisRequest;
 import com.silenteight.adjudication.api.v1.GetAnalysisRequest;
 
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
+import org.mockito.ArgumentCaptor;
 import org.mockito.InjectMocks;
 import org.mockito.Mock;
 import org.mockito.junit.jupiter.MockitoExtension;
 
-import static com.silenteight.simulator.management.SimulationFixtures.ANALYSIS_NAME_1;
-import static com.silenteight.simulator.management.SimulationFixtures.ANALYSIS_STATE;
-import static com.silenteight.simulator.management.SimulationFixtures.createAnalysis;
+import static com.silenteight.simulator.management.SimulationFixtures.*;
 import static org.assertj.core.api.Assertions.*;
 import static org.mockito.Mockito.*;
 
@@ -39,6 +40,40 @@ class GrpcAnalysisServiceTest {
     assertThat(analysis.getState()).isEqualTo(ANALYSIS_STATE);
   }
 
+  @Test
+  void shouldCreateRequestToCreateAnalysis() {
+    //given + when
+    underTest.createAnalysis(SOLVING_MODEL);
+
+    //then
+    ArgumentCaptor<CreateAnalysisRequest> createAnalysisRequestArgumentCaptor
+        = ArgumentCaptor.forClass(CreateAnalysisRequest.class);
+
+    verify(analysisStub, timeout(1)).createAnalysis(createAnalysisRequestArgumentCaptor.capture());
+
+    CreateAnalysisRequest createAnalysisRequest = createAnalysisRequestArgumentCaptor.getValue();
+    assertThat(createAnalysisRequest.getAnalysis().getPolicy()).isEqualTo(POLICY_NAME);
+    assertThat(createAnalysisRequest.getAnalysis().getStrategy()).isEqualTo(STRATEGY_NAME);
+    assertThat(createAnalysisRequest.getAnalysis().getCategoriesCount()).isEqualTo(2);
+    assertThat(createAnalysisRequest.getAnalysis().getFeaturesList()).isEmpty();
+  }
+
+  @Test
+  void shouldCreateRequestToAddDataset() {
+    //given + when
+    underTest.addDatasetToAnalysis(ANALYSIS_NAME_1, DATASET_NAME_1);
+
+    //then
+    ArgumentCaptor<AddDatasetRequest> addDatasetRequestArgumentCaptor
+        = ArgumentCaptor.forClass(AddDatasetRequest.class);
+
+    verify(analysisStub, timeout(1)).addDataset(addDatasetRequestArgumentCaptor.capture());
+
+    AddDatasetRequest createAnalysisRequest = addDatasetRequestArgumentCaptor.getValue();
+    assertThat(createAnalysisRequest.getAnalysis()).isEqualTo(ANALYSIS_NAME_1);
+    assertThat(createAnalysisRequest.getDataset()).isEqualTo(DATASET_NAME_1);
+  }
+
   private static GetAnalysisRequest makeGetAnalysisRequest(String analysis) {
     return GetAnalysisRequest.newBuilder()
         .setAnalysis(analysis)
diff --git a/modules/simulator/simulator-processing/src/main/java/com/silenteight/simulator/processing/alert/index/ack/FetchAckMessageUseCase.java b/modules/simulator/simulator-processing/src/main/java/com/silenteight/simulator/processing/alert/index/ack/FetchAckMessageUseCase.java
index cad77cf..8467b8f 100644
--- a/modules/simulator/simulator-processing/src/main/java/com/silenteight/simulator/processing/alert/index/ack/FetchAckMessageUseCase.java
+++ b/modules/simulator/simulator-processing/src/main/java/com/silenteight/simulator/processing/alert/index/ack/FetchAckMessageUseCase.java
@@ -4,7 +4,7 @@ import lombok.NonNull;
 import lombok.RequiredArgsConstructor;
 import lombok.extern.slf4j.Slf4j;
 
-import com.silenteight.data.api.v1.DataIndexResponse;
+import com.silenteight.data.api.v2.DataIndexResponse;
 import com.silenteight.simulator.management.domain.SimulationService;
 import com.silenteight.simulator.processing.alert.index.amqp.listener.AckMessageHandler;
 import com.silenteight.simulator.processing.alert.index.domain.IndexedAlertQuery;
diff --git a/modules/simulator/simulator-processing/src/main/java/com/silenteight/simulator/processing/alert/index/amqp/gateway/SimulationDataIndexRequestGateway.java b/modules/simulator/simulator-processing/src/main/java/com/silenteight/simulator/processing/alert/index/amqp/gateway/SimulationDataIndexRequestGateway.java
index 19b4625..a3e57bc 100644
--- a/modules/simulator/simulator-processing/src/main/java/com/silenteight/simulator/processing/alert/index/amqp/gateway/SimulationDataIndexRequestGateway.java
+++ b/modules/simulator/simulator-processing/src/main/java/com/silenteight/simulator/processing/alert/index/amqp/gateway/SimulationDataIndexRequestGateway.java
@@ -1,6 +1,6 @@
 package com.silenteight.simulator.processing.alert.index.amqp.gateway;
 
-import com.silenteight.data.api.v1.SimulationDataIndexRequest;
+import com.silenteight.data.api.v2.SimulationDataIndexRequest;
 
 public interface SimulationDataIndexRequestGateway {
 
diff --git a/modules/simulator/simulator-processing/src/main/java/com/silenteight/simulator/processing/alert/index/amqp/listener/AckMessageFlowAdapter.java b/modules/simulator/simulator-processing/src/main/java/com/silenteight/simulator/processing/alert/index/amqp/listener/AckMessageFlowAdapter.java
index 4449303..d79ba41 100644
--- a/modules/simulator/simulator-processing/src/main/java/com/silenteight/simulator/processing/alert/index/amqp/listener/AckMessageFlowAdapter.java
+++ b/modules/simulator/simulator-processing/src/main/java/com/silenteight/simulator/processing/alert/index/amqp/listener/AckMessageFlowAdapter.java
@@ -3,7 +3,7 @@ package com.silenteight.simulator.processing.alert.index.amqp.listener;
 import lombok.NonNull;
 import lombok.RequiredArgsConstructor;
 
-import com.silenteight.data.api.v1.DataIndexResponse;
+import com.silenteight.data.api.v2.DataIndexResponse;
 
 import org.springframework.integration.dsl.IntegrationFlowAdapter;
 import org.springframework.integration.dsl.IntegrationFlowDefinition;
diff --git a/modules/simulator/simulator-processing/src/main/java/com/silenteight/simulator/processing/alert/index/amqp/listener/AckMessageHandler.java b/modules/simulator/simulator-processing/src/main/java/com/silenteight/simulator/processing/alert/index/amqp/listener/AckMessageHandler.java
index e80090b..b3162cd 100644
--- a/modules/simulator/simulator-processing/src/main/java/com/silenteight/simulator/processing/alert/index/amqp/listener/AckMessageHandler.java
+++ b/modules/simulator/simulator-processing/src/main/java/com/silenteight/simulator/processing/alert/index/amqp/listener/AckMessageHandler.java
@@ -2,7 +2,7 @@ package com.silenteight.simulator.processing.alert.index.amqp.listener;
 
 import lombok.NonNull;
 
-import com.silenteight.data.api.v1.DataIndexResponse;
+import com.silenteight.data.api.v2.DataIndexResponse;
 
 public interface AckMessageHandler {
 
diff --git a/modules/simulator/simulator-processing/src/main/java/com/silenteight/simulator/processing/alert/index/feed/RecommendationInfoBatch.java b/modules/simulator/simulator-processing/src/main/java/com/silenteight/simulator/processing/alert/index/feed/RecommendationInfoBatch.java
new file mode 100644
index 0000000..a12f8de
--- /dev/null
+++ b/modules/simulator/simulator-processing/src/main/java/com/silenteight/simulator/processing/alert/index/feed/RecommendationInfoBatch.java
@@ -0,0 +1,34 @@
+package com.silenteight.simulator.processing.alert.index.feed;
+
+import com.silenteight.adjudication.api.v1.RecommendationsGenerated.RecommendationInfo;
+
+import java.util.ArrayList;
+import java.util.List;
+
+class RecommendationInfoBatch {
+
+  private final int batchSize;
+
+  private final List<RecommendationInfo> recommendations;
+
+  public RecommendationInfoBatch(int batchSize) {
+    this.batchSize = batchSize;
+    this.recommendations = new ArrayList<>(batchSize);
+  }
+
+  public void addItem(RecommendationInfo recommendationInfo) {
+    recommendations.add(recommendationInfo);
+  }
+
+  public boolean isComplete() {
+    return recommendations.size() >= batchSize;
+  }
+
+  public void clear() {
+    recommendations.clear();
+  }
+
+  public List<RecommendationInfo> getRecommendations() {
+    return recommendations;
+  }
+}
diff --git a/modules/simulator/simulator-processing/src/main/java/com/silenteight/simulator/processing/alert/index/feed/RecommendationWithMetaDataBatch.java b/modules/simulator/simulator-processing/src/main/java/com/silenteight/simulator/processing/alert/index/feed/RecommendationWithMetaDataBatch.java
deleted file mode 100644
index 397cd27..0000000
--- a/modules/simulator/simulator-processing/src/main/java/com/silenteight/simulator/processing/alert/index/feed/RecommendationWithMetaDataBatch.java
+++ /dev/null
@@ -1,33 +0,0 @@
-package com.silenteight.simulator.processing.alert.index.feed;
-
-import com.silenteight.adjudication.api.v2.RecommendationWithMetadata;
-
-import java.util.ArrayList;
-import java.util.List;
-
-class RecommendationWithMetaDataBatch {
-
-  private final int batchSize;
-
-  List<RecommendationWithMetadata> recommendations = new ArrayList<>();
-
-  public RecommendationWithMetaDataBatch(int batchSize) {
-    this.batchSize = batchSize;
-  }
-
-  public void addItem(RecommendationWithMetadata recommendation) {
-    recommendations.add(recommendation);
-  }
-
-  public boolean isComplete() {
-    return recommendations.size() >= batchSize;
-  }
-
-  public void clear() {
-    recommendations.clear();
-  }
-
-  public List<RecommendationWithMetadata> getRecommendations() {
-    return recommendations;
-  }
-}
diff --git a/modules/simulator/simulator-processing/src/main/java/com/silenteight/simulator/processing/alert/index/feed/RecommendationsGeneratedConfiguration.java b/modules/simulator/simulator-processing/src/main/java/com/silenteight/simulator/processing/alert/index/feed/RecommendationsGeneratedConfiguration.java
index 6b37f0a..7242f6a 100644
--- a/modules/simulator/simulator-processing/src/main/java/com/silenteight/simulator/processing/alert/index/feed/RecommendationsGeneratedConfiguration.java
+++ b/modules/simulator/simulator-processing/src/main/java/com/silenteight/simulator/processing/alert/index/feed/RecommendationsGeneratedConfiguration.java
@@ -1,7 +1,5 @@
 package com.silenteight.simulator.processing.alert.index.feed;
 
-import com.silenteight.simulator.management.create.AnalysisService;
-import com.silenteight.simulator.management.domain.SimulationService;
 import com.silenteight.simulator.processing.alert.index.amqp.gateway.SimulationDataIndexRequestGateway;
 import com.silenteight.simulator.processing.alert.index.domain.IndexedAlertService;
 
@@ -15,15 +13,14 @@ class RecommendationsGeneratedConfiguration {
 
   @Bean
   RecommendationsGeneratedUseCase recommendationsGeneratedUseCase(
-      SimulationService simulationService,
-      RecommendationService recommendationService,
       IndexedAlertService indexedAlertService,
-      AnalysisService analysisService,
       SimulationDataIndexRequestGateway simulationDataIndexRequestGateway,
       ProcessingFeedProperties properties) {
 
     return new RecommendationsGeneratedUseCase(
-        simulationService, recommendationService, indexedAlertService, new RequestIdGenerator(),
-        analysisService, simulationDataIndexRequestGateway, properties.getBatchSize());
+        indexedAlertService,
+        new RequestIdGenerator(),
+        simulationDataIndexRequestGateway,
+        properties.getBatchSize());
   }
 }
diff --git a/modules/simulator/simulator-processing/src/main/java/com/silenteight/simulator/processing/alert/index/feed/RecommendationsGeneratedUseCase.java b/modules/simulator/simulator-processing/src/main/java/com/silenteight/simulator/processing/alert/index/feed/RecommendationsGeneratedUseCase.java
index 96751c2..61e42c0 100644
--- a/modules/simulator/simulator-processing/src/main/java/com/silenteight/simulator/processing/alert/index/feed/RecommendationsGeneratedUseCase.java
+++ b/modules/simulator/simulator-processing/src/main/java/com/silenteight/simulator/processing/alert/index/feed/RecommendationsGeneratedUseCase.java
@@ -6,13 +6,13 @@ import lombok.extern.slf4j.Slf4j;
 
 import com.silenteight.adjudication.api.v1.Recommendation;
 import com.silenteight.adjudication.api.v1.RecommendationsGenerated;
+import com.silenteight.adjudication.api.v1.RecommendationsGenerated.RecommendationInfo;
+import com.silenteight.adjudication.api.v2.RecommendationMetadata;
 import com.silenteight.adjudication.api.v2.RecommendationMetadata.FeatureMetadata;
 import com.silenteight.adjudication.api.v2.RecommendationMetadata.MatchMetadata;
-import com.silenteight.adjudication.api.v2.RecommendationWithMetadata;
-import com.silenteight.data.api.v1.Alert;
-import com.silenteight.data.api.v1.SimulationDataIndexRequest;
-import com.silenteight.simulator.management.create.AnalysisService;
-import com.silenteight.simulator.management.domain.SimulationService;
+import com.silenteight.data.api.v2.SimulationAlert;
+import com.silenteight.data.api.v2.SimulationDataIndexRequest;
+import com.silenteight.data.api.v2.SimulationMatch;
 import com.silenteight.simulator.processing.alert.index.amqp.gateway.SimulationDataIndexRequestGateway;
 import com.silenteight.simulator.processing.alert.index.amqp.listener.RecommendationsGeneratedMessageHandler;
 import com.silenteight.simulator.processing.alert.index.domain.IndexedAlertService;
@@ -22,10 +22,12 @@ import com.google.protobuf.Timestamp;
 import com.google.protobuf.Value;
 import org.jetbrains.annotations.NotNull;
 
-import java.time.Instant;
-import java.util.*;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
 
-import static com.silenteight.adjudication.api.v1.Analysis.State.DONE;
+import static java.time.Instant.ofEpochSecond;
 import static java.util.stream.Collectors.toList;
 
 @Slf4j
@@ -44,101 +46,68 @@ class RecommendationsGeneratedUseCase implements RecommendationsGeneratedMessage
   private static final String FEATURE_REASON_FIELD_POSTFIX = ":reason";
   private static final String CATEGORY_FIELD_POSTFIX = ":value";
 
-  @NonNull
-  private final SimulationService simulationService;
-  @NonNull
-  private final RecommendationService recommendationService;
   @NonNull
   private final IndexedAlertService indexedAlertService;
   @NonNull
   private final RequestIdGenerator requestIdGenerator;
   @NonNull
-  private final AnalysisService analysisService;
-  @NonNull
   private final SimulationDataIndexRequestGateway simulationDataIndexRequestGateway;
   @NonNull
   private Integer batchSize;
 
   @Override
   public void handle(RecommendationsGenerated request) {
-    if (!simulationExists(request.getAnalysis())) {
-      log.debug("Analysis is not a simulation: analysis=" + request.getAnalysis());
-      return;
-    }
-    if (!isAnalysisDone(request.getAnalysis())) {
-      log.debug("Analysis {} is not finished yet.", request.getAnalysis());
-      return;
-    }
+    log.info("RecommendationsGenerated request received, analysisName={}", request.getAnalysis());
+    List<RecommendationInfo> recommendationInfosList =
+        request.getRecommendationInfosList();
 
-    try {
-      simulationService.streaming(request.getAnalysis());
-    } catch (RuntimeException e) {
-      log.warn("The analysis is not in the RUNNING state. "
-                   + "The other message could already trigger streaming.");
-      return;
-    }
-
-    sendAsBatches(
-        recommendationService.streamRecommendationsWithMetadata(request.getAnalysis()),
-        request.getAnalysis());
+    sendAsBatches(recommendationInfosList.stream().iterator(), request.getAnalysis());
+    log.debug("RecommendationsGenerated request processed, analysisName={}", request.getAnalysis());
   }
 
-  private boolean simulationExists(String analysisName) {
-    return simulationService.exists(analysisName);
-  }
+  private void sendAsBatches(
+      Iterator<RecommendationInfo> iterator, String analysisName) {
 
-  private boolean isAnalysisDone(String analysis) {
-    return DONE == analysisService.getAnalysis(analysis).getState();
-  }
+    RecommendationInfoBatch recommendationInfoBatch = getRecommendationWithMetaDataBatch();
 
-  private void sendAsBatches(
-      Iterator<RecommendationWithMetadata> iterator,
-      String analysisName) {
-
-    RecommendationWithMetaDataBatch recommendationWithMetaDataBatch
-        = getRecommendationWithMetaDataBatch();
-    iterator.forEachRemaining(recommendationWithMetadata -> {
-      if (!recommendationWithMetaDataBatch.isComplete())
-        recommendationWithMetaDataBatch.addItem(recommendationWithMetadata);
-      if (recommendationWithMetaDataBatch.isComplete() || !iterator.hasNext()) {
-        sendToFeed(analysisName, recommendationWithMetaDataBatch.getRecommendations());
-        recommendationWithMetaDataBatch.clear();
+    iterator.forEachRemaining(recommendationInfo -> {
+      if (!recommendationInfoBatch.isComplete())
+        recommendationInfoBatch.addItem(recommendationInfo);
+      if (recommendationInfoBatch.isComplete() || !iterator.hasNext()) {
+        sendToFeed(analysisName, recommendationInfoBatch.getRecommendations());
+        recommendationInfoBatch.clear();
       }
     });
   }
 
-  private void sendToFeed(
-      String analysisName,
-      List<RecommendationWithMetadata> recommendationsWithMetadata) {
-
+  private void sendToFeed(String analysisName, List<RecommendationInfo> recommendationInfoList) {
     String requestId = requestIdGenerator.generate();
-    log.debug("Recommendations generated: "
-        + " analysisName=" + analysisName
-        + " requestId=" + requestId
-        + " count=" + recommendationsWithMetadata.size());
+
+    log.info("Recommendations generated: analysisName={} requestId={} count={}",
+        analysisName, requestId, recommendationInfoList.size());
 
     SimulationDataIndexRequest indexRequest
-        = toIndexRequest(requestId, analysisName, recommendationsWithMetadata);
-    indexedAlertService.saveAsSent(
-        requestId, analysisName, recommendationsWithMetadata.size());
-    log.debug("Sending recommendations to feed: requestId=" + requestId);
+        = toIndexRequest(requestId, analysisName, recommendationInfoList);
+
+    indexedAlertService.saveAsSent(requestId, analysisName, recommendationInfoList.size());
 
+    log.debug("Sending recommendations to feed: requestId={}.", requestId);
     simulationDataIndexRequestGateway.send(indexRequest);
   }
 
   private static SimulationDataIndexRequest toIndexRequest(
       String requestId, String analysisName,
-      List<RecommendationWithMetadata> recommendationsWithMetadata) {
+      List<RecommendationInfo> recommendationInfo) {
 
     return SimulationDataIndexRequest.newBuilder()
         .setRequestId(requestId)
         .setAnalysisName(analysisName)
-        .addAllAlerts(toAlertsToIndex(recommendationsWithMetadata))
+        .addAllAlerts(toAlertsToIndex(recommendationInfo))
         .build();
   }
 
-  private static Collection<Alert> toAlertsToIndex(
-      List<RecommendationWithMetadata> recommendationsWithMetadata) {
+  private static List<SimulationAlert> toAlertsToIndex(
+      List<RecommendationInfo> recommendationsWithMetadata) {
 
     return recommendationsWithMetadata
         .stream()
@@ -146,47 +115,60 @@ class RecommendationsGeneratedUseCase implements RecommendationsGeneratedMessage
         .collect(toList());
   }
 
-  private static Alert toAlertToIndex(RecommendationWithMetadata recommendationWithMetadata) {
-    String alertName = recommendationWithMetadata.getRecommendation().getAlert();
-
-    return Alert.newBuilder()
-        .setDiscriminator(alertName)
+  private static SimulationAlert toAlertToIndex(RecommendationInfo recommendationInfo) {
+    String alertName = recommendationInfo.getAlert();
+    return SimulationAlert.newBuilder()
         .setName(alertName)
-        .setPayload(toStruct(recommendationWithMetadata))
+        .setPayload(toAlertStruct(recommendationInfo))
+        .addAllMatches(toMatchesToIndex(recommendationInfo.getMetadata()))
         .build();
   }
 
-  private static Struct toStruct(RecommendationWithMetadata recommendationWithMetadata) {
+  private static Struct toAlertStruct(RecommendationInfo recommendationInfo) {
     return Struct.newBuilder()
-        .putAllFields(toFields(recommendationWithMetadata))
+        .putAllFields(toAlertField(recommendationInfo))
         .build();
   }
 
-  private static Map<String, Value> toFields(
-      RecommendationWithMetadata recommendationWithMetadata) {
+  private static List<SimulationMatch> toMatchesToIndex(
+      RecommendationMetadata recommendationMetadata) {
 
-    Recommendation recommendation = recommendationWithMetadata.getRecommendation();
+    return recommendationMetadata.getMatchesList().stream()
+        .map(RecommendationsGeneratedUseCase::toMatchToIndex)
+        .collect(toList());
+  }
+
+  private static SimulationMatch toMatchToIndex(MatchMetadata matchMetadata) {
+    return SimulationMatch.newBuilder()
+        .setName(matchMetadata.getMatch())
+        .setPayload(toMatchStruct(matchMetadata))
+        .build();
+  }
+
+  private static Struct toMatchStruct(MatchMetadata matchMetadata) {
+    return Struct.newBuilder()
+        .putAllFields(toMatchFields(matchMetadata))
+        .build();
+  }
+
+  private static Map<String, Value> toAlertField(RecommendationInfo recommendationInfo) {
+    Recommendation recommendation = recommendationInfo.getValue();
     Map<String, Value> fields = new HashMap<>();
     fields.put(RECOMMENDATION_ALERT_FIELD, toValue(recommendation.getAlert()));
-    fields.put(RECOMMENDATION_CREATE_TIME_FIELD,
-               toValue(toIsoString(recommendation.getCreateTime())));
-    fields.put(RECOMMENDATION_RECOMMENDED_ACTION_FIELD,
+    fields.put(
+        RECOMMENDATION_CREATE_TIME_FIELD,
+        toValue(toIsoString(recommendation.getCreateTime())));
+    fields.put(
+        RECOMMENDATION_RECOMMENDED_ACTION_FIELD,
         toValue(recommendation.getRecommendedAction()));
     fields.put(RECOMMENDATION_COMMENT_FIELD, toValue(recommendation.getRecommendationComment()));
 
-    recommendationWithMetadata
-        .getMetadata()
-        .getMatchesList()
-        .stream()
-        .findFirst()
-        .ifPresent(matchMetadata -> fields.putAll(toMatchFields(matchMetadata)));
-
     return fields;
   }
 
   @NotNull
   private static String toIsoString(Timestamp timestamp) {
-    return Instant.ofEpochSecond(timestamp.getSeconds(), timestamp.getNanos()).toString();
+    return ofEpochSecond(timestamp.getSeconds(), timestamp.getNanos()).toString();
   }
 
   private static Map<String, Value> toMatchFields(MatchMetadata matchMetadata) {
@@ -210,7 +192,8 @@ class RecommendationsGeneratedUseCase implements RecommendationsGeneratedMessage
     Map<String, Value> fields = new HashMap<>();
     fields.put(key + FEATURE_CONFIG_FIELD_POSTFIX, toValue(featureMetadata.getAgentConfig()));
     fields.put(key + FEATURE_SOLUTION_FIELD_POSTFIX, toValue(featureMetadata.getSolution()));
-    fields.put(key + FEATURE_REASON_FIELD_POSTFIX,
+    fields.put(
+        key + FEATURE_REASON_FIELD_POSTFIX,
         toValue(featureMetadata.getReason().toString()));
 
     return fields;
@@ -222,7 +205,7 @@ class RecommendationsGeneratedUseCase implements RecommendationsGeneratedMessage
         .build();
   }
 
-  private RecommendationWithMetaDataBatch getRecommendationWithMetaDataBatch() {
-    return new RecommendationWithMetaDataBatch(batchSize);
+  private RecommendationInfoBatch getRecommendationWithMetaDataBatch() {
+    return new RecommendationInfoBatch(batchSize);
   }
 }
diff --git a/modules/simulator/simulator-processing/src/test/java/com/silenteight/simulator/processing/alert/index/ack/AckMessageFixtures.java b/modules/simulator/simulator-processing/src/test/java/com/silenteight/simulator/processing/alert/index/ack/AckMessageFixtures.java
index 179dfdb..b74a4ff 100644
--- a/modules/simulator/simulator-processing/src/test/java/com/silenteight/simulator/processing/alert/index/ack/AckMessageFixtures.java
+++ b/modules/simulator/simulator-processing/src/test/java/com/silenteight/simulator/processing/alert/index/ack/AckMessageFixtures.java
@@ -4,7 +4,7 @@ import lombok.AccessLevel;
 import lombok.NoArgsConstructor;
 
 import com.silenteight.adjudication.api.v1.Analysis;
-import com.silenteight.data.api.v1.DataIndexResponse;
+import com.silenteight.data.api.v2.DataIndexResponse;
 import com.silenteight.simulator.management.details.dto.SimulationDetailsDto;
 import com.silenteight.simulator.management.domain.SimulationState;
 
diff --git a/modules/simulator/simulator-processing/src/test/java/com/silenteight/simulator/processing/alert/index/feed/RecommendationsGeneratedUseCaseTest.java b/modules/simulator/simulator-processing/src/test/java/com/silenteight/simulator/processing/alert/index/feed/RecommendationsGeneratedUseCaseTest.java
index bb561bc..18f4c8c 100644
--- a/modules/simulator/simulator-processing/src/test/java/com/silenteight/simulator/processing/alert/index/feed/RecommendationsGeneratedUseCaseTest.java
+++ b/modules/simulator/simulator-processing/src/test/java/com/silenteight/simulator/processing/alert/index/feed/RecommendationsGeneratedUseCaseTest.java
@@ -1,14 +1,12 @@
 package com.silenteight.simulator.processing.alert.index.feed;
 
-import com.silenteight.adjudication.api.v1.Analysis;
-import com.silenteight.adjudication.api.v2.RecommendationWithMetadata;
-import com.silenteight.data.api.v1.SimulationDataIndexRequest;
-import com.silenteight.simulator.management.create.AnalysisService;
-import com.silenteight.simulator.management.domain.SimulationService;
-import com.silenteight.simulator.management.domain.exception.SimulationNotInProperStateException;
+import com.silenteight.data.api.v2.SimulationAlert;
+import com.silenteight.data.api.v2.SimulationDataIndexRequest;
+import com.silenteight.data.api.v2.SimulationMatch;
 import com.silenteight.simulator.processing.alert.index.amqp.gateway.SimulationDataIndexRequestGateway;
 import com.silenteight.simulator.processing.alert.index.domain.IndexedAlertService;
 
+import com.google.protobuf.Value;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
@@ -16,10 +14,9 @@ import org.mockito.ArgumentCaptor;
 import org.mockito.Mock;
 import org.mockito.junit.jupiter.MockitoExtension;
 
-import java.util.Stack;
+import java.util.List;
+import java.util.Map;
 
-import static com.silenteight.adjudication.api.v1.Analysis.State.DONE;
-import static com.silenteight.adjudication.api.v1.Analysis.State.RUNNING;
 import static com.silenteight.simulator.processing.alert.index.fixtures.RecommendationFixtures.*;
 import static org.assertj.core.api.Assertions.*;
 import static org.mockito.Mockito.*;
@@ -31,110 +28,141 @@ class RecommendationsGeneratedUseCaseTest {
 
   private RecommendationsGeneratedUseCase underTest;
   @Mock
-  private SimulationService simulationService;
-  @Mock
-  private RecommendationService recommendationService;
-  @Mock
   private IndexedAlertService indexedAlertService;
   @Mock
   private RequestIdGenerator requestIdGenerator;
   @Mock
-  private AnalysisService analysisService;
-  @Mock
   private SimulationDataIndexRequestGateway gateway;
 
   @BeforeEach
   void setUp() {
     underTest = new RecommendationsGeneratedUseCase(
-        simulationService, recommendationService, indexedAlertService,
-        requestIdGenerator, analysisService, gateway, BATCH_SIZE);
+        indexedAlertService, requestIdGenerator, gateway, BATCH_SIZE);
   }
 
   @Test
-  void shouldHandleMessageWhenSimulationExistsAndRunning() {
+  void shouldHandleMessageWithMultipleAlerts() {
     // given
-    Analysis analysis = mock(Analysis.class);
-    when(analysis.getState()).thenReturn(RUNNING);
-    Stack<RecommendationWithMetadata> recommendations = new Stack<>();
-    recommendations.add(RECOMMENDATION_WITH_METADATA);
-    when(simulationService.exists(ANALYSIS_NAME)).thenReturn(true);
-    when(analysisService.getAnalysis(ANALYSIS_NAME)).thenReturn(analysis);
+    when(requestIdGenerator.generate()).thenReturn(REQUEST_ID);
 
     // when
-    underTest.handle(REQUEST);
-    //then
-    verify(analysisService.getAnalysis(ANALYSIS_NAME)).getState();
-    verifyNoInteractions(recommendationService);
-    verifyNoInteractions(indexedAlertService);
-  }
+    underTest.handle(MULTIPLE_ALERTS_REQUEST);
 
-  @Test
-  void shouldHandleMessageWhenSimulationAlreadyStreaming() {
-    // given
-    Analysis analysis = mock(Analysis.class);
-    when(analysis.getState()).thenReturn(DONE);
-    when(analysisService.getAnalysis(ANALYSIS_NAME)).thenReturn(analysis);
-    when(simulationService.exists(ANALYSIS_NAME)).thenReturn(true);
-    doThrow(new SimulationNotInProperStateException())
-        .when(simulationService).streaming(ANALYSIS_NAME);
+    // then
+    ArgumentCaptor<String> requestId = ArgumentCaptor.forClass(String.class);
+    ArgumentCaptor<String> analysisName = ArgumentCaptor.forClass(String.class);
+    ArgumentCaptor<Long> alertCount = ArgumentCaptor.forClass(Long.class);
 
-    // when
-    underTest.handle(REQUEST);
+    verify(indexedAlertService, times(2)).saveAsSent(
+        requestId.capture(), analysisName.capture(), alertCount.capture());
 
-    // then
-    verifyNoInteractions(recommendationService);
-    verifyNoInteractions(indexedAlertService);
+    assertThat(requestId.getAllValues().get(0)).isEqualTo(REQUEST_ID);
+    assertThat(analysisName.getAllValues().get(0)).isEqualTo(ANALYSIS_NAME);
+    assertThat(alertCount.getAllValues().get(0)).isEqualTo(BATCH_SIZE);
+    assertThat(requestId.getAllValues().get(1)).isEqualTo(REQUEST_ID);
+    assertThat(analysisName.getAllValues().get(1)).isEqualTo(ANALYSIS_NAME);
+    assertThat(alertCount.getAllValues().get(1)).isEqualTo(BATCH_SIZE);
+    ArgumentCaptor<SimulationDataIndexRequest> indexRequest
+        = ArgumentCaptor.forClass(SimulationDataIndexRequest.class);
+
+    verify(gateway, times(2)).send(indexRequest.capture());
+    assertThat(indexRequest.getAllValues().get(0).getRequestId()).isEqualTo(REQUEST_ID);
+    assertThat(indexRequest.getAllValues().get(0).getAnalysisName()).isEqualTo(ANALYSIS_NAME);
+    assertThat(indexRequest.getAllValues().get(0).getAlertsCount()).isEqualTo(BATCH_SIZE);
+    assertThat(indexRequest.getAllValues().get(1).getRequestId()).isEqualTo(REQUEST_ID);
+    assertThat(indexRequest.getAllValues().get(1).getAnalysisName()).isEqualTo(ANALYSIS_NAME);
+    assertThat(indexRequest.getAllValues().get(1).getAlertsCount()).isEqualTo(BATCH_SIZE);
   }
 
   @Test
-  void shouldHandleMessageWhenSimulationDoesNotExist() {
+  void shouldHandleMessageWithSingleAlert() {
     // given
-    when(simulationService.exists(ANALYSIS_NAME)).thenReturn(false);
+    when(requestIdGenerator.generate()).thenReturn(REQUEST_ID);
 
     // when
     underTest.handle(REQUEST);
 
     // then
-    verifyNoInteractions(recommendationService);
-    verifyNoInteractions(indexedAlertService);
+    ArgumentCaptor<String> requestId = ArgumentCaptor.forClass(String.class);
+    ArgumentCaptor<String> analysisName = ArgumentCaptor.forClass(String.class);
+    ArgumentCaptor<Long> alertCount = ArgumentCaptor.forClass(Long.class);
+
+    verify(indexedAlertService, times(1)).saveAsSent(
+        requestId.capture(), analysisName.capture(), alertCount.capture());
+    assertThat(requestId.getAllValues().get(0)).isEqualTo(REQUEST_ID);
+    assertThat(analysisName.getAllValues().get(0)).isEqualTo(ANALYSIS_NAME);
+    assertThat(alertCount.getAllValues().get(0)).isEqualTo(1);
+    ArgumentCaptor<SimulationDataIndexRequest> indexRequest
+        = ArgumentCaptor.forClass(SimulationDataIndexRequest.class);
+
+    verify(gateway, times(1)).send(indexRequest.capture());
+    SimulationDataIndexRequest simulationDataIndexRequest = indexRequest.getAllValues().get(0);
+
+    assertThat(simulationDataIndexRequest.getAnalysisName()).isEqualTo(ANALYSIS_NAME);
+    assertThat(simulationDataIndexRequest.getAlertsList()).hasSize(1);
+    assertThat(simulationDataIndexRequest.getRequestId()).isEqualTo(REQUEST_ID);
   }
 
   @Test
-  void shouldHandleMessageWithMultipleAlertsWhenSimulationDone() {
-    // given
-    Analysis analysis = mock(Analysis.class);
-    when(analysis.getState()).thenReturn(DONE);
-    Stack<RecommendationWithMetadata> recommendations = new Stack<>();
-    recommendations.addAll(RECOMMENDATION_WITH_METADATA_LIST);
-    when(simulationService.exists(ANALYSIS_NAME)).thenReturn(true);
+  void shouldHandleRequestWithMultiHitAlert() {
+    //given
     when(requestIdGenerator.generate()).thenReturn(REQUEST_ID);
-    when(analysisService.getAnalysis(ANALYSIS_NAME)).thenReturn(analysis);
-    when(recommendationService.streamRecommendationsWithMetadata(ANALYSIS_NAME))
-        .thenReturn(new RecommendationWithMetaDataIterator(recommendations));
-    // when
-    underTest.handle(MULTIPLE_ALERTS_REQUEST);
-    // then
+
+    //when
+    underTest.handle(REQUEST_WITH_MULTI_HIT_ALERT);
+
+    //then
     ArgumentCaptor<String> requestId = ArgumentCaptor.forClass(String.class);
     ArgumentCaptor<String> analysisName = ArgumentCaptor.forClass(String.class);
     ArgumentCaptor<Long> alertCount = ArgumentCaptor.forClass(Long.class);
-    verify(recommendationService, times(1))
-        .streamRecommendationsWithMetadata(ANALYSIS_NAME);
-    verify(indexedAlertService, times(2)).saveAsSent(
+
+    verify(indexedAlertService, times(1)).saveAsSent(
         requestId.capture(), analysisName.capture(), alertCount.capture());
     assertThat(requestId.getAllValues().get(0)).isEqualTo(REQUEST_ID);
     assertThat(analysisName.getAllValues().get(0)).isEqualTo(ANALYSIS_NAME);
-    assertThat(alertCount.getAllValues().get(0)).isEqualTo(BATCH_SIZE);
-    assertThat(requestId.getAllValues().get(1)).isEqualTo(REQUEST_ID);
-    assertThat(analysisName.getAllValues().get(1)).isEqualTo(ANALYSIS_NAME);
-    assertThat(alertCount.getAllValues().get(1)).isEqualTo(BATCH_SIZE);
+    assertThat(alertCount.getAllValues().get(0)).isEqualTo(1);
     ArgumentCaptor<SimulationDataIndexRequest> indexRequest
         = ArgumentCaptor.forClass(SimulationDataIndexRequest.class);
-    verify(gateway, times(2)).send(indexRequest.capture());
-    assertThat(indexRequest.getAllValues().get(0).getRequestId()).isEqualTo(REQUEST_ID);
-    assertThat(indexRequest.getAllValues().get(0).getAnalysisName()).isEqualTo(ANALYSIS_NAME);
-    assertThat(indexRequest.getAllValues().get(0).getAlertsCount()).isEqualTo(BATCH_SIZE);
-    assertThat(indexRequest.getAllValues().get(1).getRequestId()).isEqualTo(REQUEST_ID);
-    assertThat(indexRequest.getAllValues().get(1).getAnalysisName()).isEqualTo(ANALYSIS_NAME);
-    assertThat(indexRequest.getAllValues().get(1).getAlertsCount()).isEqualTo(BATCH_SIZE);
+
+    verify(gateway, times(1)).send(indexRequest.capture());
+    SimulationDataIndexRequest simulationDataIndexRequest = indexRequest.getAllValues().get(0);
+    assertThat(simulationDataIndexRequest.getAlertsList()).hasSize(1);
+
+    SimulationAlert alert = simulationDataIndexRequest.getAlerts(0);
+    assertThat(alert.getName()).isEqualTo(ALERT_NAME);
+
+    Map<String, Value> alertPayload = alert.getPayload().getFieldsMap();
+    assertThat(alertPayload).hasSize(4);
+    assertPayload(alertPayload, EXPECTED_ALERT_PAYLOAD);
+
+    List<SimulationMatch> matchesList = alert.getMatchesList();
+    assertThat(matchesList).hasSize(2);
+    assertPayload(matchesList.get(1).getPayload().getFieldsMap(), EXPECTED_MATCH_PAYLOAD);
   }
+
+  private void assertPayload(
+      Map<String, Value> matchPayload, Map<String, String> expectedValues) {
+
+    for (Map.Entry<String, String> entry : expectedValues.entrySet()) {
+      assertThat(matchPayload).containsEntry(entry.getKey(), getStringAsValue(entry.getValue()));
+    }
+  }
+
+  private static final Map<String, String> EXPECTED_ALERT_PAYLOAD =
+      Map.of("recommendation_alert", ALERT_NAME,
+          "recommendation_comment", RECOMMENDATION_COMMENT,
+          "recommendation_recommended_action", RECOMMENDED_ACTION);
+
+  private static final Map<String, String> EXPECTED_MATCH_PAYLOAD =
+      Map.of("match_solution", MATCH_SOLUTION_TP,
+          "match_reason:step", "",
+          "match_reason:policy", POLICY_NAME,
+          "match_reason:step_title", " ",
+          "match_reason:policy_title", POLICY_TITLE,
+          "match_reason:feature_vector_signature", FEATURE_VECTOR_SIGNATURE,
+          "features/name:config", AGENTS_CONFIG,
+          "features/name:reason",
+          "fields {\n  key: \"reason-1\"\n  "
+              + "value {\n    string_value: \"This is reason\"\n  }\n}\n",
+          "features/name:solution", RECOMMENDED_ACTION);
 }
diff --git a/modules/simulator/simulator-processing/src/test/java/com/silenteight/simulator/processing/alert/index/fixtures/RecommendationFixtures.java b/modules/simulator/simulator-processing/src/test/java/com/silenteight/simulator/processing/alert/index/fixtures/RecommendationFixtures.java
index df30882..88ac72e 100644
--- a/modules/simulator/simulator-processing/src/test/java/com/silenteight/simulator/processing/alert/index/fixtures/RecommendationFixtures.java
+++ b/modules/simulator/simulator-processing/src/test/java/com/silenteight/simulator/processing/alert/index/fixtures/RecommendationFixtures.java
@@ -15,10 +15,8 @@ import com.google.protobuf.Struct;
 import com.google.protobuf.Timestamp;
 import com.google.protobuf.Value;
 
-import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
-import java.util.Stack;
 import java.util.stream.IntStream;
 
 import static java.util.Collections.singletonList;
@@ -28,7 +26,10 @@ import static java.util.stream.Collectors.toList;
 public final class RecommendationFixtures {
 
   public static final String REQUEST_ID = "b4708d8c-4832-6fde-8dc0-d17b4708d8ca";
-  public static final String ANALYSIS_NAME = "analysis/01256804-1ce1-4d52-94d4-d1876910f272";
+  public static final String ANALYSIS_NAME = "analysis/1";
+  public static final String POLICY_NAME = "policies/8803c2cb-48df-4d7e-8be6-043a3c56ade8";
+  public static final String POLICY_TITLE = "Name agent policy";
+  public static final String FEATURE_VECTOR_SIGNATURE = "ByG4Am28zh+Qj6/JCPz6Q+XnOH0=";
   public static final String RECOMMENDATION_NAME =
       "recommendations/d17b4708-6fde-8dc0-4832-d17b4708d8ca";
   public static final String RECOMMENDATION_METADATA_NAME = RECOMMENDATION_NAME + "/metadata";
@@ -37,12 +38,15 @@ public final class RecommendationFixtures {
       .setSeconds(1622505601)
       .setNanos(0)
       .build();
+
   public static final String RECOMMENDED_ACTION = "FALSE_POSITIVE";
   public static final String RECOMMENDATION_COMMENT = "This is not that person";
   public static final String MATCH_NAME = "matches/a9b45451-6fde-4832-8dc0-d17b4708d8ca";
   public static final String FEATURE_SOLUTION = "FALSE_POSITIVE";
-  public static final String MATCH_SOLUTION = "FALSE_POSITIVE";
-
+  public static final String MATCH_SOLUTION_FP = "FALSE_POSITIVE";
+  public static final String MATCH_SOLUTION_TP = "TRUE_POSITIVE";
+  public static final String AGENTS_CONFIG = "agents/name/versions/1.0.0/configs/1";
+  public static final String FEATURES_NAMES_KEYS = "features/name";
   public static final Recommendation RECOMMENDATION =
       Recommendation.newBuilder()
           .setName(RECOMMENDATION_NAME)
@@ -79,31 +83,39 @@ public final class RecommendationFixtures {
   public static final Struct FEATURE_REASON =
       Struct.newBuilder()
           .putAllFields(
-              Map.of("reason-1", Value.newBuilder()
-                  .setStringValue("This is reason")
-                  .build()))
+              Map.of("reason-1", getStringAsValue("This is reason")))
+          .build();
+
+  public static final Struct MATCH_REASON =
+      Struct.newBuilder()
+          .putAllFields(
+              Map.of("step", getStringAsValue(""),
+                  "policy", getStringAsValue(POLICY_NAME),
+                  "step_title", getStringAsValue(" "),
+                  "policy_title", getStringAsValue(POLICY_TITLE),
+                  "feature_vector_signature", getStringAsValue(FEATURE_VECTOR_SIGNATURE)))
           .build();
 
   public static final FeatureMetadata FEATURE_METADATA =
       FeatureMetadata.newBuilder()
           .setAgentConfig("agent-config")
-          .setSolution(FEATURE_SOLUTION)
+          .setSolution("FEATURE_METADATA_SOLUTION")
           .setReason(FEATURE_REASON)
           .build();
 
-  public static final MatchMetadata MATCH_METADATA =
+  public static final MatchMetadata MATCH_METADATA_1 =
       MatchMetadata.newBuilder()
           .setMatch(MATCH_NAME)
-          .setSolution(MATCH_SOLUTION)
+          .setSolution(MATCH_SOLUTION_FP)
           .putAllCategories(Map.of("category-1", "category-value-1"))
-          .putAllFeatures(Map.of("feature-name", FEATURE_METADATA))
+          .putAllFeatures(Map.of(FEATURES_NAMES_KEYS, FEATURE_METADATA))
           .build();
 
   public static final RecommendationMetadata METADATA =
       RecommendationMetadata.newBuilder()
           .setName(RECOMMENDATION_METADATA_NAME)
           .setAlert(ALERT_NAME)
-          .addMatches(MATCH_METADATA)
+          .addMatches(MATCH_METADATA_1)
           .build();
 
   public static final RecommendationWithMetadata RECOMMENDATION_WITH_METADATA =
@@ -119,23 +131,40 @@ public final class RecommendationFixtures {
       .map(v -> RECOMMENDATION_WITH_METADATA)
       .collect(toList());
 
-  public static class RecommendationWithMetaDataIterator
-      implements Iterator<RecommendationWithMetadata> {
+  public static final FeatureMetadata FEATURE_METADATA_2 = FeatureMetadata.newBuilder()
+      .setAgentConfig(AGENTS_CONFIG)
+      .setSolution(FEATURE_SOLUTION)
+      .setReason(FEATURE_REASON)
+      .build();
+
+  public static final MatchMetadata MATCH_METADATA_2 = MatchMetadata.newBuilder()
+      .setSolution(MATCH_SOLUTION_TP)
+      .putFeatures(FEATURES_NAMES_KEYS, FEATURE_METADATA_2)
+      .setReason(MATCH_REASON)
+      .build();
 
-    Stack<RecommendationWithMetadata> recommendations;
+  public static final RecommendationMetadata RECOMMENDATION_METADATA_WITH_MULTI_HIT_ALERT =
+      RecommendationMetadata.newBuilder()
+          .setAlert(ALERT_NAME)
+          .addAllMatches(List.of(MATCH_METADATA_1, MATCH_METADATA_2))
+          .build();
 
-    public RecommendationWithMetaDataIterator(Stack<RecommendationWithMetadata> recommendations) {
-      this.recommendations = recommendations;
-    }
+  public static final RecommendationInfo RECOMMENDATION_INFO_WITH_MULTI_HIT_ALERT =
+      RecommendationInfo.newBuilder()
+          .setAlert(ALERT_NAME)
+          .setValue(RECOMMENDATION)
+          .setMetadata(RECOMMENDATION_METADATA_WITH_MULTI_HIT_ALERT)
+          .build();
 
-    @Override
-    public boolean hasNext() {
-      return !recommendations.isEmpty();
-    }
+  public static final RecommendationsGenerated REQUEST_WITH_MULTI_HIT_ALERT =
+      RecommendationsGenerated.newBuilder()
+          .setAnalysis(ANALYSIS_NAME)
+          .addAllRecommendationInfos(List.of(RECOMMENDATION_INFO_WITH_MULTI_HIT_ALERT))
+          .build();
 
-    @Override
-    public RecommendationWithMetadata next() {
-      return recommendations.pop();
-    }
+  public static Value getStringAsValue(String string) {
+    return Value.newBuilder()
+        .setStringValue(string)
+        .build();
   }
 }
-- 
2.25.1


From 60ae194d2f243575cdefb40f9b7063d7b5360fe5 Mon Sep 17 00:00:00 2001
From: Jenkins <jenkins@silenteight.com>
Date: Thu, 5 May 2022 12:22:48 +0000
Subject: [PATCH 05/12] Snapshot 1.16.0-SNAPSHOT

---
 modules/simulator/gradle.properties | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/modules/simulator/gradle.properties b/modules/simulator/gradle.properties
index 4f4a4a8..01f4749 100644
--- a/modules/simulator/gradle.properties
+++ b/modules/simulator/gradle.properties
@@ -3,7 +3,7 @@
 ####################################################################################################
 description=Silent Eight Simulator
 group=com.silenteight.simulator
-version=1.15.0-SNAPSHOT
+version=1.16.0-SNAPSHOT
 
 ####################################################################################################
 # Gradle Settings
-- 
2.25.1


From 90d21d02a9958eeb0cc0009d11cfec1a1444cec8 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Rafa=C5=82=20Pajdak?= <rpajdak@silenteight.com>
Date: Wed, 11 May 2022 10:17:18 +0000
Subject: [PATCH 06/12] Feature: Set `FINISH` on Simulation when all messages
 are acked and all alerts are indexed. (WEB-2317)

---
 .../db.changelog-simulator-1.5.0.xml          |  6 ++++
 .../create/CreateSimulationUseCase.java       |  8 ++---
 .../management/domain/SimulationEntity.java   | 16 ++-------
 .../management/domain/SimulationQuery.java    | 19 +----------
 .../domain/SimulationRepository.java          |  5 +++
 .../management/domain/SimulationService.java  | 12 ++-----
 .../management/domain/SimulationState.java    |  2 +-
 .../domain/SimulationStateProvider.java       |  6 ----
 .../timeout/SimulationTimeoutService.java     |  3 +-
 .../domain/SimulationEntityTest.java          |  6 ++--
 .../domain/SimulationQueryTest.java           | 33 ++-----------------
 .../domain/SimulationServiceTest.java         |  4 ++-
 .../index/ack/AckMessageConfiguration.java    |  7 ++--
 .../index/ack/FetchAckMessageUseCase.java     | 23 ++++++++++++-
 .../alert/index/ack/AckMessageFixtures.java   |  9 ++++-
 .../index/ack/FetchAckMessageUseCaseTest.java | 23 +++++++++++++
 16 files changed, 85 insertions(+), 97 deletions(-)
 delete mode 100644 modules/simulator/simulator-management/src/main/java/com/silenteight/simulator/management/domain/SimulationStateProvider.java

diff --git a/modules/simulator/simulator-db-changelog/src/main/resources/db/changelog/db.changelog-simulator-1.5.0.xml b/modules/simulator/simulator-db-changelog/src/main/resources/db/changelog/db.changelog-simulator-1.5.0.xml
index f604f0b..8945322 100644
--- a/modules/simulator/simulator-db-changelog/src/main/resources/db/changelog/db.changelog-simulator-1.5.0.xml
+++ b/modules/simulator/simulator-db-changelog/src/main/resources/db/changelog/db.changelog-simulator-1.5.0.xml
@@ -31,4 +31,10 @@
       </column>
     </addColumn>
   </changeSet>
+  <changeSet id="simulator-1.5.0-4" author="rpajdak">
+    <update tableName="simulator_simulation">
+      <column name="state" value="RUNNING"/>
+      <where>state = 'STREAMING'</where>
+    </update>
+  </changeSet>
 </databaseChangeLog>
diff --git a/modules/simulator/simulator-management/src/main/java/com/silenteight/simulator/management/create/CreateSimulationUseCase.java b/modules/simulator/simulator-management/src/main/java/com/silenteight/simulator/management/create/CreateSimulationUseCase.java
index b47b941..c7d30d5 100644
--- a/modules/simulator/simulator-management/src/main/java/com/silenteight/simulator/management/create/CreateSimulationUseCase.java
+++ b/modules/simulator/simulator-management/src/main/java/com/silenteight/simulator/management/create/CreateSimulationUseCase.java
@@ -37,7 +37,7 @@ public class CreateSimulationUseCase {
 
     SolvingModel model = modelService.getModel(request.getModel());
     Analysis analysis = runAnalysis(model);
-    storeSimulation(request, request.getDatasets(), analysis.getName());
+    storeSimulation(request, analysis.getName());
     addDatasetsToAnalysis(analysis.getName(), request.getDatasets());
 
     request.postAudit(auditingLogger::log);
@@ -49,10 +49,8 @@ public class CreateSimulationUseCase {
     return analysis;
   }
 
-  private void storeSimulation(
-      CreateSimulationRequest request, Set<String> datasets, String analysis) {
-
-    simulationService.createSimulation(request, datasets, analysis);
+  private void storeSimulation(CreateSimulationRequest request, String analysisName) {
+    simulationService.createSimulation(request, request.getDatasets(), analysisName);
   }
 
   private void addDatasetsToAnalysis(@NonNull String analysis, @NonNull Set<String> datasets) {
diff --git a/modules/simulator/simulator-management/src/main/java/com/silenteight/simulator/management/domain/SimulationEntity.java b/modules/simulator/simulator-management/src/main/java/com/silenteight/simulator/management/domain/SimulationEntity.java
index 2aee64e..274e313 100644
--- a/modules/simulator/simulator-management/src/main/java/com/silenteight/simulator/management/domain/SimulationEntity.java
+++ b/modules/simulator/simulator-management/src/main/java/com/silenteight/simulator/management/domain/SimulationEntity.java
@@ -92,7 +92,7 @@ class SimulationEntity extends BaseModifiableEntity implements IdentifiableEntit
   }
 
   void finish(OffsetDateTime finishedAt) {
-    assertInState(STREAMING);
+    assertInState(RUNNING);
     this.state = DONE;
     this.finishedAt = finishedAt;
   }
@@ -107,7 +107,7 @@ class SimulationEntity extends BaseModifiableEntity implements IdentifiableEntit
   }
 
   private void setErrorState(OffsetDateTime finishedAt) {
-    assertInState(RUNNING,STREAMING);
+    assertInState(RUNNING);
     this.state = ERROR;
     this.finishedAt = finishedAt;
   }
@@ -125,15 +125,6 @@ class SimulationEntity extends BaseModifiableEntity implements IdentifiableEntit
     return getState() == ARCHIVED;
   }
 
-  boolean isStreaming() {
-    return state == STREAMING;
-  }
-
-  public void streaming() {
-    assertInState(RUNNING);
-    this.state = STREAMING;
-  }
-
   void timeout(OffsetDateTime dateTime) {
     setErrorState(dateTime);
   }
@@ -157,9 +148,6 @@ class SimulationEntity extends BaseModifiableEntity implements IdentifiableEntit
   }
 
   SimulationState getState() {
-    if (state == STREAMING)
-      return RUNNING;
-
     return state;
   }
 }
diff --git a/modules/simulator/simulator-management/src/main/java/com/silenteight/simulator/management/domain/SimulationQuery.java b/modules/simulator/simulator-management/src/main/java/com/silenteight/simulator/management/domain/SimulationQuery.java
index e3e8817..3682aef 100644
--- a/modules/simulator/simulator-management/src/main/java/com/silenteight/simulator/management/domain/SimulationQuery.java
+++ b/modules/simulator/simulator-management/src/main/java/com/silenteight/simulator/management/domain/SimulationQuery.java
@@ -14,19 +14,13 @@ import com.silenteight.simulator.management.progress.AnalysisNameQuery;
 import java.util.Collection;
 import java.util.List;
 import java.util.UUID;
-import java.util.stream.Stream;
 
-import static com.silenteight.simulator.management.domain.SimulationState.RUNNING;
-import static com.silenteight.simulator.management.domain.SimulationState.STREAMING;
 import static java.util.stream.Collectors.toList;
-import static java.util.stream.Collectors.toSet;
-import static java.util.stream.Stream.of;
 
 @Slf4j
 @RequiredArgsConstructor
 class SimulationQuery
-    implements AnalysisNameQuery, ListSimulationsQuery, SimulationDetailsQuery,
-    SimulationStateProvider {
+    implements AnalysisNameQuery, ListSimulationsQuery, SimulationDetailsQuery {
 
   @NonNull
   private final SimulationRepository repository;
@@ -35,9 +29,6 @@ class SimulationQuery
   public List<SimulationDto> listDomainDto(Collection<SimulationState> states) {
     log.debug("Listing all SimulationDto by states={}", states);
 
-    if (states.contains(RUNNING))
-      states = Stream.concat(states.stream(), of(STREAMING)).collect(toSet());
-
     return repository
         .findAllByStateIn(states)
         .stream()
@@ -83,14 +74,6 @@ class SimulationQuery
     return repository.findAllAnalysisNamesByDatasetNames(datasetNames);
   }
 
-  @Override
-  public boolean isStreaming(@NonNull String analysis) {
-    return repository
-        .findByAnalysisName(analysis)
-        .map(SimulationEntity::isStreaming)
-        .orElseThrow(() -> new SimulationNotFoundException(analysis));
-  }
-
   @Override
   public String getAnalysisName(UUID simulationId) {
     return repository.findAnalysisNameBySimulationId(simulationId);
diff --git a/modules/simulator/simulator-management/src/main/java/com/silenteight/simulator/management/domain/SimulationRepository.java b/modules/simulator/simulator-management/src/main/java/com/silenteight/simulator/management/domain/SimulationRepository.java
index 82d0d0b..051a5ee 100644
--- a/modules/simulator/simulator-management/src/main/java/com/silenteight/simulator/management/domain/SimulationRepository.java
+++ b/modules/simulator/simulator-management/src/main/java/com/silenteight/simulator/management/domain/SimulationRepository.java
@@ -30,4 +30,9 @@ interface SimulationRepository extends Repository<SimulationEntity, Long> {
       + " FROM simulator_simulation s"
       + " WHERE s.simulation_id = :simulationId", nativeQuery = true)
   String findAnalysisNameBySimulationId(UUID simulationId);
+
+  @Query(value = "SELECT s.alerts_count"
+      + " FROM simulator_simulation s"
+      + " WHERE s.analysis_name = :analysisName", nativeQuery = true)
+  long getAlertsCountByAnalysisName(String analysisName);
 }
diff --git a/modules/simulator/simulator-management/src/main/java/com/silenteight/simulator/management/domain/SimulationService.java b/modules/simulator/simulator-management/src/main/java/com/silenteight/simulator/management/domain/SimulationService.java
index 56476e5..177818a 100644
--- a/modules/simulator/simulator-management/src/main/java/com/silenteight/simulator/management/domain/SimulationService.java
+++ b/modules/simulator/simulator-management/src/main/java/com/silenteight/simulator/management/domain/SimulationService.java
@@ -38,6 +38,7 @@ public class SimulationService {
         .datasetNames(datasets)
         .state(PENDING)
         .build();
+
     simulationEntity.run();
     try {
       repository.save(simulationEntity);
@@ -97,9 +98,11 @@ public class SimulationService {
   }
 
   private void setErrorStateOnSimulation(UUID simulationId) {
+    log.info("Setting ERROR on simulation with id={}", simulationId);
     SimulationEntity simulationEntity = repository
         .findSimulationEntityBySimulationId(simulationId)
         .orElseThrow(() -> new SimulationNotFoundException(simulationId));
+
     simulationEntity.timeout(timeSource.offsetDateTime());
   }
 
@@ -108,13 +111,4 @@ public class SimulationService {
         .findSimulationEntityBySimulationId(simulationId)
         .orElseThrow(() -> new SimulationNotFoundException(simulationId));
   }
-
-  @Transactional
-  public void streaming(@NonNull String analysis) {
-    SimulationEntity simulationEntity = repository
-        .findByAnalysisName(analysis)
-        .orElseThrow(() -> new SimulationNotFoundException(analysis));
-    simulationEntity.streaming();
-    log.debug("Saved as 'STREAMING' SimulationEntity={}", simulationEntity);
-  }
 }
diff --git a/modules/simulator/simulator-management/src/main/java/com/silenteight/simulator/management/domain/SimulationState.java b/modules/simulator/simulator-management/src/main/java/com/silenteight/simulator/management/domain/SimulationState.java
index c0eeb86..3d50181 100644
--- a/modules/simulator/simulator-management/src/main/java/com/silenteight/simulator/management/domain/SimulationState.java
+++ b/modules/simulator/simulator-management/src/main/java/com/silenteight/simulator/management/domain/SimulationState.java
@@ -2,5 +2,5 @@ package com.silenteight.simulator.management.domain;
 
 public enum SimulationState {
 
-  NEW, PENDING, RUNNING, STREAMING, DONE, ARCHIVED, CANCELED, ERROR
+  NEW, PENDING, RUNNING, DONE, ARCHIVED, CANCELED, ERROR
 }
diff --git a/modules/simulator/simulator-management/src/main/java/com/silenteight/simulator/management/domain/SimulationStateProvider.java b/modules/simulator/simulator-management/src/main/java/com/silenteight/simulator/management/domain/SimulationStateProvider.java
deleted file mode 100644
index 1d54746..0000000
--- a/modules/simulator/simulator-management/src/main/java/com/silenteight/simulator/management/domain/SimulationStateProvider.java
+++ /dev/null
@@ -1,6 +0,0 @@
-package com.silenteight.simulator.management.domain;
-
-public interface SimulationStateProvider {
-
-  boolean isStreaming(String analysis);
-}
diff --git a/modules/simulator/simulator-management/src/main/java/com/silenteight/simulator/management/timeout/SimulationTimeoutService.java b/modules/simulator/simulator-management/src/main/java/com/silenteight/simulator/management/timeout/SimulationTimeoutService.java
index daca165..f1b882c 100644
--- a/modules/simulator/simulator-management/src/main/java/com/silenteight/simulator/management/timeout/SimulationTimeoutService.java
+++ b/modules/simulator/simulator-management/src/main/java/com/silenteight/simulator/management/timeout/SimulationTimeoutService.java
@@ -13,7 +13,6 @@ import org.springframework.transaction.annotation.Transactional;
 import java.util.List;
 
 import static com.silenteight.simulator.management.domain.SimulationState.RUNNING;
-import static com.silenteight.simulator.management.domain.SimulationState.STREAMING;
 import static java.util.List.of;
 import static java.util.stream.Collectors.toList;
 
@@ -36,7 +35,7 @@ class SimulationTimeoutService {
   @Transactional
   public void timeoutSimulations() {
     List<SimulationDto> runningSimulations = listSimulationsQuery
-        .listDomainDto(of(RUNNING, STREAMING))
+        .listDomainDto(of(RUNNING))
         .stream()
         .filter(simulationDto -> simulationLastCheckTimes
             .isIntervalElapsed(simulationDto.getSimulationName()))
diff --git a/modules/simulator/simulator-management/src/test/java/com/silenteight/simulator/management/domain/SimulationEntityTest.java b/modules/simulator/simulator-management/src/test/java/com/silenteight/simulator/management/domain/SimulationEntityTest.java
index 9d0590d..475b3fc 100644
--- a/modules/simulator/simulator-management/src/test/java/com/silenteight/simulator/management/domain/SimulationEntityTest.java
+++ b/modules/simulator/simulator-management/src/test/java/com/silenteight/simulator/management/domain/SimulationEntityTest.java
@@ -59,7 +59,7 @@ class SimulationEntityTest {
   @Test
   void shouldFinishSimulation() {
     // given
-    SimulationEntity simulation = createSimulationEntity(STREAMING);
+    SimulationEntity simulation = createSimulationEntity(RUNNING);
     OffsetDateTime mockTime = ARBITRARY_INSTANCE.offsetDateTime();
 
     // when
@@ -73,7 +73,7 @@ class SimulationEntityTest {
   @ParameterizedTest
   @EnumSource(
       value = SimulationState.class,
-      names = { "PENDING", "DONE", "ARCHIVED", "NEW", "CANCELED", "RUNNING" })
+      names = { "PENDING", "DONE", "ARCHIVED", "NEW", "CANCELED",  })
   void shouldThrowExceptionWhenNotInStateForFinish(SimulationState state) {
     // given
     SimulationEntity simulation = createSimulationEntity(state);
@@ -83,7 +83,7 @@ class SimulationEntityTest {
     assertThatThrownBy(
         () -> simulation.finish(currentTime))
         .isInstanceOf(SimulationNotInProperStateException.class)
-        .hasMessage(format("Simulation should be in state: [STREAMING]."));
+        .hasMessage(format("Simulation should be in state: [RUNNING]."));
   }
 
   @Test
diff --git a/modules/simulator/simulator-management/src/test/java/com/silenteight/simulator/management/domain/SimulationQueryTest.java b/modules/simulator/simulator-management/src/test/java/com/silenteight/simulator/management/domain/SimulationQueryTest.java
index 191d990..ad0661f 100644
--- a/modules/simulator/simulator-management/src/test/java/com/silenteight/simulator/management/domain/SimulationQueryTest.java
+++ b/modules/simulator/simulator-management/src/test/java/com/silenteight/simulator/management/domain/SimulationQueryTest.java
@@ -16,8 +16,6 @@ import java.util.List;
 import java.util.UUID;
 
 import static com.silenteight.simulator.management.SimulationFixtures.*;
-import static com.silenteight.simulator.management.domain.SimulationState.RUNNING;
-import static com.silenteight.simulator.management.domain.SimulationState.STREAMING;
 import static java.util.List.of;
 import static java.util.UUID.fromString;
 import static org.assertj.core.api.Assertions.*;
@@ -48,21 +46,6 @@ class SimulationQueryTest extends BaseDataJpaTest {
     assertSimulation(result.get(0), PENDING_STATE);
   }
 
-  @Test
-  void shouldListSimulationsByStatesStreamingCase() {
-    // given
-    UUID canceledSimulationId = fromString("b4708d8c-4832-6fde-8dc0-d17b4708d8ca");
-    persistSimulation(ID, STREAMING);
-    persistSimulation(canceledSimulationId, CANCELED_STATE);
-
-    // when
-    List<SimulationListDto> result = underTest.list(of(RUNNING, ARCHIVED_STATE));
-
-    // then
-    assertThat(result).hasSize(1);
-    assertSimulation(result.get(0), RUNNING);
-  }
-
   @Test
   void shouldFindSimulationByModel() {
     // given
@@ -151,18 +134,6 @@ class SimulationQueryTest extends BaseDataJpaTest {
     assertThat(analysisName).isEqualTo(ANALYSIS_NAME_1);
   }
 
-  @Test
-  void shouldReturnRunningForStreamingStatus() {
-    // given
-    persistSimulation(ID, STREAMING);
-
-    // when
-    SimulationDetailsDto simulationDetailsDto = underTest.get(ID);
-
-    // then
-    assertThat(simulationDetailsDto.getState()).isEqualTo(RUNNING);
-  }
-
   private static void assertSimulation(SimulationListDto result, SimulationState pendingState) {
     assertThat(result.getId()).isEqualTo(ID);
     assertThat(result.getSimulationName()).isEqualTo(SIMULATION_NAME);
@@ -183,7 +154,7 @@ class SimulationQueryTest extends BaseDataJpaTest {
     assertThat(result.getAnalysis()).isEqualTo(ANALYSIS_NAME_1);
     assertThat(result.getCreatedBy()).isEqualTo(USERNAME);
     assertThat(result.getCreatedAt()).isNotNull();
-    assertThat(result.getSolvedAlerts()).isEqualTo(ALERTS_COUNT);
+    assertThat(result.getSolvedAlerts()).isEqualTo(SOLVED_ALERTS);
   }
 
   private void persistSimulation(UUID simulationId, SimulationState state) {
@@ -197,7 +168,7 @@ class SimulationQueryTest extends BaseDataJpaTest {
         .datasetNames(DATASETS)
         .modelName(MODEL_NAME)
         .analysisName(ANALYSIS_NAME_1)
-        .solvedAlerts(ALERTS_COUNT)
+        .solvedAlerts(SOLVED_ALERTS)
         .build();
 
     simulationRepository.save(simulationEntity);
diff --git a/modules/simulator/simulator-management/src/test/java/com/silenteight/simulator/management/domain/SimulationServiceTest.java b/modules/simulator/simulator-management/src/test/java/com/silenteight/simulator/management/domain/SimulationServiceTest.java
index a28e758..61e14df 100644
--- a/modules/simulator/simulator-management/src/test/java/com/silenteight/simulator/management/domain/SimulationServiceTest.java
+++ b/modules/simulator/simulator-management/src/test/java/com/silenteight/simulator/management/domain/SimulationServiceTest.java
@@ -79,7 +79,7 @@ class SimulationServiceTest extends BaseDataJpaTest {
   @Test
   void shouldFinish() {
     // given
-    SimulationEntity simulation = persistSimulation(STREAMING, ANALYSIS_NAME_1, SOLVED_ALERTS);
+    SimulationEntity simulation = persistSimulation(RUNNING, ANALYSIS_NAME_1, SOLVED_ALERTS);
 
     // when
     underTest.finish(ANALYSIS_NAME_1);
@@ -87,6 +87,7 @@ class SimulationServiceTest extends BaseDataJpaTest {
     // then
     SimulationEntity savedSimulation =
         entityManager.find(SimulationEntity.class, simulation.getId());
+
     assertThat(savedSimulation.getState()).isEqualTo(DONE);
   }
 
@@ -101,6 +102,7 @@ class SimulationServiceTest extends BaseDataJpaTest {
     // then
     SimulationEntity savedSimulation =
         entityManager.find(SimulationEntity.class, simulation.getId());
+
     assertThat(savedSimulation.getState()).isEqualTo(ARCHIVED);
   }
 
diff --git a/modules/simulator/simulator-processing/src/main/java/com/silenteight/simulator/processing/alert/index/ack/AckMessageConfiguration.java b/modules/simulator/simulator-processing/src/main/java/com/silenteight/simulator/processing/alert/index/ack/AckMessageConfiguration.java
index 6c130a1..e62d253 100644
--- a/modules/simulator/simulator-processing/src/main/java/com/silenteight/simulator/processing/alert/index/ack/AckMessageConfiguration.java
+++ b/modules/simulator/simulator-processing/src/main/java/com/silenteight/simulator/processing/alert/index/ack/AckMessageConfiguration.java
@@ -1,8 +1,6 @@
 package com.silenteight.simulator.processing.alert.index.ack;
 
-import com.silenteight.simulator.dataset.domain.DatasetMetadataService;
 import com.silenteight.simulator.management.create.AnalysisService;
-import com.silenteight.simulator.management.details.SimulationDetailsQuery;
 import com.silenteight.simulator.management.domain.SimulationService;
 import com.silenteight.simulator.processing.alert.index.domain.IndexedAlertQuery;
 import com.silenteight.simulator.processing.alert.index.domain.IndexedAlertService;
@@ -17,14 +15,13 @@ class AckMessageConfiguration {
   FetchAckMessageUseCase fetchAckMessageUseCase(
       AnalysisService analysisService,
       IndexedAlertService indexedAlertService,
-      SimulationDetailsQuery simulationQuery,
-      DatasetMetadataService datasetService,
       SimulationService simulationService,
       IndexedAlertQuery indexedAlertQuery) {
 
     return new FetchAckMessageUseCase(
         indexedAlertService,
         simulationService,
-        indexedAlertQuery);
+        indexedAlertQuery,
+        analysisService);
   }
 }
diff --git a/modules/simulator/simulator-processing/src/main/java/com/silenteight/simulator/processing/alert/index/ack/FetchAckMessageUseCase.java b/modules/simulator/simulator-processing/src/main/java/com/silenteight/simulator/processing/alert/index/ack/FetchAckMessageUseCase.java
index 8467b8f..ab31b39 100644
--- a/modules/simulator/simulator-processing/src/main/java/com/silenteight/simulator/processing/alert/index/ack/FetchAckMessageUseCase.java
+++ b/modules/simulator/simulator-processing/src/main/java/com/silenteight/simulator/processing/alert/index/ack/FetchAckMessageUseCase.java
@@ -4,7 +4,9 @@ import lombok.NonNull;
 import lombok.RequiredArgsConstructor;
 import lombok.extern.slf4j.Slf4j;
 
+import com.silenteight.adjudication.api.v1.Analysis;
 import com.silenteight.data.api.v2.DataIndexResponse;
+import com.silenteight.simulator.management.create.AnalysisService;
 import com.silenteight.simulator.management.domain.SimulationService;
 import com.silenteight.simulator.processing.alert.index.amqp.listener.AckMessageHandler;
 import com.silenteight.simulator.processing.alert.index.domain.IndexedAlertQuery;
@@ -23,6 +25,8 @@ public class FetchAckMessageUseCase implements AckMessageHandler {
   private final SimulationService simulationService;
   @NonNull
   private final IndexedAlertQuery indexedAlertQuery;
+  @NonNull
+  private final AnalysisService analysisService;
 
   @Override
   public void handle(DataIndexResponse request) {
@@ -37,13 +41,30 @@ public class FetchAckMessageUseCase implements AckMessageHandler {
   }
 
   private void analyzeAckedMessages(String analysisName) {
-    if (areAllIndexedAlertsAcked(analysisName)) {
+    long indexedAlerts = getIndexedAlertsCount(analysisName);
+    long alertsCount = getAlertsCountByAnalysisName(analysisName);
+
+    if (areAllIndexedAlertsAcked(analysisName) && areAllAlertsIndexed(alertsCount, indexedAlerts)) {
+
       log.debug("All indexed alerts for analysisName={} are 'ACKED'", analysisName);
       simulationService.finish(analysisName);
       log.info("Simulation with analysisName={} is finished", analysisName);
     }
   }
 
+  private boolean areAllAlertsIndexed(long alertsInSimulation, long alertsIndexed) {
+    return alertsInSimulation == alertsIndexed;
+  }
+
+  private long getIndexedAlertsCount(String analysisName) {
+    return indexedAlertQuery.getAllIndexedAlertsCount(analysisName);
+  }
+
+  private long getAlertsCountByAnalysisName(String analysisName) {
+    Analysis analysis = analysisService.getAnalysis(analysisName);
+    return analysis.getAlertCount();
+  }
+
   private boolean areAllIndexedAlertsAcked(String analysisName) {
     return indexedAlertQuery.count(analysisName, of(SENT)) == 0;
   }
diff --git a/modules/simulator/simulator-processing/src/test/java/com/silenteight/simulator/processing/alert/index/ack/AckMessageFixtures.java b/modules/simulator/simulator-processing/src/test/java/com/silenteight/simulator/processing/alert/index/ack/AckMessageFixtures.java
index b74a4ff..acf5010 100644
--- a/modules/simulator/simulator-processing/src/test/java/com/silenteight/simulator/processing/alert/index/ack/AckMessageFixtures.java
+++ b/modules/simulator/simulator-processing/src/test/java/com/silenteight/simulator/processing/alert/index/ack/AckMessageFixtures.java
@@ -42,9 +42,16 @@ final class AckMessageFixtures {
       .setRequestId(REQUEST_ID)
       .build();
 
-  static final Analysis ANALYSIS = Analysis
+  static final Analysis ANALYSIS_1 = Analysis
       .newBuilder()
       .setState(DONE)
+      .setAlertCount(20L)
+      .build();
+
+  static final Analysis ANALYSIS_2 = Analysis
+      .newBuilder()
+      .setState(DONE)
+      .setAlertCount(42L)
       .build();
 
   public static final SimulationDetailsDto SIMULATION_DETAILS =
diff --git a/modules/simulator/simulator-processing/src/test/java/com/silenteight/simulator/processing/alert/index/ack/FetchAckMessageUseCaseTest.java b/modules/simulator/simulator-processing/src/test/java/com/silenteight/simulator/processing/alert/index/ack/FetchAckMessageUseCaseTest.java
index 76e6e40..778b26d 100644
--- a/modules/simulator/simulator-processing/src/test/java/com/silenteight/simulator/processing/alert/index/ack/FetchAckMessageUseCaseTest.java
+++ b/modules/simulator/simulator-processing/src/test/java/com/silenteight/simulator/processing/alert/index/ack/FetchAckMessageUseCaseTest.java
@@ -1,5 +1,6 @@
 package com.silenteight.simulator.processing.alert.index.ack;
 
+import com.silenteight.simulator.management.create.AnalysisService;
 import com.silenteight.simulator.management.domain.SimulationService;
 import com.silenteight.simulator.processing.alert.index.domain.IndexedAlertQuery;
 import com.silenteight.simulator.processing.alert.index.domain.IndexedAlertService;
@@ -10,6 +11,8 @@ import org.mockito.InjectMocks;
 import org.mockito.Mock;
 import org.mockito.junit.jupiter.MockitoExtension;
 
+import static com.silenteight.simulator.processing.alert.index.ack.AckMessageFixtures.ANALYSIS_1;
+import static com.silenteight.simulator.processing.alert.index.ack.AckMessageFixtures.ANALYSIS_2;
 import static com.silenteight.simulator.processing.alert.index.ack.AckMessageFixtures.ANALYSIS_NAME;
 import static com.silenteight.simulator.processing.alert.index.ack.AckMessageFixtures.INDEX_RESPONSE;
 import static com.silenteight.simulator.processing.alert.index.domain.State.SENT;
@@ -29,6 +32,24 @@ class FetchAckMessageUseCaseTest {
   private SimulationService simulationService;
   @Mock
   private IndexedAlertQuery indexedAlertQuery;
+  @Mock
+  private AnalysisService analysisService;
+
+  @Test
+  void shouldNotFinishSimulation() {
+    // given
+    doNothing().when(indexedAlertService).ack(any());
+    when(indexedAlertQuery.getAnalysisNameByRequestId(any())).thenReturn(ANALYSIS_NAME);
+    when(indexedAlertQuery.count(ANALYSIS_NAME, of(SENT))).thenReturn(0L);
+    when(indexedAlertQuery.getAllIndexedAlertsCount(ANALYSIS_NAME)).thenReturn(10L);
+    when(analysisService.getAnalysis(ANALYSIS_NAME)).thenReturn(ANALYSIS_1);
+
+    // when
+    underTest.handle(INDEX_RESPONSE);
+
+    // then
+    verify(simulationService, times(0)).finish(ANALYSIS_NAME);
+  }
 
   @Test
   void shouldFinishSimulation() {
@@ -36,6 +57,8 @@ class FetchAckMessageUseCaseTest {
     doNothing().when(indexedAlertService).ack(any());
     when(indexedAlertQuery.getAnalysisNameByRequestId(any())).thenReturn(ANALYSIS_NAME);
     when(indexedAlertQuery.count(ANALYSIS_NAME, of(SENT))).thenReturn(0L);
+    when(indexedAlertQuery.getAllIndexedAlertsCount(ANALYSIS_NAME)).thenReturn(42L);
+    when(analysisService.getAnalysis(ANALYSIS_NAME)).thenReturn(ANALYSIS_2);
 
     // when
     underTest.handle(INDEX_RESPONSE);
-- 
2.25.1


From 8f9fc0eeceadea31a5f3f9c92535a4c10b4941f2 Mon Sep 17 00:00:00 2001
From: Jenkins <jenkins@silenteight.com>
Date: Thu, 12 May 2022 14:16:48 +0000
Subject: [PATCH 07/12] Snapshot 1.17.0-SNAPSHOT

---
 modules/simulator/gradle.properties | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/modules/simulator/gradle.properties b/modules/simulator/gradle.properties
index 01f4749..1e392d8 100644
--- a/modules/simulator/gradle.properties
+++ b/modules/simulator/gradle.properties
@@ -3,7 +3,7 @@
 ####################################################################################################
 description=Silent Eight Simulator
 group=com.silenteight.simulator
-version=1.16.0-SNAPSHOT
+version=1.17.0-SNAPSHOT
 
 ####################################################################################################
 # Gradle Settings
-- 
2.25.1


From a2e34d1499925f3852e7733ae574cceae1d3af93 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Rafa=C5=82=20Pajdak?= <rpajdak@silenteight.com>
Date: Tue, 17 May 2022 08:43:02 +0000
Subject: [PATCH 08/12] Feature: Simulator should handle comment at match level
 (WEB-2335)
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Closes WEB-2335

Reviewed-by: Adam Nowicki <anowicki@silenteight.com>
Reviewed-by: Wojciech Wątroba <wwatroba@silenteight.com>
Merged from: https://gitlab.silenteight.com/sens/simulator/-/merge_requests/170
---
 .../alert/index/feed/RecommendationsGeneratedUseCase.java  | 7 ++++++-
 .../index/feed/RecommendationsGeneratedUseCaseTest.java    | 1 +
 .../alert/index/fixtures/RecommendationFixtures.java       | 2 ++
 3 files changed, 9 insertions(+), 1 deletion(-)

diff --git a/modules/simulator/simulator-processing/src/main/java/com/silenteight/simulator/processing/alert/index/feed/RecommendationsGeneratedUseCase.java b/modules/simulator/simulator-processing/src/main/java/com/silenteight/simulator/processing/alert/index/feed/RecommendationsGeneratedUseCase.java
index 61e42c0..2468721 100644
--- a/modules/simulator/simulator-processing/src/main/java/com/silenteight/simulator/processing/alert/index/feed/RecommendationsGeneratedUseCase.java
+++ b/modules/simulator/simulator-processing/src/main/java/com/silenteight/simulator/processing/alert/index/feed/RecommendationsGeneratedUseCase.java
@@ -41,6 +41,7 @@ class RecommendationsGeneratedUseCase implements RecommendationsGeneratedMessage
   private static final String RECOMMENDATION_COMMENT_FIELD = "recommendation_comment";
   private static final String MATCH_SOLUTION_FIELD = "match_solution";
   private static final String MATCH_REASON_FIELD = "match_reason";
+  private static final String MATCH_COMMENT_FIELD = "match_comment";
   private static final String FEATURE_CONFIG_FIELD_POSTFIX = ":config";
   private static final String FEATURE_SOLUTION_FIELD_POSTFIX = ":solution";
   private static final String FEATURE_REASON_FIELD_POSTFIX = ":reason";
@@ -158,11 +159,12 @@ class RecommendationsGeneratedUseCase implements RecommendationsGeneratedMessage
     fields.put(
         RECOMMENDATION_CREATE_TIME_FIELD,
         toValue(toIsoString(recommendation.getCreateTime())));
+
     fields.put(
         RECOMMENDATION_RECOMMENDED_ACTION_FIELD,
         toValue(recommendation.getRecommendedAction()));
-    fields.put(RECOMMENDATION_COMMENT_FIELD, toValue(recommendation.getRecommendationComment()));
 
+    fields.put(RECOMMENDATION_COMMENT_FIELD, toValue(recommendation.getRecommendationComment()));
     return fields;
   }
 
@@ -174,13 +176,16 @@ class RecommendationsGeneratedUseCase implements RecommendationsGeneratedMessage
   private static Map<String, Value> toMatchFields(MatchMetadata matchMetadata) {
     Map<String, Value> fields = new HashMap<>();
     fields.put(MATCH_SOLUTION_FIELD, toValue(matchMetadata.getSolution()));
+    fields.put(MATCH_COMMENT_FIELD, toValue(matchMetadata.getMatchComment()));
     matchMetadata
         .getReason()
         .getFieldsMap()
         .forEach((key, value) -> fields.put(MATCH_REASON_FIELD + ":" + key, value));
+
     matchMetadata
         .getFeaturesMap()
         .forEach((key, value) -> fields.putAll(toFeatureFields(key, value)));
+
     matchMetadata
         .getCategoriesMap()
         .forEach((key, value) -> fields.put(key + CATEGORY_FIELD_POSTFIX, toValue(value)));
diff --git a/modules/simulator/simulator-processing/src/test/java/com/silenteight/simulator/processing/alert/index/feed/RecommendationsGeneratedUseCaseTest.java b/modules/simulator/simulator-processing/src/test/java/com/silenteight/simulator/processing/alert/index/feed/RecommendationsGeneratedUseCaseTest.java
index 18f4c8c..bb7999b 100644
--- a/modules/simulator/simulator-processing/src/test/java/com/silenteight/simulator/processing/alert/index/feed/RecommendationsGeneratedUseCaseTest.java
+++ b/modules/simulator/simulator-processing/src/test/java/com/silenteight/simulator/processing/alert/index/feed/RecommendationsGeneratedUseCaseTest.java
@@ -155,6 +155,7 @@ class RecommendationsGeneratedUseCaseTest {
 
   private static final Map<String, String> EXPECTED_MATCH_PAYLOAD =
       Map.of("match_solution", MATCH_SOLUTION_TP,
+          "match_comment", MATCH_COMMENT,
           "match_reason:step", "",
           "match_reason:policy", POLICY_NAME,
           "match_reason:step_title", " ",
diff --git a/modules/simulator/simulator-processing/src/test/java/com/silenteight/simulator/processing/alert/index/fixtures/RecommendationFixtures.java b/modules/simulator/simulator-processing/src/test/java/com/silenteight/simulator/processing/alert/index/fixtures/RecommendationFixtures.java
index 88ac72e..581a846 100644
--- a/modules/simulator/simulator-processing/src/test/java/com/silenteight/simulator/processing/alert/index/fixtures/RecommendationFixtures.java
+++ b/modules/simulator/simulator-processing/src/test/java/com/silenteight/simulator/processing/alert/index/fixtures/RecommendationFixtures.java
@@ -45,6 +45,7 @@ public final class RecommendationFixtures {
   public static final String FEATURE_SOLUTION = "FALSE_POSITIVE";
   public static final String MATCH_SOLUTION_FP = "FALSE_POSITIVE";
   public static final String MATCH_SOLUTION_TP = "TRUE_POSITIVE";
+  public static final String MATCH_COMMENT = "Test match comment";
   public static final String AGENTS_CONFIG = "agents/name/versions/1.0.0/configs/1";
   public static final String FEATURES_NAMES_KEYS = "features/name";
   public static final Recommendation RECOMMENDATION =
@@ -141,6 +142,7 @@ public final class RecommendationFixtures {
       .setSolution(MATCH_SOLUTION_TP)
       .putFeatures(FEATURES_NAMES_KEYS, FEATURE_METADATA_2)
       .setReason(MATCH_REASON)
+      .setMatchComment(MATCH_COMMENT)
       .build();
 
   public static final RecommendationMetadata RECOMMENDATION_METADATA_WITH_MULTI_HIT_ALERT =
-- 
2.25.1


From e46278252b3cbf2ebeb4b1f4c59a0c605eb01c5f Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Wojciech=20W=C4=85troba?= <wwatroba@silenteight.com>
Date: Tue, 17 May 2022 14:02:40 +0000
Subject: [PATCH 09/12] INTERNAL: increased memory limit in nomad configuration

---
 modules/simulator/nomad/simulator.nomad | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/modules/simulator/nomad/simulator.nomad b/modules/simulator/nomad/simulator.nomad
index 3573d44..1452888 100644
--- a/modules/simulator/nomad/simulator.nomad
+++ b/modules/simulator/nomad/simulator.nomad
@@ -9,7 +9,7 @@ variable "simulator_artifact_checksum" {
 }
 
 variable "memory" {
-  default = 1500
+  default = 2000
 }
 
 variable "namespace" {
-- 
2.25.1


From 2798e584772efdfc016097ea4d487fc4c4125973 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Kamil=20Dzi=C4=99cio=C5=82?=
 <kdzieciol+gitlab@silenteight.com>
Date: Thu, 19 May 2022 07:33:42 +0000
Subject: [PATCH 10/12] Enhancement: Block creating simulation if not all
 datasets are Active.

---
 .../dataset/common/DatasetResource.java       |  6 +++++
 .../dataset/domain/DatasetEntity.java         |  4 +++
 .../domain/DatasetEntityRepository.java       |  2 ++
 .../DatasetExternalResourceNameProvider.java  | 10 ++++++++
 .../dataset/domain/DatasetQuery.java          | 15 ++++++++++-
 .../dataset/domain/DatasetValidator.java      | 10 ++++++++
 .../exception/NonActiveDatasetInSet.java      | 14 +++++++++++
 .../dataset/domain/DatasetQueryTest.java      | 15 +++++++++++
 .../dataset/fixture/DatasetFixtures.java      |  1 +
 .../create/CreateSimulationConfiguration.java | 13 +++++++---
 .../CreateSimulationControllerAdvice.java     |  7 ++++++
 .../create/CreateSimulationUseCase.java       | 11 +++++---
 .../CreateSimulationRestControllerTest.java   | 11 ++++++++
 .../create/CreateSimulationUseCaseTest.java   | 25 +++++++++++++++++--
 14 files changed, 135 insertions(+), 9 deletions(-)
 create mode 100644 modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/domain/DatasetExternalResourceNameProvider.java
 create mode 100644 modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/domain/DatasetValidator.java
 create mode 100644 modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/domain/exception/NonActiveDatasetInSet.java

diff --git a/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/common/DatasetResource.java b/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/common/DatasetResource.java
index 7de76e1..7a980b4 100644
--- a/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/common/DatasetResource.java
+++ b/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/common/DatasetResource.java
@@ -3,9 +3,11 @@ package com.silenteight.simulator.dataset.common;
 import lombok.AccessLevel;
 import lombok.NoArgsConstructor;
 
+import java.util.Set;
 import java.util.UUID;
 
 import static java.util.UUID.fromString;
+import static java.util.stream.Collectors.toSet;
 import static org.apache.commons.lang3.StringUtils.removeStart;
 
 @NoArgsConstructor(access = AccessLevel.PRIVATE)
@@ -20,4 +22,8 @@ public final class DatasetResource {
   public static UUID fromResourceName(String resourceName) {
     return fromString(removeStart(resourceName, RESOURCE_NAME_PREFIX));
   }
+
+  public static Set<UUID> fromResourceNamesSet(Set<String> datasets) {
+    return datasets.stream().map(DatasetResource::fromResourceName).collect(toSet());
+  }
 }
diff --git a/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/domain/DatasetEntity.java b/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/domain/DatasetEntity.java
index 471cb3a..1a256e7 100644
--- a/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/domain/DatasetEntity.java
+++ b/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/domain/DatasetEntity.java
@@ -147,4 +147,8 @@ class DatasetEntity extends BaseEntity implements Serializable {
         .to(getGenerationDateTo())
         .build();
   }
+
+  boolean isActive() {
+    return state == ACTIVE;
+  }
 }
diff --git a/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/domain/DatasetEntityRepository.java b/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/domain/DatasetEntityRepository.java
index 0ee8a3f..76ca178 100644
--- a/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/domain/DatasetEntityRepository.java
+++ b/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/domain/DatasetEntityRepository.java
@@ -30,4 +30,6 @@ interface DatasetEntityRepository extends Repository<DatasetEntity, Long> {
       + " FROM DatasetEntity d"
       + " WHERE d.datasetId IN :datasetIds")
   long sumAlertsInDatasets(Collection<UUID> datasetIds);
+
+  Collection<DatasetEntity> findAllByDatasetIdIn(Collection<UUID> datasetIds);
 }
diff --git a/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/domain/DatasetExternalResourceNameProvider.java b/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/domain/DatasetExternalResourceNameProvider.java
new file mode 100644
index 0000000..2ac8531
--- /dev/null
+++ b/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/domain/DatasetExternalResourceNameProvider.java
@@ -0,0 +1,10 @@
+package com.silenteight.simulator.dataset.domain;
+
+import lombok.NonNull;
+
+import java.util.UUID;
+
+public interface DatasetExternalResourceNameProvider {
+
+  String getExternalResourceName(@NonNull UUID datasetId);
+}
diff --git a/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/domain/DatasetQuery.java b/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/domain/DatasetQuery.java
index b92be0c..ce404b6 100644
--- a/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/domain/DatasetQuery.java
+++ b/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/domain/DatasetQuery.java
@@ -6,6 +6,7 @@ import lombok.extern.slf4j.Slf4j;
 
 import com.silenteight.simulator.dataset.common.DatasetResource;
 import com.silenteight.simulator.dataset.domain.exception.DatasetNotFoundException;
+import com.silenteight.simulator.dataset.domain.exception.NonActiveDatasetInSet;
 import com.silenteight.simulator.dataset.dto.DatasetDto;
 
 import java.util.Collection;
@@ -17,7 +18,7 @@ import static java.util.stream.Collectors.toList;
 
 @Slf4j
 @RequiredArgsConstructor
-public class DatasetQuery {
+public class DatasetQuery implements DatasetExternalResourceNameProvider, DatasetValidator {
 
   @NonNull
   private final DatasetEntityRepository repository;
@@ -47,6 +48,7 @@ public class DatasetQuery {
         .orElseThrow(() -> new DatasetNotFoundException(datasetId));
   }
 
+  @Override
   public String getExternalResourceName(@NonNull UUID datasetId) {
     log.trace("Getting ExternalResourceName by datasetId={}", datasetId);
 
@@ -63,4 +65,15 @@ public class DatasetQuery {
         .map(DatasetResource::toResourceName)
         .collect(toList());
   }
+
+  @Override
+  public void assertAllDatasetsActive(Set<String> datasets) {
+    boolean allDatasetActive = repository
+        .findAllByDatasetIdIn(DatasetResource.fromResourceNamesSet(datasets))
+        .stream()
+        .allMatch(DatasetEntity::isActive);
+
+    if (!allDatasetActive)
+      throw new NonActiveDatasetInSet(datasets);
+  }
 }
diff --git a/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/domain/DatasetValidator.java b/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/domain/DatasetValidator.java
new file mode 100644
index 0000000..c8847b2
--- /dev/null
+++ b/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/domain/DatasetValidator.java
@@ -0,0 +1,10 @@
+package com.silenteight.simulator.dataset.domain;
+
+import com.silenteight.simulator.dataset.domain.exception.NonActiveDatasetInSet;
+
+import java.util.Set;
+
+public interface DatasetValidator {
+
+  void assertAllDatasetsActive(Set<String> datasets) throws NonActiveDatasetInSet;
+}
diff --git a/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/domain/exception/NonActiveDatasetInSet.java b/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/domain/exception/NonActiveDatasetInSet.java
new file mode 100644
index 0000000..1e87944
--- /dev/null
+++ b/modules/simulator/simulator-dataset/src/main/java/com/silenteight/simulator/dataset/domain/exception/NonActiveDatasetInSet.java
@@ -0,0 +1,14 @@
+package com.silenteight.simulator.dataset.domain.exception;
+
+import java.util.Set;
+
+import static java.lang.String.format;
+
+public class NonActiveDatasetInSet extends RuntimeException {
+
+  private static final long serialVersionUID = 7343824672680971627L;
+
+  public NonActiveDatasetInSet(Set<String> datasets) {
+    super(format("One of the provided datasets is not in an active state (%s).", datasets));
+  }
+}
diff --git a/modules/simulator/simulator-dataset/src/test/java/com/silenteight/simulator/dataset/domain/DatasetQueryTest.java b/modules/simulator/simulator-dataset/src/test/java/com/silenteight/simulator/dataset/domain/DatasetQueryTest.java
index 9537274..d1ff5a9 100644
--- a/modules/simulator/simulator-dataset/src/test/java/com/silenteight/simulator/dataset/domain/DatasetQueryTest.java
+++ b/modules/simulator/simulator-dataset/src/test/java/com/silenteight/simulator/dataset/domain/DatasetQueryTest.java
@@ -2,6 +2,7 @@ package com.silenteight.simulator.dataset.domain;
 
 import com.silenteight.sep.base.common.support.jackson.JsonConversionHelper;
 import com.silenteight.sep.base.testing.BaseDataJpaTest;
+import com.silenteight.simulator.dataset.domain.exception.NonActiveDatasetInSet;
 import com.silenteight.simulator.dataset.dto.DatasetDto;
 
 import org.junit.jupiter.api.Test;
@@ -138,4 +139,18 @@ class DatasetQueryTest extends BaseDataJpaTest {
         .labels(JsonConversionHelper.INSTANCE.serializeToString(LABELS))
         .build();
   }
+
+  @Test
+  void doNothingIfAllDatasetsActive() {
+    persistDatasets();
+    assertThatNoException().isThrownBy(
+        () -> underTest.assertAllDatasetsActive(Set.of(RESOURCE_NAME_1, RESOURCE_NAME_2)));
+  }
+
+  @Test
+  void returnFalseIfAnyDatasetIsNotActive() {
+    persistDatasets();
+    assertThatExceptionOfType(NonActiveDatasetInSet.class).isThrownBy(
+        () -> underTest.assertAllDatasetsActive(Set.of(RESOURCE_NAME_1, RESOURCE_NAME_3)));
+  }
 }
diff --git a/modules/simulator/simulator-dataset/src/test/java/com/silenteight/simulator/dataset/fixture/DatasetFixtures.java b/modules/simulator/simulator-dataset/src/test/java/com/silenteight/simulator/dataset/fixture/DatasetFixtures.java
index f12b7b8..6219fc4 100644
--- a/modules/simulator/simulator-dataset/src/test/java/com/silenteight/simulator/dataset/fixture/DatasetFixtures.java
+++ b/modules/simulator/simulator-dataset/src/test/java/com/silenteight/simulator/dataset/fixture/DatasetFixtures.java
@@ -40,6 +40,7 @@ public final class DatasetFixtures {
   public static final UUID ID_6 = fromString("b95eb010-7f98-45b1-8c13-78eee94923fc");
   public static final String RESOURCE_NAME_1 = "datasets/" + ID_1;
   public static final String RESOURCE_NAME_2 = "datasets/" + ID_2;
+  public static final String RESOURCE_NAME_3 = "datasets/" + ID_3;
   public static final String DATASET_NAME = "Dataset name";
   public static final String DESCRIPTION = "Dataset description";
   public static final String EXTERNAL_RESOURCE_NAME =
diff --git a/modules/simulator/simulator-management/src/main/java/com/silenteight/simulator/management/create/CreateSimulationConfiguration.java b/modules/simulator/simulator-management/src/main/java/com/silenteight/simulator/management/create/CreateSimulationConfiguration.java
index 050a7d9..d3edd99 100644
--- a/modules/simulator/simulator-management/src/main/java/com/silenteight/simulator/management/create/CreateSimulationConfiguration.java
+++ b/modules/simulator/simulator-management/src/main/java/com/silenteight/simulator/management/create/CreateSimulationConfiguration.java
@@ -1,7 +1,8 @@
 package com.silenteight.simulator.management.create;
 
 import com.silenteight.auditing.bs.AuditingLogger;
-import com.silenteight.simulator.dataset.domain.DatasetQuery;
+import com.silenteight.simulator.dataset.domain.DatasetExternalResourceNameProvider;
+import com.silenteight.simulator.dataset.domain.DatasetValidator;
 import com.silenteight.simulator.management.domain.SimulationService;
 
 import org.springframework.context.annotation.Bean;
@@ -14,11 +15,17 @@ class CreateSimulationConfiguration {
   CreateSimulationUseCase createSimulationUseCase(
       ModelService modelService,
       AnalysisService analysisService,
-      DatasetQuery datasetQuery,
+      DatasetExternalResourceNameProvider datasetExternalResourceNameProvider,
+      DatasetValidator datasetValidator,
       SimulationService simulationService,
       AuditingLogger auditingLogger) {
 
     return new CreateSimulationUseCase(
-        modelService, analysisService, datasetQuery, simulationService, auditingLogger);
+        modelService,
+        analysisService,
+        datasetExternalResourceNameProvider,
+        datasetValidator,
+        simulationService,
+        auditingLogger);
   }
 }
diff --git a/modules/simulator/simulator-management/src/main/java/com/silenteight/simulator/management/create/CreateSimulationControllerAdvice.java b/modules/simulator/simulator-management/src/main/java/com/silenteight/simulator/management/create/CreateSimulationControllerAdvice.java
index f39a3e9..906a9d5 100644
--- a/modules/simulator/simulator-management/src/main/java/com/silenteight/simulator/management/create/CreateSimulationControllerAdvice.java
+++ b/modules/simulator/simulator-management/src/main/java/com/silenteight/simulator/management/create/CreateSimulationControllerAdvice.java
@@ -2,6 +2,7 @@ package com.silenteight.simulator.management.create;
 
 import lombok.extern.slf4j.Slf4j;
 
+import com.silenteight.simulator.dataset.domain.exception.NonActiveDatasetInSet;
 import com.silenteight.simulator.management.domain.NonUniqueSimulationException;
 
 import org.springframework.http.ResponseEntity;
@@ -20,6 +21,12 @@ class CreateSimulationControllerAdvice {
     return new ResponseEntity<>(e.getMessage(), BAD_REQUEST);
   }
 
+  @ExceptionHandler(NonActiveDatasetInSet.class)
+  public ResponseEntity<String> handle(NonActiveDatasetInSet e) {
+    log(e);
+    return new ResponseEntity<>(e.getMessage(), BAD_REQUEST);
+  }
+
   private static void log(Exception e) {
     log.error("Error occurred", e);
   }
diff --git a/modules/simulator/simulator-management/src/main/java/com/silenteight/simulator/management/create/CreateSimulationUseCase.java b/modules/simulator/simulator-management/src/main/java/com/silenteight/simulator/management/create/CreateSimulationUseCase.java
index c7d30d5..b712ccd 100644
--- a/modules/simulator/simulator-management/src/main/java/com/silenteight/simulator/management/create/CreateSimulationUseCase.java
+++ b/modules/simulator/simulator-management/src/main/java/com/silenteight/simulator/management/create/CreateSimulationUseCase.java
@@ -8,7 +8,8 @@ import com.silenteight.adjudication.api.v1.Analysis;
 import com.silenteight.auditing.bs.AuditingLogger;
 import com.silenteight.model.api.v1.SolvingModel;
 import com.silenteight.simulator.dataset.common.DatasetResource;
-import com.silenteight.simulator.dataset.domain.DatasetQuery;
+import com.silenteight.simulator.dataset.domain.DatasetExternalResourceNameProvider;
+import com.silenteight.simulator.dataset.domain.DatasetValidator;
 import com.silenteight.simulator.management.domain.SimulationService;
 
 import java.util.Set;
@@ -24,7 +25,10 @@ public class CreateSimulationUseCase {
   private final AnalysisService analysisService;
 
   @NonNull
-  private final DatasetQuery datasetQuery;
+  private final DatasetExternalResourceNameProvider externalResourceNameProvider;
+
+  @NonNull
+  private final DatasetValidator datasetValidator;
 
   @NonNull
   private final SimulationService simulationService;
@@ -34,6 +38,7 @@ public class CreateSimulationUseCase {
 
   public void activate(CreateSimulationRequest request) {
     request.preAudit(auditingLogger::log);
+    datasetValidator.assertAllDatasetsActive(request.getDatasets());
 
     SolvingModel model = modelService.getModel(request.getModel());
     Analysis analysis = runAnalysis(model);
@@ -57,7 +62,7 @@ public class CreateSimulationUseCase {
     datasets
         .stream()
         .map(DatasetResource::fromResourceName)
-        .map(datasetQuery::getExternalResourceName)
+        .map(externalResourceNameProvider::getExternalResourceName)
         .forEach(resourceName -> analysisService.addDatasetToAnalysis(analysis, resourceName));
   }
 }
diff --git a/modules/simulator/simulator-management/src/test/java/com/silenteight/simulator/management/create/CreateSimulationRestControllerTest.java b/modules/simulator/simulator-management/src/test/java/com/silenteight/simulator/management/create/CreateSimulationRestControllerTest.java
index 86beda1..2f13e9c 100644
--- a/modules/simulator/simulator-management/src/test/java/com/silenteight/simulator/management/create/CreateSimulationRestControllerTest.java
+++ b/modules/simulator/simulator-management/src/test/java/com/silenteight/simulator/management/create/CreateSimulationRestControllerTest.java
@@ -2,6 +2,7 @@ package com.silenteight.simulator.management.create;
 
 import com.silenteight.simulator.common.testing.rest.BaseRestControllerTest;
 import com.silenteight.simulator.common.web.exception.GenericExceptionControllerAdvice;
+import com.silenteight.simulator.dataset.domain.exception.NonActiveDatasetInSet;
 import com.silenteight.simulator.management.domain.NonUniqueSimulationException;
 
 import org.junit.jupiter.api.Test;
@@ -51,6 +52,16 @@ class CreateSimulationRestControllerTest extends BaseRestControllerTest {
         .statusCode(BAD_REQUEST.value());
   }
 
+  @Test
+  @WithMockUser(username = USERNAME, authorities = { MODEL_TUNER, AUDITOR })
+  void its400_whenSimulationCreatedWithExpiredDatasets() {
+    doThrow(NonActiveDatasetInSet.class)
+        .when(createSimulationUseCase).activate(any());
+
+    post(SIMULATIONS_URL, CREATE_SIMULATION_REQUEST)
+        .statusCode(BAD_REQUEST.value());
+  }
+
   @Test
   @WithMockUser(
       username = USERNAME,
diff --git a/modules/simulator/simulator-management/src/test/java/com/silenteight/simulator/management/create/CreateSimulationUseCaseTest.java b/modules/simulator/simulator-management/src/test/java/com/silenteight/simulator/management/create/CreateSimulationUseCaseTest.java
index d946e50..5be9cdf 100644
--- a/modules/simulator/simulator-management/src/test/java/com/silenteight/simulator/management/create/CreateSimulationUseCaseTest.java
+++ b/modules/simulator/simulator-management/src/test/java/com/silenteight/simulator/management/create/CreateSimulationUseCaseTest.java
@@ -4,20 +4,23 @@ import com.silenteight.adjudication.api.v1.Analysis;
 import com.silenteight.auditing.bs.AuditDataDto;
 import com.silenteight.auditing.bs.AuditingLogger;
 import com.silenteight.simulator.dataset.domain.DatasetQuery;
+import com.silenteight.simulator.dataset.domain.exception.NonActiveDatasetInSet;
 import com.silenteight.simulator.management.domain.SimulationService;
 
+import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.mockito.ArgumentCaptor;
-import org.mockito.InjectMocks;
 import org.mockito.Mock;
 import org.mockito.junit.jupiter.MockitoExtension;
 
 import java.util.List;
+import java.util.Set;
 
 import static com.silenteight.simulator.management.SimulationFixtures.*;
 import static com.silenteight.simulator.management.create.CreateSimulationRequest.POST_AUDIT_TYPE;
 import static com.silenteight.simulator.management.create.CreateSimulationRequest.PRE_AUDIT_TYPE;
+import static java.util.Set.of;
 import static org.assertj.core.api.Assertions.*;
 import static org.mockito.ArgumentCaptor.forClass;
 import static org.mockito.Mockito.*;
@@ -25,7 +28,6 @@ import static org.mockito.Mockito.*;
 @ExtendWith(MockitoExtension.class)
 class CreateSimulationUseCaseTest {
 
-  @InjectMocks
   private CreateSimulationUseCase underTest;
 
   @Mock
@@ -43,6 +45,12 @@ class CreateSimulationUseCaseTest {
   @Mock
   private AuditingLogger auditingLogger;
 
+  @BeforeEach
+  void setUp() {
+    underTest = new CreateSimulationConfiguration().createSimulationUseCase(
+        modelService, analysisService,datasetQuery,datasetQuery,simulationService,auditingLogger);
+  }
+
   @Test
   void createSimulation() {
     // given
@@ -51,6 +59,7 @@ class CreateSimulationUseCaseTest {
     when(analysisService.createAnalysis(SOLVING_MODEL)).thenReturn(analysis);
     when(datasetQuery.getExternalResourceName(DATASET_ID_1)).thenReturn(DATASET_NAME_1);
     when(datasetQuery.getExternalResourceName(DATASET_ID_2)).thenReturn(DATASET_NAME_2);
+    doNothing().when(datasetQuery).assertAllDatasetsActive(any());
 
     // when
     underTest.activate(CREATE_SIMULATION_REQUEST);
@@ -81,4 +90,16 @@ class CreateSimulationUseCaseTest {
     assertThat(logs).hasSizeGreaterThanOrEqualTo(index + 1);
     return logs.get(index);
   }
+
+  @Test
+  void createSimulationWithExpiredDatasetShouldThrowAnException() {
+    // given
+    Set<String> datasets = of(DATASET_NAME_1, DATASET_NAME_2);
+    doThrow(new NonActiveDatasetInSet(datasets))
+        .when(datasetQuery).assertAllDatasetsActive(datasets);
+
+    // when
+    assertThatThrownBy(() -> underTest.activate(CREATE_SIMULATION_REQUEST))
+        .isInstanceOf(NonActiveDatasetInSet.class);
+  }
 }
-- 
2.25.1


From 4b7553812bc03856af8fed66b477f657be43357a Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Kamil=20Dzi=C4=99cio=C5=82?= <kdzieciol@silenteight.com>
Date: Thu, 19 May 2022 13:19:09 +0200
Subject: [PATCH 11/12] INTERNAL: Set static minio address

---
 modules/simulator/nomad/deploy.sh | 9 +--------
 1 file changed, 1 insertion(+), 8 deletions(-)

diff --git a/modules/simulator/nomad/deploy.sh b/modules/simulator/nomad/deploy.sh
index d0db259..f7eb69f 100755
--- a/modules/simulator/nomad/deploy.sh
+++ b/modules/simulator/nomad/deploy.sh
@@ -2,14 +2,7 @@
 set  -e -o pipefail
 scriptdir="$(cd -- "$(dirname -- "${0}")" && pwd -P)"
 
-if [[ -z "$MINIO_ADDR" ]]; then
-    if [[ -x $(command -v consul) && -x $(command -v jq) ]]; then
-        minio_discovery=$(consul watch -type=service -service=minio | jq --raw-output '.[0].Service | [ .Address, (.Port | tostring) ] | join(":")')
-    fi
-
-    MINIO_ADDR="http://"${minio_discovery:-"localhost:9000"}
-fi
-
+MINIO_ADDR=https://minio.silenteight.com
 MINIO_ALIAS=${MINIO_ALIAS:-minio}
 
 export NOMAD_ADDR="${NOMAD_ADDR:-http://localhost:4646}"
-- 
2.25.1


From 73cea11d8cc5542756c3a53f3a0f3b41c7154d57 Mon Sep 17 00:00:00 2001
From: mmastylo <mmastylo@silenteight.com>
Date: Fri, 3 Dec 2021 13:58:40 +0100
Subject: [PATCH 12/12] INTERNAL: Switch to gov.events exchange (WEB-1987)

Switch to gov.events exchange.
---
 .../simulator/common/integration/BrokerConfiguration.java     | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/modules/simulator/simulator-common-web/src/main/java/com/silenteight/simulator/common/integration/BrokerConfiguration.java b/modules/simulator/simulator-common-web/src/main/java/com/silenteight/simulator/common/integration/BrokerConfiguration.java
index af2fdec..6d56dfb 100644
--- a/modules/simulator/simulator-common-web/src/main/java/com/silenteight/simulator/common/integration/BrokerConfiguration.java
+++ b/modules/simulator/simulator-common-web/src/main/java/com/silenteight/simulator/common/integration/BrokerConfiguration.java
@@ -14,7 +14,7 @@ import org.springframework.context.annotation.Configuration;
 import javax.validation.Valid;
 
 import static com.silenteight.rabbitcommonschema.definitions.RabbitConstants.AE_EVENT_EXCHANGE;
-import static com.silenteight.rabbitcommonschema.definitions.RabbitConstants.GOV_EVENT_EXCHANGE;
+import static com.silenteight.rabbitcommonschema.definitions.RabbitConstants.GOV_EVENTS_EXCHANGE;
 import static com.silenteight.rabbitcommonschema.definitions.RabbitConstants.WH_EVENT_EXCHANGE;
 import static java.util.Collections.emptyMap;
 import static org.springframework.amqp.core.Binding.DestinationType.QUEUE;
@@ -60,7 +60,7 @@ class BrokerConfiguration {
     return new Declarables(
         binding(
             properties.modelsArchivedQueueName(),
-            GOV_EVENT_EXCHANGE,
+            GOV_EVENTS_EXCHANGE,
             properties.modelsArchivedRoutingKey()));
   }
 
-- 
2.25.1

