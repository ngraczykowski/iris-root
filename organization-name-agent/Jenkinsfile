@Library('pipeline-shared-library') _
def utils = new com.silenteight.jenkins.ci.Utils()
def jenkins = new com.silenteight.jenkins.ci.Jenkins()

pipeline {
    agent none
    environment {
        PYPI_URL = credentials('pypi-readonly-url')
        TWINE_REPOSITORY_URL = 'https://repo.silenteight.com/artifactory/api/pypi/pypi'
        PIP_DOWNLOAD_CACHE = '/root/.cache/pip'
    }
    options {
        timeout(time: 1, unit: 'HOURS')   // just to be safe
    }
    parameters {
        booleanParam(name: 'RELEASE', defaultValue: false, description: 'Release new version')
    }

    stages {
        stage('Prepare python image') {
            agent any
            steps {
                sh 'docker pull python:3.7'
            }
        }
        stage('Prepare') {
            agent {
                docker {
                    image 'python:3.7'
                    args '-v $HOME/.cache/agent/pip:/root/.cache/pip'
                }
            }
            stages {
                stage('Build') {
                    steps {
                        sh './scripts/clean.sh'
                        sh './scripts/bootstrap.sh --index-url "${PYPI_URL}"'
                        sh './scripts/build.sh --index-url "${PYPI_URL}"'
                    }
                }
                stage('Test') {
                    steps {
                        sh './scripts/test.sh --index-url "${PYPI_URL}"'
                    }
                }
                stage('Publish') {
                    when {
                        anyOf {
                            branch 'master'
                            branch pattern: 'release-\\d+(\\.\\d+)?', comparator: 'REGEXP'
                        }
                    }
                    steps {
                        withCredentials([usernamePassword(
                            credentialsId: 'pypi-deployment-user',
                            usernameVariable: 'TWINE_USERNAME',
                            passwordVariable: 'TWINE_PASSWORD',
                        )]) {
                            sh './scripts/publish.sh --index-url "${PYPI_URL}"'
                        }
                    }
                }
                stage('Release') {
                    when {
                        allOf {
                            anyOf {
                                branch 'master'
                                branch pattern: 'release-\\d+(\\.\\d+)?', comparator: 'REGEXP'
                            }
                            expression { return params.RELEASE }
                        }
                    }
                    steps {
                        sh 'pip install --index-url "${PYPI_URL}" bump2version tox'
                        sh 'git tag --delete "$(git tag --list)"'
                        sh './scripts/release.sh --index-url ${PYPI_URL}'
                        withCredentials([usernamePassword(
                            credentialsId: 'pypi-deployment-user',
                            usernameVariable: 'TWINE_USERNAME',
                            passwordVariable: 'TWINE_PASSWORD',
                        )]) {
                            sh './scripts/publish.sh --index-url "${PYPI_URL}"'
                        }
                    }
                }
                stage('Prepare nomad artifacts') {
                    steps {
                        sh './nomad/prepare.sh'
                    }
                }
            }
            post {
                always {
                    junit '.tox/flake8-report.xml, .tox/mypy-report.xml, .tox/pytest-report.xml'
                    archiveArtifacts artifacts: 'dist/*, nomad/*.tar.bz2', fingerprint: true
                }
                success {
                    publishCoverage adapters: [cobertura('.tox/coverage-report.xml')]
                    stash includes: 'dist/*, nomad/*/artifacts/*', name: 'artifacts'
                }
            }
        }

        stage('Deployment'){
            agent {
                label 'nomad'
            }
            when {
                anyOf {
                    branch 'master'
                    tag pattern: '^v[\\d\\.]+\$', comparator: "REGEXP"
                }
            }
            stages {
                stage('Upload artifacts') {
                    steps {
                        sh './scripts/clean.sh'
                        unstash 'artifacts'
                        rtServer (
                            id: "silenteight-repo",
                            url: "https://repo.silenteight.com/artifactory",
                            credentialsId: "artifactory-deployment-user"
                        )
                        rtUpload (
                            serverId: 'silenteight-repo',
                            spec: '''{
                                  "files": [
                                    {
                                      "pattern": "dist/*.pyz",
                                      "target": "dist-public-local/organization-name-agent/"
                                    }
                                 ]
                            }''',
                        )
                        rtUpload (
                            serverId: 'silenteight-repo',
                            spec: '''{
                                  "files": [
                                    {
                                      "pattern": "dist/*.tgz",
                                      "target": "dist-public-local/organization-name-agent/"
                                    }
                                 ]
                            }''',
                        )
                    }
                }
                stage('Deploy on nomad dev') {
                    steps {
                        sh './nomad/full/deploy.sh'
                    }
                }
            }
       }
    }
}

