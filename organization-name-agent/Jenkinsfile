@Library('pipeline-shared-library') _
def utils = new com.silenteight.jenkins.ci.Utils()
def jenkins = new com.silenteight.jenkins.ci.Jenkins()

pipeline {
    agent none
    environment {
        PYPI_URL = credentials('pypi-readonly-url')
        TWINE_REPOSITORY_URL = 'https://repo.silenteight.com/artifactory/api/pypi/pypi'
        ECR = '278875966478.dkr.ecr.us-east-1.amazonaws.com'
        HELM_VERSION = "0.16.0"
        APP_NAME = "organization-name-agent"
    }
    options {
        timeout(time: 1, unit: 'HOURS')   // just to be safe
    }
    parameters {
        booleanParam(name: 'RELEASE', defaultValue: false, description: 'Release new version')
    }

    stages {
        stage('Build and publish package') {
            agent {
                docker {
                    image 'docker.repo.silenteight.com/python-build-image:3.7-bullseye'
                    args '--volume $HOME/.cache/agent/pip:/home/jenkins/.cache/pip'
                    alwaysPull true
                }
            }
            stages {
                stage('Prepare') {
                    steps {
                        sh 'pip install --index-url "${PYPI_URL}" --requirement requirements.txt'
                    }
                }
                stage('Build package') {
                    steps {
                        sh './scripts/clean.sh'
                        sh './scripts/build.sh --index-url "${PYPI_URL}"'
                        script {
                           env.VERSION = sh(
                            returnStdout: true,
                            script: '''#!/bin/bash
                                grep ^current_version setup.cfg | awk '{ print $3 }'
                            '''
                           ).trim()
                        }
                    }
                }
                stage('Test package') {
                    steps {
                        sh 'pip install --index-url "${PYPI_URL}" tox'
                        sh './scripts/test.sh --index-url "${PYPI_URL}"'
                    }
                }
                stage('Publish package') {
                    when {
                        anyOf {
                            branch 'master'
                            branch pattern: 'release-\\d+(\\.\\d+)?', comparator: 'REGEXP'
                        }
                    }
                    steps {
                        withCredentials([usernamePassword(
                            credentialsId: 'pypi-deployment-user',
                            usernameVariable: 'TWINE_USERNAME',
                            passwordVariable: 'TWINE_PASSWORD',
                        )]) {
                            sh './scripts/publish.sh --index-url "${PYPI_URL}"'
                        }
                    }
                }
                stage('Release package') {
                    when {
                        allOf {
                            anyOf {
                                branch 'master'
                                branch pattern: 'release-\\d+(\\.\\d+)?', comparator: 'REGEXP'
                            }
                            expression { return params.RELEASE }
                        }
                    }
                    steps {
                        sh 'pip install --index-url "${PYPI_URL}" bump2version tox'
                        sh 'git tag --delete $(git tag --list)'
                        sshagent([env.JENKINS_SSH_NAME]) {
                            sh './scripts/release.sh --index-url ${PYPI_URL}'
                        }
                        script {
                           env.VERSION = env.VERSION.replace('-dev', '')
                        }
                        withCredentials([usernamePassword(
                            credentialsId: 'pypi-deployment-user',
                            usernameVariable: 'TWINE_USERNAME',
                            passwordVariable: 'TWINE_PASSWORD',
                        )]) {
                            sh './scripts/publish.sh --index-url "${PYPI_URL}"'
                        }
                    }
                }
                stage('Prepare nomad artifacts') {
                    steps {
                        sh './nomad/prepare.sh'
                    }
                }
            }
            post {
                always {
                    junit testResults: '.tox/flake8-report.xml, .tox/mypy-report.xml, .tox/pytest-report.xml',
                          allowEmptyResults: true
                    archiveArtifacts artifacts: 'dist/*, nomad/*.tar.bz2', fingerprint: true
                }
                success {
                    publishCoverage adapters: [istanbulCoberturaAdapter('.tox/coverage-report.xml')],
                                    failNoReports: false
                    stash includes: 'dist/*, nomad/*/artifacts/*', name: 'artifacts'
                }
            }
        }
        stage('Build and publish docker image') {
            agent any
            stages {
                stage('Build image') {
                    steps {
                        sh './scripts/build_image.sh'
                    }
                }
                stage('Push image to S8 repo') {
                    when {
                        branch 'master'
                    }
                    steps {
                        sh './scripts/push_image.sh'
                    }
                }
                stage('Helm') {
                    when {
                        branch 'master'
                    }
                    steps {
                        withCredentials([
                          usernamePassword(
                            credentialsId: 'artifactory-deployment-user',
                            usernameVariable: 'DEPLOY_USERNAME',
                            passwordVariable: 'DEPLOY_PASSWORD'
                            )]) {
                                sh '''
                                ulimit -l
                                helm repo add --username $DEPLOY_USERNAME --password $DEPLOY_PASSWORD s8helm https://repo.silenteight.com/artifactory/helm
                                helm package --app-version ${HELM_VERSION} helm-chart
                                helm push-artifactory --skip-reindex ${APP_NAME}-*.tgz s8helm
                                '''
                            }
                    }
                }
                stage('ECR') {
                    when {
                        branch 'master'
                    }
                    agent {
                        label 'aws'
                    }
                    steps {
                        sh """
                          IMAGE_TAG=${env.VERSION}
                          aws ecr get-login-password --region us-east-1 | skopeo login --username AWS --password-stdin ${ECR}
                          skopeo copy docker://docker.repo.silenteight.com/organization-name-agent:${IMAGE_TAG} docker://${ECR}/organization-name-agent:${IMAGE_TAG}
                          skopeo copy docker://docker.repo.silenteight.com/organization-name-agent:latest docker://${ECR}/organization-name-agent:latest
                      """
                    }
                }
            }
        }
        stage('Zipped (.pyz) artifacts upload') {
            when {
                anyOf {
                    branch 'master'
                    tag pattern: '^v(\\d+(\\.\\d+)*)\$', comparator: 'REGEXP'
                }
            }
            stages {
                stage('Upload artifacts') {
                    steps {
                        sh './scripts/clean.sh'
                        unstash 'artifacts'
                        rtServer (
                            id: "silenteight-repo",
                            url: "https://repo.silenteight.com/artifactory",
                            credentialsId: "artifactory-deployment-user"
                        )
                        rtUpload (
                            serverId: 'silenteight-repo',
                            spec: '''{
                                "files": [
                                    {
                                      "pattern": "dist/*.pyz",
                                      "target": "dist-public-local/organization-name-agent/"
                                    },
                                    {
                                      "pattern": "dist/*.tgz",
                                      "target": "dist-public-local/organization-name-agent/"
                                    }
                                ]
                            }''',
                        )
                    }
                }
            }
       }
    }
}

